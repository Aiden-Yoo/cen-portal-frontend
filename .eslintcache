[{"C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\index.tsx":"1","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\routers\\logged-out-router.tsx":"2","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\pages\\create-account.tsx":"3","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\apollo.ts":"4","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\reportWebVitals.ts":"5","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\pages\\login.tsx":"6","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\styles\\theme.tsx":"7","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\styles\\global-styles.tsx":"8","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\constants.ts":"9","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\hooks\\useMe.tsx":"10","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\components\\loading.tsx":"11","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\pages\\404.tsx":"12","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\components\\App.tsx":"13","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\routers\\logged-in-router.tsx":"14","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\components\\header.tsx":"15","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\pages\\cen\\devices\\devices.tsx":"16","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\pages\\cen\\partners\\partners.tsx":"17","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\pages\\cen\\orders\\orders.tsx":"18","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\__generated__\\globalTypes.ts":"19"},{"size":876,"mtime":1611116615097,"results":"20","hashOfConfig":"21"},{"size":487,"mtime":1611039302809,"results":"22","hashOfConfig":"21"},{"size":12197,"mtime":1611119647402,"results":"23","hashOfConfig":"21"},{"size":1298,"mtime":1611107512768,"results":"24","hashOfConfig":"21"},{"size":425,"mtime":1610961708839,"results":"25","hashOfConfig":"21"},{"size":5950,"mtime":1611119684841,"results":"26","hashOfConfig":"21"},{"size":1618,"mtime":1611068180626,"results":"27","hashOfConfig":"21"},{"size":692,"mtime":1611035487851,"results":"28","hashOfConfig":"21"},{"size":48,"mtime":1611037643066,"results":"29","hashOfConfig":"21"},{"size":387,"mtime":1611129830170,"results":"30","hashOfConfig":"21"},{"size":313,"mtime":1611298617791,"results":"31","hashOfConfig":"21"},{"size":2108,"mtime":1611402193100,"results":"32","hashOfConfig":"21"},{"size":416,"mtime":1611370102171,"results":"33","hashOfConfig":"21"},{"size":6091,"mtime":1611405468603,"results":"34","hashOfConfig":"21"},{"size":1014,"mtime":1611417511571,"results":"35","hashOfConfig":"21"},{"size":7353,"mtime":1611509633458,"results":"36","hashOfConfig":"21"},{"size":85,"mtime":1611405291513,"results":"37","hashOfConfig":"21"},{"size":81,"mtime":1611404740175,"results":"38","hashOfConfig":"21"},{"size":1006,"mtime":1611507024466,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"ahpwyc",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\index.tsx",[],[],"C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\routers\\logged-out-router.tsx",["87"],"C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\pages\\create-account.tsx",["88","89"],"import { gql, useMutation } from '@apollo/client';\r\nimport React, { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { Form, Input, Button, Select, Spin, notification } from 'antd';\r\nimport {\r\n  UserOutlined,\r\n  LockOutlined,\r\n  TagOutlined,\r\n  SnippetsOutlined,\r\n} from '@ant-design/icons';\r\nimport logo from '../images/CoreEdge_logo.png';\r\nimport {\r\n  createAccountMutation,\r\n  createAccountMutationVariables,\r\n} from '../__generated__/createAccountMutation';\r\nimport { UserRole } from '../__generated__/globalTypes';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: no-repeat url() center center;\r\n  background-color: rgba(21, 20, 13, 0.5);\r\n  background-size: 1920px 640px;\r\n`;\r\n\r\nconst LoginHeader = styled.header`\r\n  padding-left: 5px;\r\n  position: absolute;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100vw;\r\n  height: 60px;\r\n  background-color: rgba(21, 20, 13, 0.5);\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  width: 234px;\r\n  height: 50px;\r\n`;\r\n\r\nconst Box = styled.div`\r\n  margin-left: 100px;\r\n  background-color: white;\r\n  border: 1px solid #e6e6e6;\r\n  text-align: center;\r\n  width: 300px;\r\n`;\r\n\r\nconst Column = styled.div`\r\n  width: 20%;\r\n`;\r\n\r\nconst SwitchBox = styled(Box)`\r\n  padding: 25px 0px;\r\n  margin-top: 15px;\r\n`;\r\n\r\nconst SwitchLink = styled.span`\r\n  color: ${(props) => props.theme.colors.green_1};\r\n  cursor: pointer;\r\n`;\r\n\r\nconst FormBox = styled(Box)`\r\n  padding: 30px;\r\n`;\r\n\r\nconst SButton = styled(Button)`\r\n  width: 100%;\r\n`;\r\n\r\nconst CREATE_ACCOUNT_MUTATION = gql`\r\n  mutation createAccountMutation($createAccountInput: CreateAccountInput!) {\r\n    createAccount(input: $createAccountInput) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CreateAccount: React.FC = () => {\r\n  const [email, setUsername] = useState<string>('');\r\n  const [password, setPassword] = useState('');\r\n  const [passwordConfirm, setPasswordConfirm] = useState('');\r\n  const [role, setRole] = useState<UserRole>(UserRole.Partner);\r\n  const [name, setName] = useState('');\r\n  const [company, setCompany] = useState('');\r\n  const [team, setTeam] = useState('');\r\n  const [jobTitle, setJobTitle] = useState('');\r\n\r\n  const history = useHistory();\r\n\r\n  const onCompleted = (data: createAccountMutation) => {\r\n    const {\r\n      createAccount: { ok, error },\r\n    } = data;\r\n    if (ok) {\r\n      notification.info({\r\n        message: 'Success!',\r\n        description:\r\n          \"회원가입 성공. '① 가입 이메일 인증, ② 관리자 승인'이 완료되어야 로그인이 가능합니다.\",\r\n        placement: 'topRight',\r\n        duration: 0,\r\n      });\r\n      setUsername('');\r\n      setPassword('');\r\n      setPasswordConfirm('');\r\n      setRole(UserRole.Partner);\r\n      setName('');\r\n      setCompany('');\r\n      setTeam('');\r\n      setJobTitle('');\r\n      history.push('/');\r\n    } else if (error) {\r\n      notification.error({\r\n        message: 'Error',\r\n        description: `회원가입 실패. ${error}`,\r\n        placement: 'topRight',\r\n        duration: 0,\r\n      });\r\n    }\r\n  };\r\n\r\n  const [\r\n    createAccountMutation,\r\n    { loading, data: createAccountMutationResult, error },\r\n  ] = useMutation<createAccountMutation, createAccountMutationVariables>(\r\n    CREATE_ACCOUNT_MUTATION,\r\n    {\r\n      onCompleted,\r\n    },\r\n  );\r\n\r\n  if (error) console.log(error);\r\n\r\n  const onFinish = () => {\r\n    if (!loading) {\r\n      createAccountMutation({\r\n        variables: {\r\n          createAccountInput: {\r\n            email,\r\n            password,\r\n            role,\r\n            company,\r\n            name,\r\n            team,\r\n            jobTitle,\r\n          },\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo: unknown) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const onChangeHandler = (event: any) => {\r\n    if (typeof event === 'string') {\r\n      if (event === 'CEN') setRole(UserRole.CEN);\r\n      else if (event === 'Partner') setRole(UserRole.Partner);\r\n      else if (event === 'Client') setRole(UserRole.Client);\r\n    } else {\r\n      const {\r\n        target: { name, value },\r\n      } = event;\r\n      if (name === 'email') {\r\n        setUsername(value);\r\n      } else if (name === 'password') {\r\n        setPassword(value);\r\n      } else if (name === 'passwordConfirm') {\r\n        setPasswordConfirm(value);\r\n      } else if (name === 'name') {\r\n        setName(value);\r\n      } else if (name === 'company') {\r\n        setCompany(value);\r\n      } else if (name === 'team') {\r\n        setTeam(value);\r\n      } else if (name === 'jobTitle') {\r\n        setJobTitle(value);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Sign Up | CEN Portal</title>\r\n      </Helmet>\r\n      <LoginHeader>\r\n        <Logo src={logo} />\r\n      </LoginHeader>\r\n      <Container>\r\n        <Column>\r\n          <FormBox>\r\n            <Form onFinish={onFinish} onFinishFailed={onFinishFailed}>\r\n              <Form.Item\r\n                name=\"role\"\r\n                rules={[\r\n                  { required: true, message: '회원 구분을 선택해주세요' },\r\n                ]}\r\n              >\r\n                <Select\r\n                  placeholder=\"Member Role\"\r\n                  value={role}\r\n                  onChange={onChangeHandler}\r\n                >\r\n                  {/* {Object.keys(UserRole).map((role, index) => (\r\n                    <Select.Option key={index} value={role}>\r\n                      {role}\r\n                    </Select.Option>\r\n                  ))} */}\r\n                  <Select.Option value={UserRole.CEN}>\r\n                    코어엣지네트웍스\r\n                  </Select.Option>\r\n                  <Select.Option value={UserRole.Partner}>파트너</Select.Option>\r\n                  <Select.Option value={UserRole.Client}>고객</Select.Option>\r\n                </Select>\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"email\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    whitespace: true,\r\n                    message: '사용자 계정을 입력하세요',\r\n                  },\r\n                  {\r\n                    pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n                    message: '이메일 형태로 입력해주세요',\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<UserOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Email\"\r\n                  value={email}\r\n                  name=\"email\"\r\n                  type=\"text\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"password\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    whitespace: true,\r\n                    message: '비밀번호를 입력하세요',\r\n                  },\r\n                  { min: 5, message: '비밀번호는 최소 5자리입니다' },\r\n                  { max: 20, message: '비밀번호는 최대 20자리입니다' },\r\n                  {\r\n                    pattern: /^[a-zA-Z0-9_!@#$%^&*()_+-={},./<>?;:'\"]+$/,\r\n                    message: '유효하지 않은 문자를 입력했습니다',\r\n                  },\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  prefix={<LockOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Password\"\r\n                  value={password}\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"passwordConfirm\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: '비밀번호를 재입력 해주세요',\r\n                  },\r\n                  ({ getFieldValue }) => ({\r\n                    validator(rule, value) {\r\n                      if (!value || getFieldValue('password') === value) {\r\n                        return Promise.resolve();\r\n                      }\r\n                      return Promise.reject('비밀번호가 불일치합니다');\r\n                    },\r\n                  }),\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  prefix={<LockOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Confirm Password\"\r\n                  value={passwordConfirm}\r\n                  name=\"passwordConfirm\"\r\n                  type=\"password\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"name\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: '이름을 입력해주세요',\r\n                    whitespace: true,\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<TagOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Name\"\r\n                  value={name}\r\n                  name=\"name\"\r\n                  type=\"text\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"company\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: '회사명을 입력해주세요',\r\n                    whitespace: true,\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={\r\n                    <SnippetsOutlined style={{ color: 'rgba(0,0,0,.25)' }} />\r\n                  }\r\n                  placeholder=\"Company Name\"\r\n                  value={company}\r\n                  name=\"company\"\r\n                  type=\"text\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"team\"\r\n                rules={[\r\n                  {\r\n                    required: false,\r\n                    message: '팀명을 입력해주세요',\r\n                    whitespace: true,\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={\r\n                    <SnippetsOutlined style={{ color: 'rgba(0,0,0,.25)' }} />\r\n                  }\r\n                  placeholder=\"Team Name\"\r\n                  value={team}\r\n                  name=\"team\"\r\n                  type=\"text\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"jobTitle\"\r\n                rules={[\r\n                  {\r\n                    required: false,\r\n                    message: '직함이나 직책을 입력해주세요',\r\n                    whitespace: true,\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={\r\n                    <SnippetsOutlined style={{ color: 'rgba(0,0,0,.25)' }} />\r\n                  }\r\n                  placeholder=\"Job Title\"\r\n                  value={jobTitle}\r\n                  name=\"jobTitle\"\r\n                  type=\"text\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <SButton type=\"primary\" htmlType=\"submit\">\r\n                {!loading ? '회원가입' : <Spin />}\r\n              </SButton>\r\n            </Form>\r\n          </FormBox>\r\n          <SwitchBox>\r\n            이미 사용자 계정이 있으신가요?{' '}\r\n            <SwitchLink>\r\n              <Link to=\"/\">로그인</Link>\r\n            </SwitchLink>\r\n          </SwitchBox>\r\n        </Column>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\apollo.ts",[],[],"C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\reportWebVitals.ts",["90"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n",[],"C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\pages\\login.tsx",["91","92"],"import { gql, useMutation } from '@apollo/client';\r\nimport React, { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Link } from 'react-router-dom';\r\nimport { authTokenVar, isLoggedInVar } from '../apollo';\r\nimport styled from 'styled-components';\r\nimport { Form, Input, Button, Spin, notification } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport { LOCALSTORAGE_TOKEN } from '../constants';\r\nimport logo from '../images/CoreEdge_logo.png';\r\nimport {\r\n  loginMutation,\r\n  loginMutationVariables,\r\n} from '../__generated__/loginMutation';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: no-repeat url() center center;\r\n  background-color: rgba(21, 20, 13, 0.5);\r\n  background-size: 1920px 640px;\r\n`;\r\n\r\nconst LoginHeader = styled.header`\r\n  padding-left: 5px;\r\n  position: absolute;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100vw;\r\n  height: 60px;\r\n  background-color: rgba(21, 20, 13, 0.5);\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  width: 234px;\r\n  height: 50px;\r\n`;\r\n\r\nconst Box = styled.div`\r\n  margin-left: 100px;\r\n  background-color: white;\r\n  border: 1px solid #e6e6e6;\r\n  text-align: center;\r\n  width: 300px;\r\n`;\r\n\r\nconst Column = styled.div`\r\n  width: 20%;\r\n`;\r\n\r\nconst SwitchBox = styled(Box)`\r\n  padding: 25px 0px;\r\n  margin-top: 15px;\r\n`;\r\n\r\nconst SwitchLink = styled.span`\r\n  color: ${(props) => props.theme.colors.green_1};\r\n  cursor: pointer;\r\n`;\r\n\r\nconst FormBox = styled(Box)`\r\n  padding: 30px;\r\n`;\r\n\r\nconst SButton = styled(Button)`\r\n  width: 100%;\r\n`;\r\n\r\nconst LOGIN_MUTATION = gql`\r\n  mutation loginMutation($loginInput: LoginInput!) {\r\n    login(input: $loginInput) {\r\n      ok\r\n      token\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Login: React.FC = () => {\r\n  const [email, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const onCompleted = (data: loginMutation) => {\r\n    const {\r\n      login: { ok, token, error },\r\n    } = data;\r\n    if (ok && token) {\r\n      localStorage.setItem(LOCALSTORAGE_TOKEN, token);\r\n      authTokenVar(token);\r\n      isLoggedInVar(true);\r\n      notification.success({\r\n        message: 'Success!',\r\n        description: '로그인 성공',\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n    } else if (error) {\r\n      notification.error({\r\n        message: 'Error',\r\n        description: `로그인 실패. ${error}`,\r\n        placement: 'topRight',\r\n        duration: 0,\r\n      });\r\n    }\r\n  };\r\n\r\n  const [loginMutation, { data, loading, error }] = useMutation<\r\n    loginMutation,\r\n    loginMutationVariables\r\n  >(LOGIN_MUTATION, {\r\n    onCompleted,\r\n  });\r\n\r\n  if (error) console.log(error);\r\n\r\n  const onFinish = () => {\r\n    if (!loading) {\r\n      loginMutation({\r\n        variables: {\r\n          loginInput: {\r\n            email,\r\n            password,\r\n          },\r\n        },\r\n      });\r\n      setUsername('');\r\n      setPassword('');\r\n    }\r\n  };\r\n\r\n  const onChangeHandler = (event: any) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n    if (name === 'email') {\r\n      setUsername(value);\r\n    }\r\n    if (name === 'password') {\r\n      setPassword(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Log in | CEN Portal</title>\r\n      </Helmet>\r\n      <LoginHeader>\r\n        <Logo src={logo} />\r\n      </LoginHeader>\r\n      <Container>\r\n        <Column>\r\n          <FormBox>\r\n            <Form onFinish={onFinish}>\r\n              <Form.Item\r\n                name=\"email\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    whitespace: true,\r\n                    message: '사용자 계정을 입력하세요',\r\n                  },\r\n                  {\r\n                    pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n                    message: '이메일 형태로 입력해주세요',\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<UserOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Email\"\r\n                  value={email}\r\n                  name=\"email\"\r\n                  type=\"text\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"password\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    whitespace: true,\r\n                    message: '비밀번호를 입력하세요',\r\n                  },\r\n                  { min: 5, message: '비밀번호는 최소 5자리입니다' },\r\n                  { max: 20, message: '비밀번호는 최대 20자리입니다' },\r\n                  {\r\n                    pattern: /^[a-zA-Z0-9_!@#$%^&*()_+-={},./<>?;:'\"]+$/,\r\n                    message: '유효하지 않은 문자를 입력했습니다',\r\n                  },\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  prefix={<LockOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Password\"\r\n                  value={password}\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <SButton type=\"primary\" htmlType=\"submit\">\r\n                {!loading ? '로그인' : <Spin />}\r\n              </SButton>\r\n            </Form>\r\n          </FormBox>\r\n          <SwitchBox>\r\n            회원가입이 필요하신가요?{' '}\r\n            <SwitchLink>\r\n              <Link to=\"/create-account\">회원가입</Link>\r\n            </SwitchLink>\r\n          </SwitchBox>\r\n        </Column>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\styles\\theme.tsx",[],"C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\styles\\global-styles.tsx",[],[],"C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\constants.ts",[],[],"C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\hooks\\useMe.tsx",["93"],"import { gql, useQuery } from '@apollo/client';\r\nimport { meQuery } from '../__generated__/meQuery';\r\n\r\nexport const ME_QUERY = gql`\r\n  query meQuery {\r\n    me {\r\n      id\r\n      email\r\n      role\r\n      name\r\n      company\r\n      team\r\n      jobTitle\r\n      bio\r\n      verified\r\n      isLocked\r\n    }\r\n  }\r\n`;\r\n\r\nexport const useMe = () => {\r\n  return useQuery<meQuery>(ME_QUERY);\r\n};\r\n","C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\components\\loading.tsx",[],"C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\pages\\404.tsx",[],"C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\components\\App.tsx",[],"C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\routers\\logged-in-router.tsx",[],"C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\components\\header.tsx",[],"C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\pages\\cen\\devices\\devices.tsx",["94","95","96","97","98","99","100","101","102","103","104","105","106","107"],"C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\pages\\cen\\partners\\partners.tsx",[],"C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\pages\\cen\\orders\\orders.tsx",[],"C:\\Users\\DJYoo\\Documents\\cen-portal-frontend\\src\\__generated__\\globalTypes.ts",[],{"ruleId":"108","severity":1,"message":"109","line":6,"column":32,"nodeType":"110","messageId":"111","endLine":6,"endColumn":37},{"ruleId":"112","severity":1,"message":"113","line":129,"column":22,"nodeType":"114","messageId":"115","endLine":129,"endColumn":49},{"ruleId":"116","severity":1,"message":"117","line":161,"column":35,"nodeType":"118","messageId":"119","endLine":161,"endColumn":38,"suggestions":"120"},{"ruleId":"108","severity":1,"message":"109","line":3,"column":25,"nodeType":"110","messageId":"111","endLine":3,"endColumn":57},{"ruleId":"112","severity":1,"message":"121","line":109,"column":27,"nodeType":"114","messageId":"115","endLine":109,"endColumn":31},{"ruleId":"116","severity":1,"message":"117","line":133,"column":35,"nodeType":"118","messageId":"119","endLine":133,"endColumn":38,"suggestions":"122"},{"ruleId":"108","severity":1,"message":"109","line":21,"column":22,"nodeType":"110","messageId":"111","endLine":21,"endColumn":27},{"ruleId":"112","severity":1,"message":"123","line":3,"column":38,"nodeType":"114","messageId":"115","endLine":3,"endColumn":52},{"ruleId":"108","severity":1,"message":"109","line":78,"column":23,"nodeType":"110","messageId":"111","endLine":78,"endColumn":28},{"ruleId":"116","severity":1,"message":"117","line":130,"column":22,"nodeType":"118","messageId":"119","endLine":130,"endColumn":25,"suggestions":"124"},{"ruleId":"116","severity":1,"message":"117","line":131,"column":23,"nodeType":"118","messageId":"119","endLine":131,"endColumn":26,"suggestions":"125"},{"ruleId":"112","severity":1,"message":"126","line":163,"column":9,"nodeType":"114","messageId":"115","endLine":163,"endColumn":21},{"ruleId":"116","severity":1,"message":"117","line":163,"column":30,"nodeType":"118","messageId":"119","endLine":163,"endColumn":33,"suggestions":"127"},{"ruleId":"112","severity":1,"message":"128","line":167,"column":9,"nodeType":"114","messageId":"115","endLine":167,"endColumn":24},{"ruleId":"116","severity":1,"message":"117","line":171,"column":49,"nodeType":"118","messageId":"119","endLine":171,"endColumn":52,"suggestions":"129"},{"ruleId":"112","severity":1,"message":"130","line":177,"column":9,"nodeType":"114","messageId":"115","endLine":177,"endColumn":25},{"ruleId":"116","severity":1,"message":"117","line":177,"column":38,"nodeType":"118","messageId":"119","endLine":177,"endColumn":41,"suggestions":"131"},{"ruleId":"116","severity":1,"message":"117","line":177,"column":49,"nodeType":"118","messageId":"119","endLine":177,"endColumn":52,"suggestions":"132"},{"ruleId":"112","severity":1,"message":"133","line":181,"column":9,"nodeType":"114","messageId":"115","endLine":181,"endColumn":13},{"ruleId":"116","severity":1,"message":"117","line":216,"column":19,"nodeType":"118","messageId":"119","endLine":216,"endColumn":22,"suggestions":"134"},{"ruleId":"116","severity":1,"message":"117","line":236,"column":33,"nodeType":"118","messageId":"119","endLine":236,"endColumn":36,"suggestions":"135"},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-unused-vars","'createAccountMutationResult' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["136","137"],"'data' is assigned a value but never used.",["138","139"],"'SetStateAction' is defined but never used.",["140","141"],["142","143"],"'handleCancel' is assigned a value but never used.",["144","145"],"'handleRowDelete' is assigned a value but never used.",["146","147"],"'onShowSizeChange' is assigned a value but never used.",["148","149"],["150","151"],"'save' is assigned a value but never used.",["152","153"],["154","155"],{"messageId":"156","fix":"157","desc":"158"},{"messageId":"159","fix":"160","desc":"161"},{"messageId":"156","fix":"162","desc":"158"},{"messageId":"159","fix":"163","desc":"161"},{"messageId":"156","fix":"164","desc":"158"},{"messageId":"159","fix":"165","desc":"161"},{"messageId":"156","fix":"166","desc":"158"},{"messageId":"159","fix":"167","desc":"161"},{"messageId":"156","fix":"168","desc":"158"},{"messageId":"159","fix":"169","desc":"161"},{"messageId":"156","fix":"170","desc":"158"},{"messageId":"159","fix":"171","desc":"161"},{"messageId":"156","fix":"172","desc":"158"},{"messageId":"159","fix":"173","desc":"161"},{"messageId":"156","fix":"174","desc":"158"},{"messageId":"159","fix":"175","desc":"161"},{"messageId":"156","fix":"176","desc":"158"},{"messageId":"159","fix":"177","desc":"161"},{"messageId":"156","fix":"178","desc":"158"},{"messageId":"159","fix":"179","desc":"161"},"suggestUnknown",{"range":"180","text":"181"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"180","text":"182"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"183","text":"181"},{"range":"183","text":"182"},{"range":"184","text":"181"},{"range":"184","text":"182"},{"range":"185","text":"181"},{"range":"185","text":"182"},{"range":"186","text":"181"},{"range":"186","text":"182"},{"range":"187","text":"181"},{"range":"187","text":"182"},{"range":"188","text":"181"},{"range":"188","text":"182"},{"range":"189","text":"181"},{"range":"189","text":"182"},{"range":"190","text":"181"},{"range":"190","text":"182"},{"range":"191","text":"181"},{"range":"191","text":"182"},[3881,3884],"unknown","never",[3030,3033],[2957,2960],[3018,3021],[3812,3815],[3983,3986],[4109,4112],[4120,4123],[5171,5174],[5732,5735]]