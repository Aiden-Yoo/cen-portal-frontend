[{"/home/aiden/myCode/cen-portal-frontend/src/index.tsx":"1","/home/aiden/myCode/cen-portal-frontend/src/reportWebVitals.ts":"2","/home/aiden/myCode/cen-portal-frontend/src/apollo.ts":"3","/home/aiden/myCode/cen-portal-frontend/src/components/App.tsx":"4","/home/aiden/myCode/cen-portal-frontend/src/styles/global-styles.tsx":"5","/home/aiden/myCode/cen-portal-frontend/src/styles/theme.tsx":"6","/home/aiden/myCode/cen-portal-frontend/src/constants.ts":"7","/home/aiden/myCode/cen-portal-frontend/src/routers/logged-in-router.tsx":"8","/home/aiden/myCode/cen-portal-frontend/src/routers/logged-out-router.tsx":"9","/home/aiden/myCode/cen-portal-frontend/src/__generated__/globalTypes.ts":"10","/home/aiden/myCode/cen-portal-frontend/src/components/loading.tsx":"11","/home/aiden/myCode/cen-portal-frontend/src/components/header.tsx":"12","/home/aiden/myCode/cen-portal-frontend/src/hooks/useMe.tsx":"13","/home/aiden/myCode/cen-portal-frontend/src/pages/404.tsx":"14","/home/aiden/myCode/cen-portal-frontend/src/pages/create-account.tsx":"15","/home/aiden/myCode/cen-portal-frontend/src/pages/login.tsx":"16","/home/aiden/myCode/cen-portal-frontend/src/pages/cen/orders/addOrder.tsx":"17","/home/aiden/myCode/cen-portal-frontend/src/pages/cen/orders/orderDetail.tsx":"18","/home/aiden/myCode/cen-portal-frontend/src/pages/cen/orders/orders.tsx":"19","/home/aiden/myCode/cen-portal-frontend/src/pages/cen/devices/devices.tsx":"20","/home/aiden/myCode/cen-portal-frontend/src/pages/cen/partners/partners.tsx":"21","/home/aiden/myCode/cen-portal-frontend/src/pages/cen/devices/addBundle.tsx":"22","/home/aiden/myCode/cen-portal-frontend/src/hooks/useAllBundles.tsx":"23","/home/aiden/myCode/cen-portal-frontend/src/hooks/useAllPartners.tsx":"24"},{"size":887,"mtime":1611370086000,"results":"25","hashOfConfig":"26"},{"size":425,"mtime":1610961710000,"results":"27","hashOfConfig":"26"},{"size":1298,"mtime":1611107514000,"results":"28","hashOfConfig":"26"},{"size":416,"mtime":1611370104000,"results":"29","hashOfConfig":"26"},{"size":692,"mtime":1611035488000,"results":"30","hashOfConfig":"26"},{"size":1618,"mtime":1611068182000,"results":"31","hashOfConfig":"26"},{"size":48,"mtime":1611037644000,"results":"32","hashOfConfig":"26"},{"size":6385,"mtime":1612151561548,"results":"33","hashOfConfig":"26"},{"size":487,"mtime":1611039304000,"results":"34","hashOfConfig":"26"},{"size":2803,"mtime":1611638778000,"results":"35","hashOfConfig":"26"},{"size":447,"mtime":1611726262000,"results":"36","hashOfConfig":"26"},{"size":1014,"mtime":1611638810000,"results":"37","hashOfConfig":"26"},{"size":387,"mtime":1611129832000,"results":"38","hashOfConfig":"26"},{"size":2108,"mtime":1611402194000,"results":"39","hashOfConfig":"26"},{"size":12197,"mtime":1611119648000,"results":"40","hashOfConfig":"26"},{"size":5950,"mtime":1611119686000,"results":"41","hashOfConfig":"26"},{"size":26074,"mtime":1611900516000,"results":"42","hashOfConfig":"26"},{"size":6582,"mtime":1611641372000,"results":"43","hashOfConfig":"26"},{"size":16476,"mtime":1612239754880,"results":"44","hashOfConfig":"26"},{"size":7034,"mtime":1611628228000,"results":"45","hashOfConfig":"26"},{"size":85,"mtime":1611405292000,"results":"46","hashOfConfig":"26"},{"size":6913,"mtime":1611634508000,"results":"47","hashOfConfig":"26"},{"size":764,"mtime":1611627988000,"results":"48","hashOfConfig":"26"},{"size":849,"mtime":1611638802000,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"kf3tmy",{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"52"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"52"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"52"},"/home/aiden/myCode/cen-portal-frontend/src/index.tsx",[],[],"/home/aiden/myCode/cen-portal-frontend/src/reportWebVitals.ts",["112"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/home/aiden/myCode/cen-portal-frontend/src/apollo.ts",[],"/home/aiden/myCode/cen-portal-frontend/src/components/App.tsx",[],"/home/aiden/myCode/cen-portal-frontend/src/styles/global-styles.tsx",[],"/home/aiden/myCode/cen-portal-frontend/src/styles/theme.tsx",[],"/home/aiden/myCode/cen-portal-frontend/src/constants.ts",[],"/home/aiden/myCode/cen-portal-frontend/src/routers/logged-in-router.tsx",["113"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { useMe } from '../hooks/useMe';\r\nimport { Layout, Menu } from 'antd';\r\nimport {\r\n  UploadOutlined,\r\n  UserOutlined,\r\n  VideoCameraOutlined,\r\n} from '@ant-design/icons';\r\nimport { UserRole } from '../__generated__/globalTypes';\r\nimport logo from '../images/CoreEdge_logo.png';\r\nimport { NotFound } from '../pages/404';\r\nimport { Loading } from '../components/loading';\r\nimport { Header } from '../components/header';\r\nimport { Order } from '../pages/cen/orders/orders';\r\nimport { Partner } from '../pages/cen/partners/partners';\r\nimport { Device } from '../pages/cen/devices/devices';\r\nimport { AddBundle } from '../pages/cen/devices/addBundle';\r\nimport { AddOrder } from '../pages/cen/orders/addOrder';\r\nimport { OrderDetail } from '../pages/cen/orders/orderDetail';\r\n\r\nconst { Content, Footer, Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nconst LogoColumn = styled.div`\r\n  height: 64px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  padding: 3px;\r\n  height: 46px;\r\n`;\r\n\r\nconst ContentColumn = styled(Content)`\r\n  margin: 24px 16px 0;\r\n  overflow: initial;\r\n`;\r\n\r\nconst Contents = styled.div`\r\n  padding: 24;\r\n  min-height: calc(100vh - 108px);\r\n  background: #ffffff;\r\n`;\r\n\r\nconst cenRoutes = [\r\n  { path: '/cen/orders', component: <Order /> },\r\n  { path: '/cen/orders/add-order', component: <AddOrder /> },\r\n  { path: '/cen/orders/:id', component: <OrderDetail /> },\r\n  // { path: \"/cen/orders/:id/edit-order\", component: <EditOrder /> },\r\n  { path: '/cen/partners', component: <Partner /> },\r\n  // { path: \"/cen/partners/add-partner\", component: <AddPartner /> },\r\n  // { path: \"/cen/partners/:id\", component: <PartnerDetail /> },\r\n  // { path: \"/cen/partners/:id/edit-partner\", component: <EditPartner /> },\r\n  // { path: \"/cen/partners/:id/add-contact\", component: <AddContact /> },\r\n  { path: '/cen/devices', component: <Device /> },\r\n  { path: '/cen/devices/add-bundle', component: <AddBundle /> },\r\n  // { path: \"/cen/devices/add-part\", component: <AddPart /> },\r\n  // { path: \"/cen/devices/:id\", component: <BundleDetail /> },\r\n  // { path: \"/cen/devices/:id/edit-bundle\", component: <EditBundle /> },\r\n  // { path: \"/cen/devices/:id/add-part\", component: <AddPart /> },\r\n];\r\n\r\nconst commonRoutes = [\r\n  { path: '/', component: 'home' },\r\n  // { path: '/', component: <Home /> },\r\n  // { path: \"/confirm\", component: <ConfirmEmail /> },\r\n  // { path: \"/edit-profile\", component: <EditProfile /> },\r\n];\r\n\r\nconst siderRoutes = [\r\n  {\r\n    path: '/cen',\r\n    component: (\r\n      <Menu\r\n        theme=\"dark\"\r\n        mode=\"inline\"\r\n        defaultSelectedKeys={['1-1']}\r\n        defaultOpenKeys={['sub1']}\r\n      >\r\n        <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"출고요청\">\r\n          <Menu.Item key=\"1-1\">\r\n            <Link to=\"/cen/orders\">출고요청서</Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"1-2\">\r\n            <Link to=\"/cen/partners\">파트너</Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"1-3\">\r\n            <Link to=\"/cen/devices\">제품</Link>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n        <Menu.Item key=\"6\" icon={<VideoCameraOutlined />}>\r\n          nav 2\r\n        </Menu.Item>\r\n        <Menu.Item key=\"7\" icon={<UploadOutlined />}>\r\n          nav 3\r\n        </Menu.Item>\r\n        <Menu.Item key=\"8\" icon={<UserOutlined />}>\r\n          nav 4\r\n        </Menu.Item>\r\n      </Menu>\r\n    ),\r\n  },\r\n  {\r\n    path: '/partner',\r\n    component: (\r\n      <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['4']}>\r\n        <Menu.Item key=\"1\" icon={<UserOutlined />}>\r\n          partner 1\r\n        </Menu.Item>\r\n        <Menu.Item key=\"2\" icon={<VideoCameraOutlined />}>\r\n          nav 2\r\n        </Menu.Item>\r\n        <Menu.Item key=\"3\" icon={<UploadOutlined />}>\r\n          nav 3\r\n        </Menu.Item>\r\n        <Menu.Item key=\"4\" icon={<UserOutlined />}>\r\n          nav 4\r\n        </Menu.Item>\r\n      </Menu>\r\n    ),\r\n  },\r\n];\r\n\r\nexport const LoggedInRouter: React.FC = () => {\r\n  const year = new Date().getFullYear();\r\n  const { data, loading, error } = useMe();\r\n\r\n  return (\r\n    <Router>\r\n      {loading ? (\r\n        <Loading />\r\n      ) : (\r\n        <Layout>\r\n          <Sider\r\n            breakpoint=\"lg\"\r\n            collapsedWidth=\"0\"\r\n            onBreakpoint={(broken) => {\r\n              console.log(broken);\r\n            }}\r\n            onCollapse={(collapsed, type) => {\r\n              console.log(collapsed, type);\r\n            }}\r\n            style={{\r\n              height: 'inherit',\r\n              left: 0,\r\n            }}\r\n          >\r\n            <LogoColumn>\r\n              <Link to=\"/\">\r\n                <Logo src={logo} />\r\n              </Link>\r\n            </LogoColumn>\r\n            {siderRoutes.map((route) => (\r\n              <Route key={route.path} path={route.path}>\r\n                {route.component}\r\n              </Route>\r\n            ))}\r\n          </Sider>\r\n          <Layout>\r\n            {/* <Header style={{ padding: 0, background: '#ffffff' }} /> */}\r\n            <Header />\r\n            <Switch>\r\n              {commonRoutes.map((route) => (\r\n                <Route exact key={route.path} path={route.path}>\r\n                  <ContentColumn>\r\n                    <Contents>{route.component}</Contents>\r\n                  </ContentColumn>\r\n                </Route>\r\n              ))}\r\n              {(data?.me.role === UserRole.CENSE ||\r\n                data?.me.role === UserRole.CEN) &&\r\n                cenRoutes.map((route) => (\r\n                  <Route exact key={route.path} path={route.path}>\r\n                    <ContentColumn>\r\n                      <Contents>{route.component}</Contents>\r\n                    </ContentColumn>\r\n                  </Route>\r\n                ))}\r\n              <Route>\r\n                <NotFound />\r\n              </Route>\r\n            </Switch>\r\n            <Footer\r\n              style={{\r\n                textAlign: 'center',\r\n                fontSize: '10px',\r\n                padding: '5px 0',\r\n              }}\r\n            >\r\n              COPYRIGHT© 2017-{year} COREEDGE NETWORKS INC. ALL RIGHTS RESERVED.\r\n            </Footer>\r\n          </Layout>\r\n        </Layout>\r\n      )}\r\n    </Router>\r\n  );\r\n};\r\n","/home/aiden/myCode/cen-portal-frontend/src/routers/logged-out-router.tsx",["114"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { CreateAccount } from '../pages/create-account';\r\nimport { Login } from '../pages/login';\r\n\r\nexport const LoggedOutRouter = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/create-account\">\r\n          <CreateAccount />\r\n        </Route>\r\n        <Route path=\"/\" exact>\r\n          <Login />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n","/home/aiden/myCode/cen-portal-frontend/src/__generated__/globalTypes.ts",[],"/home/aiden/myCode/cen-portal-frontend/src/components/loading.tsx",["115"],"/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\n/* eslint-disable react/prop-types */\r\nimport React from 'react';\r\nimport { Spin } from 'antd';\r\n\r\nexport const Loading = ({ tip }: any) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        height: '100vh',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n      }}\r\n    >\r\n      <Spin tip={tip ? tip : ''} />\r\n    </div>\r\n  );\r\n};\r\n","/home/aiden/myCode/cen-portal-frontend/src/components/header.tsx",[],"/home/aiden/myCode/cen-portal-frontend/src/hooks/useMe.tsx",["116"],"import { gql, useQuery } from '@apollo/client';\r\nimport { meQuery } from '../__generated__/meQuery';\r\n\r\nexport const ME_QUERY = gql`\r\n  query meQuery {\r\n    me {\r\n      id\r\n      email\r\n      role\r\n      name\r\n      company\r\n      team\r\n      jobTitle\r\n      bio\r\n      verified\r\n      isLocked\r\n    }\r\n  }\r\n`;\r\n\r\nexport const useMe = () => {\r\n  return useQuery<meQuery>(ME_QUERY);\r\n};\r\n","/home/aiden/myCode/cen-portal-frontend/src/pages/404.tsx",[],"/home/aiden/myCode/cen-portal-frontend/src/pages/create-account.tsx",["117","118"],"import { gql, useMutation } from '@apollo/client';\r\nimport React, { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { Form, Input, Button, Select, Spin, notification } from 'antd';\r\nimport {\r\n  UserOutlined,\r\n  LockOutlined,\r\n  TagOutlined,\r\n  SnippetsOutlined,\r\n} from '@ant-design/icons';\r\nimport logo from '../images/CoreEdge_logo.png';\r\nimport {\r\n  createAccountMutation,\r\n  createAccountMutationVariables,\r\n} from '../__generated__/createAccountMutation';\r\nimport { UserRole } from '../__generated__/globalTypes';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: no-repeat url() center center;\r\n  background-color: rgba(21, 20, 13, 0.5);\r\n  background-size: 1920px 640px;\r\n`;\r\n\r\nconst LoginHeader = styled.header`\r\n  padding-left: 5px;\r\n  position: absolute;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100vw;\r\n  height: 60px;\r\n  background-color: rgba(21, 20, 13, 0.5);\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  width: 234px;\r\n  height: 50px;\r\n`;\r\n\r\nconst Box = styled.div`\r\n  margin-left: 100px;\r\n  background-color: white;\r\n  border: 1px solid #e6e6e6;\r\n  text-align: center;\r\n  width: 300px;\r\n`;\r\n\r\nconst Column = styled.div`\r\n  width: 20%;\r\n`;\r\n\r\nconst SwitchBox = styled(Box)`\r\n  padding: 25px 0px;\r\n  margin-top: 15px;\r\n`;\r\n\r\nconst SwitchLink = styled.span`\r\n  color: ${(props) => props.theme.colors.green_1};\r\n  cursor: pointer;\r\n`;\r\n\r\nconst FormBox = styled(Box)`\r\n  padding: 30px;\r\n`;\r\n\r\nconst SButton = styled(Button)`\r\n  width: 100%;\r\n`;\r\n\r\nconst CREATE_ACCOUNT_MUTATION = gql`\r\n  mutation createAccountMutation($createAccountInput: CreateAccountInput!) {\r\n    createAccount(input: $createAccountInput) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CreateAccount: React.FC = () => {\r\n  const [email, setUsername] = useState<string>('');\r\n  const [password, setPassword] = useState('');\r\n  const [passwordConfirm, setPasswordConfirm] = useState('');\r\n  const [role, setRole] = useState<UserRole>(UserRole.Partner);\r\n  const [name, setName] = useState('');\r\n  const [company, setCompany] = useState('');\r\n  const [team, setTeam] = useState('');\r\n  const [jobTitle, setJobTitle] = useState('');\r\n\r\n  const history = useHistory();\r\n\r\n  const onCompleted = (data: createAccountMutation) => {\r\n    const {\r\n      createAccount: { ok, error },\r\n    } = data;\r\n    if (ok) {\r\n      notification.info({\r\n        message: 'Success!',\r\n        description:\r\n          \"회원가입 성공. '① 가입 이메일 인증, ② 관리자 승인'이 완료되어야 로그인이 가능합니다.\",\r\n        placement: 'topRight',\r\n        duration: 0,\r\n      });\r\n      setUsername('');\r\n      setPassword('');\r\n      setPasswordConfirm('');\r\n      setRole(UserRole.Partner);\r\n      setName('');\r\n      setCompany('');\r\n      setTeam('');\r\n      setJobTitle('');\r\n      history.push('/');\r\n    } else if (error) {\r\n      notification.error({\r\n        message: 'Error',\r\n        description: `회원가입 실패. ${error}`,\r\n        placement: 'topRight',\r\n        duration: 0,\r\n      });\r\n    }\r\n  };\r\n\r\n  const [\r\n    createAccountMutation,\r\n    { loading, data: createAccountMutationResult, error },\r\n  ] = useMutation<createAccountMutation, createAccountMutationVariables>(\r\n    CREATE_ACCOUNT_MUTATION,\r\n    {\r\n      onCompleted,\r\n    },\r\n  );\r\n\r\n  if (error) console.log(error);\r\n\r\n  const onFinish = () => {\r\n    if (!loading) {\r\n      createAccountMutation({\r\n        variables: {\r\n          createAccountInput: {\r\n            email,\r\n            password,\r\n            role,\r\n            company,\r\n            name,\r\n            team,\r\n            jobTitle,\r\n          },\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo: unknown) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const onChangeHandler = (event: any) => {\r\n    if (typeof event === 'string') {\r\n      if (event === 'CEN') setRole(UserRole.CEN);\r\n      else if (event === 'Partner') setRole(UserRole.Partner);\r\n      else if (event === 'Client') setRole(UserRole.Client);\r\n    } else {\r\n      const {\r\n        target: { name, value },\r\n      } = event;\r\n      if (name === 'email') {\r\n        setUsername(value);\r\n      } else if (name === 'password') {\r\n        setPassword(value);\r\n      } else if (name === 'passwordConfirm') {\r\n        setPasswordConfirm(value);\r\n      } else if (name === 'name') {\r\n        setName(value);\r\n      } else if (name === 'company') {\r\n        setCompany(value);\r\n      } else if (name === 'team') {\r\n        setTeam(value);\r\n      } else if (name === 'jobTitle') {\r\n        setJobTitle(value);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Sign Up | CEN Portal</title>\r\n      </Helmet>\r\n      <LoginHeader>\r\n        <Logo src={logo} />\r\n      </LoginHeader>\r\n      <Container>\r\n        <Column>\r\n          <FormBox>\r\n            <Form onFinish={onFinish} onFinishFailed={onFinishFailed}>\r\n              <Form.Item\r\n                name=\"role\"\r\n                rules={[\r\n                  { required: true, message: '회원 구분을 선택해주세요' },\r\n                ]}\r\n              >\r\n                <Select\r\n                  placeholder=\"Member Role\"\r\n                  value={role}\r\n                  onChange={onChangeHandler}\r\n                >\r\n                  {/* {Object.keys(UserRole).map((role, index) => (\r\n                    <Select.Option key={index} value={role}>\r\n                      {role}\r\n                    </Select.Option>\r\n                  ))} */}\r\n                  <Select.Option value={UserRole.CEN}>\r\n                    코어엣지네트웍스\r\n                  </Select.Option>\r\n                  <Select.Option value={UserRole.Partner}>파트너</Select.Option>\r\n                  <Select.Option value={UserRole.Client}>고객</Select.Option>\r\n                </Select>\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"email\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    whitespace: true,\r\n                    message: '사용자 계정을 입력하세요',\r\n                  },\r\n                  {\r\n                    pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n                    message: '이메일 형태로 입력해주세요',\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<UserOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Email\"\r\n                  value={email}\r\n                  name=\"email\"\r\n                  type=\"text\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"password\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    whitespace: true,\r\n                    message: '비밀번호를 입력하세요',\r\n                  },\r\n                  { min: 5, message: '비밀번호는 최소 5자리입니다' },\r\n                  { max: 20, message: '비밀번호는 최대 20자리입니다' },\r\n                  {\r\n                    pattern: /^[a-zA-Z0-9_!@#$%^&*()_+-={},./<>?;:'\"]+$/,\r\n                    message: '유효하지 않은 문자를 입력했습니다',\r\n                  },\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  prefix={<LockOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Password\"\r\n                  value={password}\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"passwordConfirm\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: '비밀번호를 재입력 해주세요',\r\n                  },\r\n                  ({ getFieldValue }) => ({\r\n                    validator(rule, value) {\r\n                      if (!value || getFieldValue('password') === value) {\r\n                        return Promise.resolve();\r\n                      }\r\n                      return Promise.reject('비밀번호가 불일치합니다');\r\n                    },\r\n                  }),\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  prefix={<LockOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Confirm Password\"\r\n                  value={passwordConfirm}\r\n                  name=\"passwordConfirm\"\r\n                  type=\"password\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"name\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: '이름을 입력해주세요',\r\n                    whitespace: true,\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<TagOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Name\"\r\n                  value={name}\r\n                  name=\"name\"\r\n                  type=\"text\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"company\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: '회사명을 입력해주세요',\r\n                    whitespace: true,\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={\r\n                    <SnippetsOutlined style={{ color: 'rgba(0,0,0,.25)' }} />\r\n                  }\r\n                  placeholder=\"Company Name\"\r\n                  value={company}\r\n                  name=\"company\"\r\n                  type=\"text\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"team\"\r\n                rules={[\r\n                  {\r\n                    required: false,\r\n                    message: '팀명을 입력해주세요',\r\n                    whitespace: true,\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={\r\n                    <SnippetsOutlined style={{ color: 'rgba(0,0,0,.25)' }} />\r\n                  }\r\n                  placeholder=\"Team Name\"\r\n                  value={team}\r\n                  name=\"team\"\r\n                  type=\"text\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"jobTitle\"\r\n                rules={[\r\n                  {\r\n                    required: false,\r\n                    message: '직함이나 직책을 입력해주세요',\r\n                    whitespace: true,\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={\r\n                    <SnippetsOutlined style={{ color: 'rgba(0,0,0,.25)' }} />\r\n                  }\r\n                  placeholder=\"Job Title\"\r\n                  value={jobTitle}\r\n                  name=\"jobTitle\"\r\n                  type=\"text\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <SButton type=\"primary\" htmlType=\"submit\">\r\n                {!loading ? '회원가입' : <Spin />}\r\n              </SButton>\r\n            </Form>\r\n          </FormBox>\r\n          <SwitchBox>\r\n            이미 사용자 계정이 있으신가요?{' '}\r\n            <SwitchLink>\r\n              <Link to=\"/\">로그인</Link>\r\n            </SwitchLink>\r\n          </SwitchBox>\r\n        </Column>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n","/home/aiden/myCode/cen-portal-frontend/src/pages/login.tsx",["119","120"],"import { gql, useMutation } from '@apollo/client';\r\nimport React, { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Link } from 'react-router-dom';\r\nimport { authTokenVar, isLoggedInVar } from '../apollo';\r\nimport styled from 'styled-components';\r\nimport { Form, Input, Button, Spin, notification } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport { LOCALSTORAGE_TOKEN } from '../constants';\r\nimport logo from '../images/CoreEdge_logo.png';\r\nimport {\r\n  loginMutation,\r\n  loginMutationVariables,\r\n} from '../__generated__/loginMutation';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: no-repeat url() center center;\r\n  background-color: rgba(21, 20, 13, 0.5);\r\n  background-size: 1920px 640px;\r\n`;\r\n\r\nconst LoginHeader = styled.header`\r\n  padding-left: 5px;\r\n  position: absolute;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100vw;\r\n  height: 60px;\r\n  background-color: rgba(21, 20, 13, 0.5);\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  width: 234px;\r\n  height: 50px;\r\n`;\r\n\r\nconst Box = styled.div`\r\n  margin-left: 100px;\r\n  background-color: white;\r\n  border: 1px solid #e6e6e6;\r\n  text-align: center;\r\n  width: 300px;\r\n`;\r\n\r\nconst Column = styled.div`\r\n  width: 20%;\r\n`;\r\n\r\nconst SwitchBox = styled(Box)`\r\n  padding: 25px 0px;\r\n  margin-top: 15px;\r\n`;\r\n\r\nconst SwitchLink = styled.span`\r\n  color: ${(props) => props.theme.colors.green_1};\r\n  cursor: pointer;\r\n`;\r\n\r\nconst FormBox = styled(Box)`\r\n  padding: 30px;\r\n`;\r\n\r\nconst SButton = styled(Button)`\r\n  width: 100%;\r\n`;\r\n\r\nconst LOGIN_MUTATION = gql`\r\n  mutation loginMutation($loginInput: LoginInput!) {\r\n    login(input: $loginInput) {\r\n      ok\r\n      token\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Login: React.FC = () => {\r\n  const [email, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const onCompleted = (data: loginMutation) => {\r\n    const {\r\n      login: { ok, token, error },\r\n    } = data;\r\n    if (ok && token) {\r\n      localStorage.setItem(LOCALSTORAGE_TOKEN, token);\r\n      authTokenVar(token);\r\n      isLoggedInVar(true);\r\n      notification.success({\r\n        message: 'Success!',\r\n        description: '로그인 성공',\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n    } else if (error) {\r\n      notification.error({\r\n        message: 'Error',\r\n        description: `로그인 실패. ${error}`,\r\n        placement: 'topRight',\r\n        duration: 0,\r\n      });\r\n    }\r\n  };\r\n\r\n  const [loginMutation, { data, loading, error }] = useMutation<\r\n    loginMutation,\r\n    loginMutationVariables\r\n  >(LOGIN_MUTATION, {\r\n    onCompleted,\r\n  });\r\n\r\n  if (error) console.log(error);\r\n\r\n  const onFinish = () => {\r\n    if (!loading) {\r\n      loginMutation({\r\n        variables: {\r\n          loginInput: {\r\n            email,\r\n            password,\r\n          },\r\n        },\r\n      });\r\n      setUsername('');\r\n      setPassword('');\r\n    }\r\n  };\r\n\r\n  const onChangeHandler = (event: any) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n    if (name === 'email') {\r\n      setUsername(value);\r\n    }\r\n    if (name === 'password') {\r\n      setPassword(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Log in | CEN Portal</title>\r\n      </Helmet>\r\n      <LoginHeader>\r\n        <Logo src={logo} />\r\n      </LoginHeader>\r\n      <Container>\r\n        <Column>\r\n          <FormBox>\r\n            <Form onFinish={onFinish}>\r\n              <Form.Item\r\n                name=\"email\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    whitespace: true,\r\n                    message: '사용자 계정을 입력하세요',\r\n                  },\r\n                  {\r\n                    pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n                    message: '이메일 형태로 입력해주세요',\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<UserOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Email\"\r\n                  value={email}\r\n                  name=\"email\"\r\n                  type=\"text\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"password\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    whitespace: true,\r\n                    message: '비밀번호를 입력하세요',\r\n                  },\r\n                  { min: 5, message: '비밀번호는 최소 5자리입니다' },\r\n                  { max: 20, message: '비밀번호는 최대 20자리입니다' },\r\n                  {\r\n                    pattern: /^[a-zA-Z0-9_!@#$%^&*()_+-={},./<>?;:'\"]+$/,\r\n                    message: '유효하지 않은 문자를 입력했습니다',\r\n                  },\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  prefix={<LockOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Password\"\r\n                  value={password}\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <SButton type=\"primary\" htmlType=\"submit\">\r\n                {!loading ? '로그인' : <Spin />}\r\n              </SButton>\r\n            </Form>\r\n          </FormBox>\r\n          <SwitchBox>\r\n            회원가입이 필요하신가요?{' '}\r\n            <SwitchLink>\r\n              <Link to=\"/create-account\">회원가입</Link>\r\n            </SwitchLink>\r\n          </SwitchBox>\r\n        </Column>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n","/home/aiden/myCode/cen-portal-frontend/src/pages/cen/orders/addOrder.tsx",["121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141"],"import React, { useState, useEffect } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { gql, useMutation } from '@apollo/client';\r\nimport {\r\n  Popconfirm,\r\n  Form,\r\n  Button,\r\n  notification,\r\n  Input,\r\n  InputNumber,\r\n  Space,\r\n  Select,\r\n  Tooltip,\r\n  Descriptions,\r\n  Badge,\r\n  Checkbox,\r\n  DatePicker,\r\n  Divider,\r\n} from 'antd';\r\nimport {\r\n  FolderOpenOutlined,\r\n  MinusCircleOutlined,\r\n  PlusOutlined,\r\n  QuestionCircleOutlined,\r\n} from '@ant-design/icons';\r\nimport {\r\n  createOrderMutation,\r\n  createOrderMutationVariables,\r\n} from '../../../__generated__/createOrderMutation';\r\nimport {\r\n  DeliveryMethod,\r\n  DeliveryType,\r\n  OrderClassification,\r\n  OrderStatus,\r\n} from '../../../__generated__/globalTypes';\r\nimport { useMe } from '../../../hooks/useMe';\r\nimport { useAllBundles } from '../../../hooks/useAllBundles';\r\nimport { useAllPartners } from '../../../hooks/useAllPartners';\r\nimport { Loading } from '../../../components/loading';\r\n\r\nconst { Option } = Select;\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst TitleBar = styled.div`\r\n  font-size: 25px;\r\n  font-weight: 700;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst FormColumn = styled.div`\r\n  margin-top: 40px;\r\n`;\r\n\r\nconst ItemList = styled.div`\r\n  background-color: #ffffff;\r\n  padding: 20px;\r\n`;\r\n\r\nconst ButtonColumn = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 10px;\r\n`;\r\n\r\nconst CREATE_ORDER_MUTATION = gql`\r\n  mutation createOrderMutation($input: CreateOrderInput!) {\r\n    createOrder(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\ninterface IPartner {\r\n  id: number;\r\n  name: string;\r\n  address: string;\r\n  zip: string | null;\r\n  tel: string | null;\r\n  contactsCount: number;\r\n  contacts: IContact[] | null;\r\n}\r\n\r\ninterface IContact {\r\n  id: number;\r\n  name: string;\r\n  jobTitle: string | null;\r\n  tel: string;\r\n}\r\n\r\ninterface IPart {\r\n  id: number;\r\n  name: string;\r\n  num: number | null;\r\n}\r\n\r\ninterface IBundle {\r\n  id: number;\r\n  name: string;\r\n  series: string | null;\r\n  parts: IPart[] | null;\r\n}\r\n\r\n// interface IAllBundlesOutput {\r\n//   ok: boolean;\r\n//   error: string | null;\r\n//   totalPages: number | null;\r\n//   totalResults: number | null;\r\n//   bundles: IBundle[] | null;\r\n// }\r\n\r\nexport const AddOrder: React.FC = () => {\r\n  const { data: meData } = useMe();\r\n  const { data: bundleData } = useAllBundles();\r\n  const { data: partnerData } = useAllPartners();\r\n  const history = useHistory();\r\n  const [form] = Form.useForm();\r\n  const [partners, setPartners] = useState<IPartner[]>([]);\r\n  const [newDestination, setNewDestination] = useState<string>('');\r\n  const [destItem, setDestItem] = useState<string[]>([]);\r\n  const [newAddress, setNewAddress] = useState<string>('');\r\n  const [addrItem, setAddrItem] = useState<string[]>([]);\r\n  const [newReceiver, setNewReceiver] = useState<string>('');\r\n  const [recvItem, setRecvItem] = useState<string[]>([]);\r\n  const [newTel, setNewTel] = useState<string>('');\r\n  const [telItem, setTelItem] = useState<string[]>([]);\r\n  const [telItemTemp, setTelItemTemp] = useState<string[]>([]);\r\n  const [bundles, setBundles] = useState<IBundle[]>([]);\r\n  const [deliveryDate, setDeliveryDate] = useState<string>();\r\n  const [demoReturnDate, setDemoReturnDate] = useState<string>();\r\n  const [orderSheet, setOrderSheet] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if (meData) {\r\n      console.log(meData);\r\n    }\r\n  }, [meData]);\r\n\r\n  useEffect(() => {\r\n    const partnersName: string[] = [];\r\n    if (partnerData) {\r\n      console.log(partnerData);\r\n      const allPartners = partnerData.allPartners.partners as IPartner[];\r\n      setPartners(allPartners);\r\n      allPartners?.map((partner) => partnersName.push(partner.name));\r\n      setDestItem(partnersName);\r\n    }\r\n  }, [partnerData]);\r\n\r\n  useEffect(() => {\r\n    if (bundleData) {\r\n      const allBundles = bundleData.allBundles.bundles as IBundle[];\r\n      setBundles(allBundles);\r\n    }\r\n  }, [bundleData]);\r\n\r\n  const onCompleted = (data: createOrderMutation) => {\r\n    const {\r\n      createOrder: { ok, error },\r\n    } = data;\r\n    if (ok) {\r\n      notification.success({\r\n        message: 'Success!',\r\n        description: '번들 등록 성공',\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n    } else if (error) {\r\n      notification.error({\r\n        message: 'Error',\r\n        description: `번들 등록 실패. ${error}`,\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  const [\r\n    createOrderMutation,\r\n    { data: createOrderData, loading: createOrderLoading },\r\n  ] = useMutation<createOrderMutation, createOrderMutationVariables>(\r\n    CREATE_ORDER_MUTATION,\r\n    {\r\n      onCompleted,\r\n    },\r\n  );\r\n\r\n  if (createOrderLoading) {\r\n    return (\r\n      <Loading\r\n        tip={\r\n          '등록중입니다. 잠시만 기다려주세요... 제품 수량이 많을수록 많은 시간이 소요됩니다.'\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  if (createOrderData && !createOrderLoading) {\r\n    history.push('/cen/orders');\r\n  }\r\n\r\n  const onFinish = (values: any) => {\r\n    console.log('Received values of form:', values);\r\n    createOrderMutation({\r\n      variables: {\r\n        input: {\r\n          address: values.address,\r\n          classification: values.classification,\r\n          contact: values.contact,\r\n          deliveryDate,\r\n          deliveryMethod: values.deliveryMethod,\r\n          deliveryType: values.deliveryType,\r\n          demoReturnDate,\r\n          destination: values.destination,\r\n          items: values.items,\r\n          orderSheet,\r\n          partnerId: values.partnerId,\r\n          projectName: values.projectName,\r\n          receiver: values.receiver,\r\n          remark: values.remark,\r\n          salesPerson: values.salesPerson\r\n            ? values.salesPerson\r\n            : meData?.me.name,\r\n          status: OrderStatus.Created,\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  const onPartnerIdChange = (_: string, option?: any) => {\r\n    const partner = partners[option.key];\r\n    const recvTemp: string[] = [];\r\n    const telTemp: string[] = [];\r\n    setRecvItem([]);\r\n    setTelItem([]);\r\n    setAddrItem([partner.address]);\r\n    if (!partner.contacts) return;\r\n    partner.contacts.map((contact) => {\r\n      recvTemp.push(contact.name + ' ' + contact.jobTitle);\r\n      telTemp.push(contact.tel);\r\n    });\r\n    setRecvItem(recvTemp);\r\n    setTelItemTemp(telTemp);\r\n  };\r\n\r\n  const onReceiverIdChange = (_: string, option?: any) => {\r\n    const telTemp: string = telItemTemp[option.key];\r\n    setTelItem([telTemp]);\r\n  };\r\n\r\n  const onDestinationChange = (event: any) => {\r\n    setNewDestination(event.target.value);\r\n  };\r\n\r\n  const addDestination = () => {\r\n    setDestItem([...destItem, newDestination]);\r\n    setNewDestination('');\r\n  };\r\n\r\n  const onAddressChange = (event: any) => {\r\n    setNewAddress(event.target.value);\r\n  };\r\n\r\n  const addAddress = () => {\r\n    setAddrItem([...addrItem, newAddress]);\r\n    setNewAddress('');\r\n  };\r\n\r\n  const onReceiverChange = (event: any) => {\r\n    setNewReceiver(event.target.value);\r\n  };\r\n\r\n  const addReceiver = () => {\r\n    setRecvItem([...recvItem, newReceiver]);\r\n    setNewReceiver('');\r\n  };\r\n\r\n  const onTelChange = (event: any) => {\r\n    setNewTel(event.target.value);\r\n  };\r\n\r\n  const addTel = () => {\r\n    setTelItem([...telItem, newTel]);\r\n    setNewTel('');\r\n  };\r\n\r\n  const onDateChange = (_: any, dateString: string) => {\r\n    setDeliveryDate(dateString);\r\n  };\r\n\r\n  const onDemoReturnDateChange = (_: any, dateString: string) => {\r\n    setDemoReturnDate(dateString);\r\n  };\r\n\r\n  const onOrderSheetChange = (event: any) => {\r\n    const {\r\n      target: { checked },\r\n    } = event;\r\n    setOrderSheet(checked);\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Helmet>\r\n        <title>Add Orders | CEN Portal</title>\r\n      </Helmet>\r\n      <TitleBar>\r\n        <FolderOpenOutlined />\r\n        {' 출고요청서 등록'}\r\n      </TitleBar>\r\n      <FormColumn>\r\n        <Form form={form} onFinish={onFinish} autoComplete=\"off\">\r\n          <Descriptions\r\n            bordered\r\n            size=\"small\"\r\n            labelStyle={{ backgroundColor: '#F0F2F5' }}\r\n          >\r\n            <Descriptions.Item label=\"작성일자\">\r\n              <Form.Item name=\"writeDate\">\r\n                <Input\r\n                  defaultValue={new Date().toLocaleDateString()}\r\n                  disabled\r\n                />\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"담당영업\">\r\n              <Form.Item name=\"salesPerson\">\r\n                <Input defaultValue={meData?.me.name} value={meData?.me.name} />\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"작성자\">\r\n              <Form.Item name=\"writer\">\r\n                <Input defaultValue={meData?.me.name} disabled />\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"프로젝트명\" span={2}>\r\n              <Form.Item name=\"projectName\">\r\n                <Input />\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"상태\">\r\n              <Form.Item name=\"status\">\r\n                <Input\r\n                  prefix={<Badge status=\"processing\" text=\"출고요청\" />}\r\n                  value={OrderStatus.Created}\r\n                  disabled\r\n                />\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"구분\">\r\n              <Form.Item name=\"classification\">\r\n                <Select>\r\n                  <Option value={OrderClassification.Sale}>판매</Option>\r\n                  <Option value={OrderClassification.Demo}>Demo</Option>\r\n                  <Option value={OrderClassification.RMA}>RMA</Option>\r\n                  <Option value={OrderClassification.DoA}>DoA</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"Demo 회수일자\">\r\n              <Form.Item name=\"demoReturnDate\">\r\n                <Space direction=\"vertical\">\r\n                  <DatePicker onChange={onDemoReturnDateChange} />\r\n                </Space>\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"발주서 접수\">\r\n              <Form.Item name=\"orderSheet\">\r\n                <Checkbox onChange={onOrderSheetChange} checked={orderSheet} />\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item\r\n              label={\r\n                <span>\r\n                  {'거래처 '}\r\n                  <Tooltip title=\"등록한 파트너만 선택 가능\">\r\n                    <QuestionCircleOutlined />\r\n                  </Tooltip>\r\n                </span>\r\n              }\r\n            >\r\n              <Form.Item name=\"partnerId\">\r\n                <Select\r\n                  onChange={onPartnerIdChange}\r\n                  placeholder=\"거래처 선택\"\r\n                  showSearch\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input: string, option: any): any =>\r\n                    option.children.indexOf(input) >= 0\r\n                  }\r\n                  filterSort={(optionA, optionB) =>\r\n                    optionA.value.localeCompare(optionB.value)\r\n                  }\r\n                >\r\n                  {partners.map((partner: any, index: number) => (\r\n                    <Option key={index} value={partner.id}>\r\n                      {partner?.name}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item\r\n              label={\r\n                <span>\r\n                  {'납품처 '}\r\n                  <Tooltip title=\"리스트에 없는 경우, 직접입력\">\r\n                    <QuestionCircleOutlined />\r\n                  </Tooltip>\r\n                </span>\r\n              }\r\n            >\r\n              <Form.Item name=\"destination\">\r\n                <Select\r\n                  placeholder=\"납품처 입력\"\r\n                  dropdownRender={(menu) => (\r\n                    <div>\r\n                      {menu}\r\n                      <Divider style={{ margin: '4px 0' }} />\r\n                      <div\r\n                        style={{\r\n                          display: 'flex',\r\n                          flexWrap: 'nowrap',\r\n                          padding: 8,\r\n                        }}\r\n                      >\r\n                        <Input\r\n                          style={{ flex: 'auto' }}\r\n                          value={newDestination}\r\n                          onChange={onDestinationChange}\r\n                        />\r\n                        <a\r\n                          style={{\r\n                            flex: 'none',\r\n                            padding: '8px',\r\n                            display: 'block',\r\n                            cursor: 'pointer',\r\n                          }}\r\n                          onClick={addDestination}\r\n                        >\r\n                          <PlusOutlined /> Add item\r\n                        </a>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  showSearch\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input: string, option: any): any =>\r\n                    option.children.indexOf(input) >= 0\r\n                  }\r\n                  filterSort={(optionA, optionB) =>\r\n                    optionA.value.localeCompare(optionB.value)\r\n                  }\r\n                >\r\n                  {destItem.map((item) => (\r\n                    <Option key={item} value={item}>\r\n                      {item}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"납품일\">\r\n              <Form.Item name=\"deliveryDate\">\r\n                <Space direction=\"vertical\">\r\n                  <DatePicker onChange={onDateChange} />\r\n                </Space>\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"출고형태\" span={2}>\r\n              <Form.Item name=\"deliveryType\">\r\n                <Select>\r\n                  <Option value={DeliveryType.Total}>전체출고</Option>\r\n                  <Option value={DeliveryType.Partial}>부분출고</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"배송방법\" span={2}>\r\n              <Form.Item name=\"deliveryMethod\">\r\n                <Select>\r\n                  <Option value={DeliveryMethod.Parcel}>택배</Option>\r\n                  <Option value={DeliveryMethod.Quick}>퀵</Option>\r\n                  <Option value={DeliveryMethod.Cargo}>화물</Option>\r\n                  <Option value={DeliveryMethod.Directly}>직접배송</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item\r\n              label={\r\n                <span>\r\n                  {'수령자 '}\r\n                  <Tooltip title=\"등록한 연락처 입력 혹은 직접입력\">\r\n                    <QuestionCircleOutlined />\r\n                  </Tooltip>\r\n                </span>\r\n              }\r\n              span={2}\r\n            >\r\n              <Form.Item name=\"receiver\">\r\n                <Select\r\n                  onChange={onReceiverIdChange}\r\n                  placeholder=\"수령자 입력\"\r\n                  dropdownRender={(menu) => (\r\n                    <div>\r\n                      {menu}\r\n                      <Divider style={{ margin: '4px 0' }} />\r\n                      <div\r\n                        style={{\r\n                          display: 'flex',\r\n                          flexWrap: 'nowrap',\r\n                          padding: 8,\r\n                        }}\r\n                      >\r\n                        <Input\r\n                          style={{ flex: 'auto' }}\r\n                          value={newReceiver}\r\n                          onChange={onReceiverChange}\r\n                        />\r\n                        <a\r\n                          style={{\r\n                            flex: 'none',\r\n                            padding: '8px',\r\n                            display: 'block',\r\n                            cursor: 'pointer',\r\n                          }}\r\n                          onClick={addReceiver}\r\n                        >\r\n                          <PlusOutlined /> Add item\r\n                        </a>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  showSearch\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input: string, option: any): any =>\r\n                    option.children.indexOf(input) >= 0\r\n                  }\r\n                  filterSort={(optionA, optionB) =>\r\n                    optionA.value.localeCompare(optionB.value)\r\n                  }\r\n                >\r\n                  {recvItem.map((item, index) => (\r\n                    <Option key={index} value={item}>\r\n                      {item}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"연락처\">\r\n              <Form.Item name=\"contact\">\r\n                <Select\r\n                  placeholder=\"연락처 입력\"\r\n                  dropdownRender={(menu) => (\r\n                    <div>\r\n                      {menu}\r\n                      <Divider style={{ margin: '4px 0' }} />\r\n                      <div\r\n                        style={{\r\n                          display: 'flex',\r\n                          flexWrap: 'nowrap',\r\n                          padding: 8,\r\n                        }}\r\n                      >\r\n                        <Input\r\n                          style={{ flex: 'auto' }}\r\n                          value={newTel}\r\n                          onChange={onTelChange}\r\n                        />\r\n                        <a\r\n                          style={{\r\n                            flex: 'none',\r\n                            padding: '8px',\r\n                            display: 'block',\r\n                            cursor: 'pointer',\r\n                          }}\r\n                          onClick={addTel}\r\n                        >\r\n                          <PlusOutlined /> Add item\r\n                        </a>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  showSearch\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input: string, option: any): any =>\r\n                    option.children.indexOf(input) >= 0\r\n                  }\r\n                  filterSort={(optionA, optionB) =>\r\n                    optionA.value.localeCompare(optionB.value)\r\n                  }\r\n                >\r\n                  {telItem.map((item) => (\r\n                    <Option key={item} value={item}>\r\n                      {item}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"납품장소\" span={3}>\r\n              <Form.Item name=\"address\">\r\n                <Select\r\n                  placeholder=\"납품장소 입력\"\r\n                  dropdownRender={(menu) => (\r\n                    <div>\r\n                      {menu}\r\n                      <Divider style={{ margin: '4px 0' }} />\r\n                      <div\r\n                        style={{\r\n                          display: 'flex',\r\n                          flexWrap: 'nowrap',\r\n                          padding: 8,\r\n                        }}\r\n                      >\r\n                        <Input\r\n                          style={{ flex: 'auto' }}\r\n                          value={newAddress}\r\n                          onChange={onAddressChange}\r\n                        />\r\n                        <a\r\n                          style={{\r\n                            flex: 'none',\r\n                            padding: '8px',\r\n                            display: 'block',\r\n                            cursor: 'pointer',\r\n                          }}\r\n                          onClick={addAddress}\r\n                        >\r\n                          <PlusOutlined /> Add item\r\n                        </a>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  showSearch\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input: string, option: any): any =>\r\n                    option.children.indexOf(input) >= 0\r\n                  }\r\n                  filterSort={(optionA, optionB) =>\r\n                    optionA.value.localeCompare(optionB.value)\r\n                  }\r\n                >\r\n                  {addrItem.map((item) => (\r\n                    <Option key={item} value={item}>\r\n                      {item}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"요청사항\" span={3}>\r\n              <Form.Item name=\"remark\">\r\n                <Input.TextArea />\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n          </Descriptions>\r\n          <Descriptions layout=\"vertical\" bordered size=\"small\">\r\n            <Descriptions.Item\r\n              label={\r\n                <span>\r\n                  {'출고제품 '}\r\n                  <Tooltip title=\"등록한 제품만 선택 가능. 'Add Bundles' 버튼을 통해 항목추가 가능.\">\r\n                    <QuestionCircleOutlined />\r\n                  </Tooltip>\r\n                </span>\r\n              }\r\n              style={{ backgroundColor: '#F0F2F5' }}\r\n            >\r\n              <ItemList>\r\n                <Form.List name=\"items\">\r\n                  {(fields, { add, remove }) => (\r\n                    <>\r\n                      {fields.map((field) => (\r\n                        <Space key={field.key} align=\"baseline\">\r\n                          <Form.Item\r\n                            noStyle\r\n                            shouldUpdate={(prevValues, curValues) =>\r\n                              prevValues.area !== curValues.area ||\r\n                              prevValues.items !== curValues.items\r\n                            }\r\n                          >\r\n                            {() => (\r\n                              <Form.Item\r\n                                {...field}\r\n                                label=\"Bundle\"\r\n                                name={[field.name, 'bundleId']}\r\n                                fieldKey={[field.fieldKey, 'bundleId']}\r\n                                rules={[\r\n                                  {\r\n                                    required: true,\r\n                                    message: '번들 이름을 선택해주세요.',\r\n                                  },\r\n                                ]}\r\n                                style={{ width: 280 }}\r\n                              >\r\n                                <Select>\r\n                                  {bundles.map((item) => (\r\n                                    <Option key={item.id} value={item.id}>\r\n                                      {item.name}\r\n                                    </Option>\r\n                                  ))}\r\n                                </Select>\r\n                              </Form.Item>\r\n                            )}\r\n                          </Form.Item>\r\n                          <Form.Item\r\n                            {...field}\r\n                            label=\"Num\"\r\n                            name={[field.name, 'num']}\r\n                            fieldKey={[field.fieldKey, 'num']}\r\n                            rules={[\r\n                              {\r\n                                required: true,\r\n                                message: '수량 입력 필요',\r\n                              },\r\n                            ]}\r\n                            style={{ width: 150 }}\r\n                          >\r\n                            <InputNumber />\r\n                          </Form.Item>\r\n                          <MinusCircleOutlined\r\n                            onClick={() => remove(field.name)}\r\n                          />\r\n                        </Space>\r\n                      ))}\r\n                      <Form.Item>\r\n                        <Button\r\n                          type=\"dashed\"\r\n                          onClick={() => add()}\r\n                          block\r\n                          icon={<PlusOutlined />}\r\n                        >\r\n                          Add Bundles\r\n                        </Button>\r\n                      </Form.Item>\r\n                    </>\r\n                  )}\r\n                </Form.List>\r\n              </ItemList>\r\n            </Descriptions.Item>\r\n          </Descriptions>\r\n          <Form.Item>\r\n            <ButtonColumn>\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                style={{ marginRight: 8 }}\r\n              >\r\n                Submit\r\n              </Button>\r\n              <Button type=\"primary\">\r\n                <Popconfirm\r\n                  title=\"정말 취소 하시겠습니까?\"\r\n                  onConfirm={() => history.goBack()}\r\n                >\r\n                  Cancel\r\n                </Popconfirm>\r\n              </Button>\r\n            </ButtonColumn>\r\n          </Form.Item>\r\n        </Form>\r\n      </FormColumn>\r\n    </Wrapper>\r\n  );\r\n};\r\n","/home/aiden/myCode/cen-portal-frontend/src/pages/cen/orders/orderDetail.tsx",["142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158"],"import React, { useState, useEffect, SetStateAction } from 'react';\r\nimport { ColumnsType } from 'antd/es/table';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { gql, useMutation, useQuery } from '@apollo/client';\r\nimport {\r\n  Table,\r\n  Popconfirm,\r\n  Form,\r\n  Typography,\r\n  Button,\r\n  notification,\r\n  Descriptions,\r\n  Badge,\r\n} from 'antd';\r\nimport {\r\n  getOrderQuery,\r\n  getOrderQueryVariables,\r\n  getOrderQuery_getOrder_order,\r\n  getOrderQuery_getOrder_order_partner,\r\n} from '../../../__generated__/getOrderQuery';\r\nimport {\r\n  deleteOrderMutation,\r\n  deleteOrderMutationVariables,\r\n} from '../../../__generated__/deleteOrderMutation';\r\nimport { FolderOpenOutlined } from '@ant-design/icons';\r\nimport { Loading } from '../../../components/loading';\r\nimport { AnyNaptrRecord } from 'dns';\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst TitleBar = styled.div`\r\n  font-size: 25px;\r\n  font-weight: 700;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst MenuBar = styled.span`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 8px;\r\n`;\r\n\r\nconst SButton = styled(Button)`\r\n  margin-left: 8px;\r\n`;\r\n\r\nconst GET_ORDER_QUERY = gql`\r\n  query getOrderQuery($input: GetOrderInput!) {\r\n    getOrder(input: $input) {\r\n      ok\r\n      error\r\n      order {\r\n        id\r\n        createAt\r\n        updateAt\r\n        writer {\r\n          name\r\n        }\r\n        salesPerson\r\n        projectName\r\n        classification\r\n        demoReturnDate\r\n        orderSheet\r\n        partner {\r\n          name\r\n        }\r\n        destination\r\n        receiver\r\n        contact\r\n        address\r\n        deliveryDate\r\n        deliveryType\r\n        deliveryMethod\r\n        remark\r\n        items {\r\n          bundle {\r\n            name\r\n          }\r\n          num\r\n        }\r\n        status\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const OrderDetail: React.FC = () => {\r\n  const originData: any[] = [];\r\n  const history = useHistory();\r\n  const orderId: any = useParams();\r\n  const [order, setOrder] = useState<getOrderQuery_getOrder_order>();\r\n  const [data, setData] = useState<any[]>([]);\r\n\r\n  const { data: orderData, loading } = useQuery<\r\n    getOrderQuery,\r\n    getOrderQueryVariables\r\n  >(GET_ORDER_QUERY, {\r\n    variables: {\r\n      input: {\r\n        id: +orderId.id,\r\n      },\r\n    },\r\n  });\r\n\r\n  const columns: ColumnsType<any> = [\r\n    {\r\n      title: 'No',\r\n      dataIndex: 'no',\r\n      width: '10%',\r\n      align: 'center',\r\n    },\r\n    {\r\n      title: '제품명',\r\n      dataIndex: 'name',\r\n      width: '70%',\r\n      align: 'center',\r\n    },\r\n    {\r\n      title: '수량',\r\n      dataIndex: 'num',\r\n      width: '20%',\r\n      align: 'center',\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (orderData && !loading) {\r\n      const orderInfo: any = orderData.getOrder.order;\r\n      setOrder(orderInfo);\r\n      for (let i = 0; i < orderInfo.items.length; i++) {\r\n        originData.push({\r\n          key: i + 1,\r\n          no: i + 1,\r\n          name: orderInfo.items[i].bundle.name,\r\n          num: orderInfo.items[i].num,\r\n        });\r\n      }\r\n      setData(originData);\r\n    }\r\n  }, [orderData]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Helmet>\r\n        <title>Orders | CEN Portal</title>\r\n      </Helmet>\r\n      <TitleBar>\r\n        <FolderOpenOutlined />\r\n        {` 출고요청서`}\r\n      </TitleBar>\r\n      <MenuBar>\r\n        <SButton type=\"primary\" size=\"small\" onClick={() => history.goBack()}>\r\n          Back\r\n        </SButton>\r\n      </MenuBar>\r\n      {loading ? (\r\n        <Loading />\r\n      ) : (\r\n        <>\r\n          <Descriptions\r\n            title={`${order?.projectName}`}\r\n            bordered\r\n            size=\"small\"\r\n            labelStyle={{ backgroundColor: '#F0F2F5' }}\r\n          >\r\n            <Descriptions.Item label=\"작성일\">\r\n              {new Date(order?.createAt).toLocaleDateString()}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"담당영업\">\r\n              {order?.salesPerson}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"작성자\">\r\n              {order?.writer?.name}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"프로젝트명\" span={2}>\r\n              {order?.projectName}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"상태\">\r\n              <Badge status=\"processing\" text=\"Create\" />\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"구분\">\r\n              {order?.classification + ''}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"Demo 회수일자\">\r\n              {order?.demoReturnDate}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"발주서 접수\">\r\n              {order?.orderSheet === true ? 'O' : 'X'}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"거래처\">\r\n              {order?.partner?.name}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"납품처\">\r\n              {order?.destination}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"납품일\">\r\n              {new Date(order?.deliveryDate).toLocaleDateString()}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"출고형태\" span={2}>\r\n              {order?.deliveryType + ''}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"배송방법\">\r\n              {order?.deliveryMethod + ''}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"수령자\" span={2}>\r\n              {order?.receiver}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"연락처\">\r\n              {order?.contact}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"납품장소\" span={3}>\r\n              {order?.address}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"요청사항\" span={3}>\r\n              {order?.remark}\r\n            </Descriptions.Item>\r\n          </Descriptions>\r\n          <Descriptions layout=\"vertical\" bordered size=\"small\">\r\n            <Descriptions.Item\r\n              label=\"출고제품\"\r\n              style={{ backgroundColor: '#F0F2F5' }}\r\n            >\r\n              <Table<any>\r\n                columns={columns}\r\n                dataSource={data}\r\n                pagination={false}\r\n                size=\"small\"\r\n              />\r\n            </Descriptions.Item>\r\n          </Descriptions>\r\n        </>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\n","/home/aiden/myCode/cen-portal-frontend/src/pages/cen/orders/orders.tsx",["159","160","161","162","163","164","165"],"/home/aiden/myCode/cen-portal-frontend/src/pages/cen/devices/devices.tsx",["166","167","168","169","170","171","172","173","174","175","176","177","178"],"/* eslint-disable react/prop-types */\r\n/* eslint-disable react/display-name */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { ColumnsType } from 'antd/es/table';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { gql, useMutation } from '@apollo/client';\r\nimport {\r\n  Table,\r\n  Popconfirm,\r\n  Form,\r\n  Typography,\r\n  Button,\r\n  notification,\r\n} from 'antd';\r\nimport {\r\n  deleteBundleMutation,\r\n  deleteBundleMutationVariables,\r\n} from '../../../__generated__/deleteBundleMutation';\r\nimport { FolderOpenOutlined } from '@ant-design/icons';\r\nimport { Loading } from '../../../components/loading';\r\nimport { useAllBundles } from '../../../hooks/useAllBundles';\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst TitleBar = styled.div`\r\n  font-size: 25px;\r\n  font-weight: 700;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst MenuBar = styled.span`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 8px;\r\n`;\r\n\r\nconst SButton = styled(Button)`\r\n  margin-left: 8px;\r\n`;\r\n\r\nconst DELETE_BUNDLE_MUTATION = gql`\r\n  mutation deleteBundleMutation($input: DeleteBundleInput!) {\r\n    deleteBundle(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\ninterface Item {\r\n  key: string;\r\n  no: number;\r\n  series: string;\r\n  name: string;\r\n}\r\n\r\nexport const Device = () => {\r\n  const originData: Item[] = [];\r\n  const [form] = Form.useForm();\r\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\r\n  const [data, setData] = useState<Item[]>([]);\r\n  const [page, setPage] = useState(1);\r\n  const [take, setTake] = useState(10);\r\n  const [total, setTotal] = useState(0);\r\n  const { data: bundleData, loading, refetch: reGetData } = useAllBundles(\r\n    page,\r\n    take,\r\n  );\r\n\r\n  const onCompleted = (data: deleteBundleMutation) => {\r\n    const {\r\n      deleteBundle: { ok, error },\r\n    } = data;\r\n    if (ok) {\r\n      notification.success({\r\n        message: 'Success!',\r\n        description: '삭제 성공',\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n      setSelectedRowKeys([]);\r\n    } else if (error) {\r\n      notification.error({\r\n        message: 'Error',\r\n        description: `삭제 실패. ${error}`,\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  const [deleteBundleMutation, { data: deleteBundleData }] = useMutation<\r\n    deleteBundleMutation,\r\n    deleteBundleMutationVariables\r\n  >(DELETE_BUNDLE_MUTATION, {\r\n    onCompleted,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (bundleData && !loading) {\r\n      setData([]);\r\n      const bundles: any = bundleData?.allBundles.bundles;\r\n      const getTotal: any = bundleData?.allBundles.totalResults;\r\n      for (let i = 0; i < bundles?.length; i++) {\r\n        originData.push({\r\n          key: `${bundles[i].id}`,\r\n          no: i + 1 + (page - 1) * take,\r\n          series: `${bundles[i].series}`,\r\n          name: `${bundles[i].name}`,\r\n        });\r\n      }\r\n      setTotal(getTotal);\r\n      setData(originData);\r\n    }\r\n  }, [bundleData]);\r\n\r\n  useEffect(() => {\r\n    if (deleteBundleData) {\r\n      reGetData();\r\n    }\r\n  }, [deleteBundleData]);\r\n\r\n  const edit = (record: Item) => {\r\n    console.log(record);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    console.log('handleAdd');\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    selectedRowKeys.map((key) => {\r\n      console.log(key);\r\n      deleteBundleMutation({\r\n        variables: { input: { bundleId: +key } },\r\n      });\r\n    });\r\n  };\r\n\r\n  const handleCancel = (key: any) => {\r\n    console.log(key);\r\n  };\r\n\r\n  const handleRowDelete = (record: Item) => {\r\n    console.log(record);\r\n  };\r\n\r\n  const handlePageChange = (page: number, take: any) => {\r\n    setPage(page);\r\n    setTake(take);\r\n    console.log(page, take);\r\n  };\r\n\r\n  const onShowSizeChange = (current: any, size: any) => {\r\n    console.log(current, size);\r\n  };\r\n\r\n  const save = async (key: React.Key) => {\r\n    console.log(key);\r\n  };\r\n\r\n  const columns: ColumnsType<Item> = [\r\n    {\r\n      title: 'No',\r\n      dataIndex: 'no',\r\n      width: '10%',\r\n      align: 'center',\r\n      sortDirections: ['ascend', 'descend', 'ascend'],\r\n      sortOrder: 'ascend',\r\n      sorter: (a: { no: number }, b: { no: number }) => a.no - b.no,\r\n    },\r\n    {\r\n      title: 'Series',\r\n      dataIndex: 'series',\r\n      width: '20%',\r\n      align: 'center',\r\n      sortDirections: ['ascend', 'descend', 'ascend'],\r\n      sorter: (a: { series: string }, b: { series: string }) =>\r\n        a.series.localeCompare(b.series),\r\n    },\r\n    {\r\n      title: 'Bundle Name',\r\n      dataIndex: 'name',\r\n      width: '45%',\r\n      align: 'center',\r\n      sortDirections: ['ascend', 'descend', 'ascend'],\r\n      sorter: (a: { name: string }, b: { name: string }) =>\r\n        a.name.localeCompare(b.name),\r\n    },\r\n    {\r\n      title: 'Operation',\r\n      dataIndex: 'operation',\r\n      align: 'center',\r\n      render: (_: any, record: Item) => {\r\n        return (\r\n          <span>\r\n            <Typography.Link\r\n              onClick={() => edit(record)}\r\n              style={{ marginRight: 8 }}\r\n            >\r\n              Edit\r\n            </Typography.Link>\r\n            <Typography.Link href=\"#!\" onClick={() => handleDelete()}>\r\n              Delete\r\n            </Typography.Link>\r\n          </span>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  const rowSelection = {\r\n    // onChange: (selectedRowKeys: React.Key[], selectedRows: Item[]) => {\r\n    onChange: (selectedRowKeys: any, selectedRows: Item[]) => {\r\n      setSelectedRowKeys(selectedRowKeys);\r\n      console.log(\r\n        `selectedRowKeys: ${selectedRowKeys}`,\r\n        'selectedRows: ',\r\n        selectedRows,\r\n      );\r\n    },\r\n    getCheckboxProps: (record: Item) => ({\r\n      disabled: record.name === 'Disabled User',\r\n      name: record.name,\r\n    }),\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Helmet>\r\n        <title>Bundles | CEN Portal</title>\r\n      </Helmet>\r\n      <TitleBar>\r\n        <FolderOpenOutlined />\r\n        {' 제품'}\r\n      </TitleBar>\r\n      <MenuBar>\r\n        <SButton type=\"primary\" size=\"small\" onClick={() => handleAdd()}>\r\n          <Link to=\"/cen/devices/add-bundle\">Add</Link>\r\n        </SButton>\r\n        <SButton type=\"primary\" size=\"small\">\r\n          <Popconfirm\r\n            title=\"정말 삭제 하시겠습니까?\"\r\n            onConfirm={() => handleDelete()}\r\n          >\r\n            Delete\r\n          </Popconfirm>\r\n        </SButton>\r\n      </MenuBar>\r\n      <Form form={form} component={false}>\r\n        {loading ? (\r\n          <Loading />\r\n        ) : (\r\n          <Table<Item>\r\n            bordered\r\n            rowSelection={rowSelection}\r\n            dataSource={data}\r\n            columns={columns}\r\n            pagination={{\r\n              total,\r\n              showTotal: (total, range) =>\r\n                `${range[0]}-${range[1]} of ${total} items`,\r\n              onChange: (page, take) => handlePageChange(page, take),\r\n            }}\r\n          />\r\n        )}\r\n      </Form>\r\n    </Wrapper>\r\n  );\r\n};\r\n","/home/aiden/myCode/cen-portal-frontend/src/pages/cen/partners/partners.tsx",[],"/home/aiden/myCode/cen-portal-frontend/src/pages/cen/devices/addBundle.tsx",["179","180","181","182","183","184","185","186","187","188"],"import React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { gql, useMutation, useQuery } from '@apollo/client';\r\nimport {\r\n  Table,\r\n  Popconfirm,\r\n  Form,\r\n  Typography,\r\n  Button,\r\n  notification,\r\n  Input,\r\n  Space,\r\n  Select,\r\n  Tooltip,\r\n} from 'antd';\r\nimport {\r\n  FolderOpenOutlined,\r\n  MinusCircleOutlined,\r\n  PlusOutlined,\r\n  QuestionCircleOutlined,\r\n} from '@ant-design/icons';\r\nimport {\r\n  createBundleMutation,\r\n  createBundleMutationVariables,\r\n} from '../../../__generated__/createBundleMutation';\r\n\r\nconst { Option } = Select;\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst TitleBar = styled.div`\r\n  font-size: 25px;\r\n  font-weight: 700;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst FormColumn = styled.div`\r\n  margin-top: 40px;\r\n`;\r\n\r\nconst CREATE_BUNDLE_MUTATION = gql`\r\n  mutation createBundleMutation($input: CreateBundleInput!) {\r\n    createBundle(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nexport const AddBundle = () => {\r\n  const history = useHistory();\r\n  const [form] = Form.useForm();\r\n\r\n  const onCompleted = (data: createBundleMutation) => {\r\n    const {\r\n      createBundle: { ok, error },\r\n    } = data;\r\n    if (ok) {\r\n      notification.success({\r\n        message: 'Success!',\r\n        description: '번들 등록 성공',\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n      // setSelectedRowKeys([]);\r\n    } else if (error) {\r\n      notification.error({\r\n        message: 'Error',\r\n        description: `번들 등록 실패. ${error}`,\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  const [createBundleMutation, { data: createBundleData }] = useMutation<\r\n    createBundleMutation,\r\n    createBundleMutationVariables\r\n  >(CREATE_BUNDLE_MUTATION, {\r\n    onCompleted,\r\n  });\r\n\r\n  const onFinish = (values: any) => {\r\n    // console.log('Received values of form:', values);\r\n    const parts: any[] = [];\r\n    for (const part in values.parts) {\r\n      parts.push({\r\n        name: values.parts[part].name,\r\n        num: +values.parts[part].num,\r\n      });\r\n    }\r\n    createBundleMutation({\r\n      variables: {\r\n        input: {\r\n          name: values.name,\r\n          series: values.series,\r\n          parts: parts,\r\n        },\r\n      },\r\n    });\r\n    history.goBack();\r\n  };\r\n\r\n  const handleChange = () => {\r\n    form.setFieldsValue({ parts: [] });\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Helmet>\r\n        <title>Add Bundles | CEN Portal</title>\r\n      </Helmet>\r\n      <TitleBar>\r\n        <FolderOpenOutlined />\r\n        {' 제품 등록'}\r\n      </TitleBar>\r\n      <FormColumn>\r\n        <Form form={form} onFinish={onFinish} autoComplete=\"off\">\r\n          <Form.Item\r\n            name=\"name\"\r\n            label={\r\n              <span>\r\n                {'Bundle '}\r\n                <Tooltip title=\"번들명 입력\">\r\n                  <QuestionCircleOutlined />\r\n                </Tooltip>\r\n              </span>\r\n            }\r\n            rules={[{ required: true, message: '번들 이름을 입력해주세요.' }]}\r\n            style={{ width: 300 }}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"series\"\r\n            label={\r\n              <span>\r\n                {'Series '}\r\n                <Tooltip title=\"시리즈명 입력\">\r\n                  <QuestionCircleOutlined />\r\n                </Tooltip>\r\n              </span>\r\n            }\r\n            rules={[{ required: true, message: '시리즈 이름를 입력해주세요.' }]}\r\n            style={{ width: 300 }}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.List name=\"parts\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map((field) => (\r\n                  <Space key={field.key} align=\"baseline\">\r\n                    <Form.Item\r\n                      noStyle\r\n                      shouldUpdate={(prevValues, curValues) =>\r\n                        prevValues.area !== curValues.area ||\r\n                        prevValues.parts !== curValues.parts\r\n                      }\r\n                    >\r\n                      {() => (\r\n                        <Form.Item\r\n                          {...field}\r\n                          label={\r\n                            <span>\r\n                              Part{' '}\r\n                              <Tooltip title=\"번들에 포함된 부품(Parts) 입력\">\r\n                                <QuestionCircleOutlined />\r\n                              </Tooltip>\r\n                            </span>\r\n                          }\r\n                          name={[field.name, 'name']}\r\n                          fieldKey={[field.fieldKey, 'name']}\r\n                          rules={[\r\n                            { required: true, message: '부품을 입력해주세요.' },\r\n                          ]}\r\n                        >\r\n                          <Input />\r\n                        </Form.Item>\r\n                      )}\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                      {...field}\r\n                      label={\r\n                        <span>\r\n                          Num{' '}\r\n                          <Tooltip title=\"번들에 포함된 부품(Parts) 입력\">\r\n                            <QuestionCircleOutlined />\r\n                          </Tooltip>\r\n                        </span>\r\n                      }\r\n                      name={[field.name, 'num']}\r\n                      fieldKey={[field.fieldKey, 'num']}\r\n                      rules={[\r\n                        { required: true, message: '부품 수를 입력해주세요' },\r\n                      ]}\r\n                    >\r\n                      <Input type=\"number\" />\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                  </Space>\r\n                ))}\r\n\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"dashed\"\r\n                    onClick={() => add()}\r\n                    block\r\n                    icon={<PlusOutlined />}\r\n                  >\r\n                    Add Parts\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" style={{ marginRight: 8 }}>\r\n              Submit\r\n            </Button>\r\n            <Button type=\"primary\">\r\n              <Popconfirm\r\n                title=\"정말 취소 하시겠습니까?\"\r\n                onConfirm={() => history.goBack()}\r\n              >\r\n                Cancel\r\n              </Popconfirm>\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </FormColumn>\r\n    </Wrapper>\r\n  );\r\n};\r\n","/home/aiden/myCode/cen-portal-frontend/src/hooks/useAllBundles.tsx",["189"],"import { gql, useQuery } from '@apollo/client';\r\nimport {\r\n  allBundlesQuery,\r\n  allBundlesQueryVariables,\r\n} from '../__generated__/allBundlesQuery';\r\n\r\nconst ALL_BUNDLES_QUERY = gql`\r\n  query allBundlesQuery($input: AllBundlesInput!) {\r\n    allBundles(input: $input) {\r\n      ok\r\n      error\r\n      totalPages\r\n      totalResults\r\n      bundles {\r\n        id\r\n        name\r\n        series\r\n        parts {\r\n          id\r\n          name\r\n          num\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const useAllBundles = (page?: number, take?: number) => {\r\n  return useQuery<allBundlesQuery, allBundlesQueryVariables>(\r\n    ALL_BUNDLES_QUERY,\r\n    {\r\n      variables: {\r\n        input: {\r\n          page,\r\n          take,\r\n        },\r\n      },\r\n    },\r\n  );\r\n};\r\n","/home/aiden/myCode/cen-portal-frontend/src/hooks/useAllPartners.tsx",["190"],"import { gql, useQuery } from '@apollo/client';\r\nimport {\r\n  allPartnersQuery,\r\n  allPartnersQueryVariables,\r\n} from '../__generated__/allPartnersQuery';\r\n\r\nconst ALL_PARTNERS_QUERY = gql`\r\n  query allPartnersQuery($input: AllPartnersInput!) {\r\n    allPartners(input: $input) {\r\n      ok\r\n      error\r\n      totalPages\r\n      totalResults\r\n      partners {\r\n        id\r\n        name\r\n        address\r\n        zip\r\n        tel\r\n        contactsCount\r\n        contacts {\r\n          id\r\n          name\r\n          jobTitle\r\n          tel\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const useAllPartners = (page?: number, take?: number) => {\r\n  return useQuery<allPartnersQuery, allPartnersQueryVariables>(\r\n    ALL_PARTNERS_QUERY,\r\n    {\r\n      variables: {\r\n        input: {\r\n          page,\r\n          take,\r\n        },\r\n      },\r\n    },\r\n  );\r\n};\r\n",{"ruleId":"191","severity":1,"message":"192","line":3,"column":25,"nodeType":"193","messageId":"194","endLine":3,"endColumn":57},{"ruleId":"195","severity":1,"message":"196","line":130,"column":26,"nodeType":"197","messageId":"198","endLine":130,"endColumn":31},{"ruleId":"191","severity":1,"message":"192","line":6,"column":32,"nodeType":"193","messageId":"194","endLine":6,"endColumn":37},{"ruleId":"199","severity":1,"message":"200","line":6,"column":34,"nodeType":"201","messageId":"202","endLine":6,"endColumn":37,"suggestions":"203"},{"ruleId":"191","severity":1,"message":"192","line":21,"column":22,"nodeType":"193","messageId":"194","endLine":21,"endColumn":27},{"ruleId":"195","severity":1,"message":"204","line":129,"column":22,"nodeType":"197","messageId":"198","endLine":129,"endColumn":49},{"ruleId":"199","severity":1,"message":"200","line":161,"column":35,"nodeType":"201","messageId":"202","endLine":161,"endColumn":38,"suggestions":"205"},{"ruleId":"195","severity":1,"message":"206","line":109,"column":27,"nodeType":"197","messageId":"198","endLine":109,"endColumn":31},{"ruleId":"199","severity":1,"message":"200","line":133,"column":35,"nodeType":"201","messageId":"202","endLine":133,"endColumn":38,"suggestions":"207"},{"ruleId":"199","severity":1,"message":"200","line":207,"column":29,"nodeType":"201","messageId":"202","endLine":207,"endColumn":32,"suggestions":"208"},{"ruleId":"199","severity":1,"message":"200","line":235,"column":50,"nodeType":"201","messageId":"202","endLine":235,"endColumn":53,"suggestions":"209"},{"ruleId":"199","severity":1,"message":"200","line":251,"column":51,"nodeType":"201","messageId":"202","endLine":251,"endColumn":54,"suggestions":"210"},{"ruleId":"199","severity":1,"message":"200","line":256,"column":39,"nodeType":"201","messageId":"202","endLine":256,"endColumn":42,"suggestions":"211"},{"ruleId":"199","severity":1,"message":"200","line":265,"column":35,"nodeType":"201","messageId":"202","endLine":265,"endColumn":38,"suggestions":"212"},{"ruleId":"199","severity":1,"message":"200","line":274,"column":36,"nodeType":"201","messageId":"202","endLine":274,"endColumn":39,"suggestions":"213"},{"ruleId":"199","severity":1,"message":"200","line":283,"column":31,"nodeType":"201","messageId":"202","endLine":283,"endColumn":34,"suggestions":"214"},{"ruleId":"199","severity":1,"message":"200","line":292,"column":28,"nodeType":"201","messageId":"202","endLine":292,"endColumn":31,"suggestions":"215"},{"ruleId":"199","severity":1,"message":"200","line":296,"column":38,"nodeType":"201","messageId":"202","endLine":296,"endColumn":41,"suggestions":"216"},{"ruleId":"199","severity":1,"message":"200","line":300,"column":38,"nodeType":"201","messageId":"202","endLine":300,"endColumn":41,"suggestions":"217"},{"ruleId":"199","severity":1,"message":"200","line":393,"column":57,"nodeType":"201","messageId":"202","endLine":393,"endColumn":60,"suggestions":"218"},{"ruleId":"199","severity":1,"message":"200","line":393,"column":63,"nodeType":"201","messageId":"202","endLine":393,"endColumn":66,"suggestions":"219"},{"ruleId":"199","severity":1,"message":"200","line":400,"column":43,"nodeType":"201","messageId":"202","endLine":400,"endColumn":46,"suggestions":"220"},{"ruleId":"199","severity":1,"message":"200","line":453,"column":57,"nodeType":"201","messageId":"202","endLine":453,"endColumn":60,"suggestions":"221"},{"ruleId":"199","severity":1,"message":"200","line":453,"column":63,"nodeType":"201","messageId":"202","endLine":453,"endColumn":66,"suggestions":"222"},{"ruleId":"199","severity":1,"message":"200","line":540,"column":57,"nodeType":"201","messageId":"202","endLine":540,"endColumn":60,"suggestions":"223"},{"ruleId":"199","severity":1,"message":"200","line":540,"column":63,"nodeType":"201","messageId":"202","endLine":540,"endColumn":66,"suggestions":"224"},{"ruleId":"199","severity":1,"message":"200","line":591,"column":57,"nodeType":"201","messageId":"202","endLine":591,"endColumn":60,"suggestions":"225"},{"ruleId":"199","severity":1,"message":"200","line":591,"column":63,"nodeType":"201","messageId":"202","endLine":591,"endColumn":66,"suggestions":"226"},{"ruleId":"199","severity":1,"message":"200","line":642,"column":57,"nodeType":"201","messageId":"202","endLine":642,"endColumn":60,"suggestions":"227"},{"ruleId":"199","severity":1,"message":"200","line":642,"column":63,"nodeType":"201","messageId":"202","endLine":642,"endColumn":66,"suggestions":"228"},{"ruleId":"195","severity":1,"message":"229","line":1,"column":38,"nodeType":"197","messageId":"198","endLine":1,"endColumn":52},{"ruleId":"195","severity":1,"message":"230","line":4,"column":10,"nodeType":"197","messageId":"198","endLine":4,"endColumn":14},{"ruleId":"195","severity":1,"message":"231","line":6,"column":15,"nodeType":"197","messageId":"198","endLine":6,"endColumn":26},{"ruleId":"195","severity":1,"message":"232","line":9,"column":3,"nodeType":"197","messageId":"198","endLine":9,"endColumn":13},{"ruleId":"195","severity":1,"message":"233","line":10,"column":3,"nodeType":"197","messageId":"198","endLine":10,"endColumn":7},{"ruleId":"195","severity":1,"message":"234","line":11,"column":3,"nodeType":"197","messageId":"198","endLine":11,"endColumn":13},{"ruleId":"195","severity":1,"message":"235","line":13,"column":3,"nodeType":"197","messageId":"198","endLine":13,"endColumn":15},{"ruleId":"195","severity":1,"message":"236","line":21,"column":3,"nodeType":"197","messageId":"198","endLine":21,"endColumn":39},{"ruleId":"195","severity":1,"message":"237","line":24,"column":3,"nodeType":"197","messageId":"198","endLine":24,"endColumn":22},{"ruleId":"195","severity":1,"message":"238","line":25,"column":3,"nodeType":"197","messageId":"198","endLine":25,"endColumn":31},{"ruleId":"195","severity":1,"message":"239","line":29,"column":10,"nodeType":"197","messageId":"198","endLine":29,"endColumn":24},{"ruleId":"199","severity":1,"message":"200","line":92,"column":21,"nodeType":"201","messageId":"202","endLine":92,"endColumn":24,"suggestions":"240"},{"ruleId":"199","severity":1,"message":"200","line":94,"column":18,"nodeType":"201","messageId":"202","endLine":94,"endColumn":21,"suggestions":"241"},{"ruleId":"199","severity":1,"message":"200","line":96,"column":36,"nodeType":"201","messageId":"202","endLine":96,"endColumn":39,"suggestions":"242"},{"ruleId":"199","severity":1,"message":"200","line":109,"column":30,"nodeType":"201","messageId":"202","endLine":109,"endColumn":33,"suggestions":"243"},{"ruleId":"199","severity":1,"message":"200","line":132,"column":24,"nodeType":"201","messageId":"202","endLine":132,"endColumn":27,"suggestions":"244"},{"ruleId":"199","severity":1,"message":"200","line":227,"column":22,"nodeType":"201","messageId":"202","endLine":227,"endColumn":25,"suggestions":"245"},{"ruleId":"195","severity":1,"message":"246","line":135,"column":3,"nodeType":"197","messageId":"198","endLine":135,"endColumn":9},{"ruleId":"195","severity":1,"message":"247","line":136,"column":3,"nodeType":"197","messageId":"198","endLine":136,"endColumn":8},{"ruleId":"191","severity":1,"message":"192","line":177,"column":22,"nodeType":"193","messageId":"194","endLine":177,"endColumn":27},{"ruleId":"195","severity":1,"message":"248","line":188,"column":10,"nodeType":"197","messageId":"198","endLine":188,"endColumn":16},{"ruleId":"195","severity":1,"message":"249","line":188,"column":18,"nodeType":"197","messageId":"198","endLine":188,"endColumn":27},{"ruleId":"199","severity":1,"message":"200","line":467,"column":35,"nodeType":"201","messageId":"202","endLine":467,"endColumn":38,"suggestions":"250"},{"ruleId":"199","severity":1,"message":"200","line":518,"column":43,"nodeType":"201","messageId":"202","endLine":518,"endColumn":46,"suggestions":"251"},{"ruleId":"191","severity":1,"message":"192","line":61,"column":23,"nodeType":"193","messageId":"194","endLine":61,"endColumn":28},{"ruleId":"199","severity":1,"message":"200","line":106,"column":22,"nodeType":"201","messageId":"202","endLine":106,"endColumn":25,"suggestions":"252"},{"ruleId":"199","severity":1,"message":"200","line":107,"column":23,"nodeType":"201","messageId":"202","endLine":107,"endColumn":26,"suggestions":"253"},{"ruleId":"195","severity":1,"message":"254","line":144,"column":9,"nodeType":"197","messageId":"198","endLine":144,"endColumn":21},{"ruleId":"199","severity":1,"message":"200","line":144,"column":30,"nodeType":"201","messageId":"202","endLine":144,"endColumn":33,"suggestions":"255"},{"ruleId":"195","severity":1,"message":"256","line":148,"column":9,"nodeType":"197","messageId":"198","endLine":148,"endColumn":24},{"ruleId":"199","severity":1,"message":"200","line":152,"column":49,"nodeType":"201","messageId":"202","endLine":152,"endColumn":52,"suggestions":"257"},{"ruleId":"195","severity":1,"message":"258","line":158,"column":9,"nodeType":"197","messageId":"198","endLine":158,"endColumn":25},{"ruleId":"199","severity":1,"message":"200","line":158,"column":38,"nodeType":"201","messageId":"202","endLine":158,"endColumn":41,"suggestions":"259"},{"ruleId":"199","severity":1,"message":"200","line":158,"column":49,"nodeType":"201","messageId":"202","endLine":158,"endColumn":52,"suggestions":"260"},{"ruleId":"195","severity":1,"message":"261","line":162,"column":9,"nodeType":"197","messageId":"198","endLine":162,"endColumn":13},{"ruleId":"199","severity":1,"message":"200","line":198,"column":19,"nodeType":"201","messageId":"202","endLine":198,"endColumn":22,"suggestions":"262"},{"ruleId":"199","severity":1,"message":"200","line":218,"column":33,"nodeType":"201","messageId":"202","endLine":218,"endColumn":36,"suggestions":"263"},{"ruleId":"195","severity":1,"message":"230","line":3,"column":10,"nodeType":"197","messageId":"198","endLine":3,"endColumn":14},{"ruleId":"195","severity":1,"message":"264","line":5,"column":28,"nodeType":"197","messageId":"198","endLine":5,"endColumn":36},{"ruleId":"195","severity":1,"message":"265","line":7,"column":3,"nodeType":"197","messageId":"198","endLine":7,"endColumn":8},{"ruleId":"195","severity":1,"message":"234","line":10,"column":3,"nodeType":"197","messageId":"198","endLine":10,"endColumn":13},{"ruleId":"195","severity":1,"message":"266","line":29,"column":9,"nodeType":"197","messageId":"198","endLine":29,"endColumn":15},{"ruleId":"191","severity":1,"message":"192","line":54,"column":26,"nodeType":"193","messageId":"194","endLine":54,"endColumn":31},{"ruleId":"195","severity":1,"message":"267","line":80,"column":40,"nodeType":"197","messageId":"198","endLine":80,"endColumn":56},{"ruleId":"199","severity":1,"message":"200","line":87,"column":29,"nodeType":"201","messageId":"202","endLine":87,"endColumn":32,"suggestions":"268"},{"ruleId":"199","severity":1,"message":"200","line":89,"column":18,"nodeType":"201","messageId":"202","endLine":89,"endColumn":21,"suggestions":"269"},{"ruleId":"195","severity":1,"message":"270","line":108,"column":9,"nodeType":"197","messageId":"198","endLine":108,"endColumn":21},{"ruleId":"191","severity":1,"message":"192","line":28,"column":30,"nodeType":"193","messageId":"194","endLine":28,"endColumn":63},{"ruleId":"191","severity":1,"message":"192","line":32,"column":31,"nodeType":"193","messageId":"194","endLine":32,"endColumn":64},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["271","272"],"'createAccountMutationResult' is assigned a value but never used.",["273","274"],"'data' is assigned a value but never used.",["275","276"],["277","278"],["279","280"],["281","282"],["283","284"],["285","286"],["287","288"],["289","290"],["291","292"],["293","294"],["295","296"],["297","298"],["299","300"],["301","302"],["303","304"],["305","306"],["307","308"],["309","310"],["311","312"],["313","314"],["315","316"],["317","318"],"'SetStateAction' is defined but never used.","'Link' is defined but never used.","'useMutation' is defined but never used.","'Popconfirm' is defined but never used.","'Form' is defined but never used.","'Typography' is defined but never used.","'notification' is defined but never used.","'getOrderQuery_getOrder_order_partner' is defined but never used.","'deleteOrderMutation' is defined but never used.","'deleteOrderMutationVariables' is defined but never used.","'AnyNaptrRecord' is defined but never used.",["319","320"],["321","322"],["323","324"],["325","326"],["327","328"],["329","330"],"'record' is defined but never used.","'index' is defined but never used.","'sortNo' is assigned a value but never used.","'setSortNo' is assigned a value but never used.",["331","332"],["333","334"],["335","336"],["337","338"],"'handleCancel' is assigned a value but never used.",["339","340"],"'handleRowDelete' is assigned a value but never used.",["341","342"],"'onShowSizeChange' is assigned a value but never used.",["343","344"],["345","346"],"'save' is assigned a value but never used.",["347","348"],["349","350"],"'useQuery' is defined but never used.","'Table' is defined but never used.","'Option' is assigned a value but never used.","'createBundleData' is assigned a value but never used.",["351","352"],["353","354"],"'handleChange' is assigned a value but never used.",{"messageId":"355","fix":"356","desc":"357"},{"messageId":"358","fix":"359","desc":"360"},{"messageId":"355","fix":"361","desc":"357"},{"messageId":"358","fix":"362","desc":"360"},{"messageId":"355","fix":"363","desc":"357"},{"messageId":"358","fix":"364","desc":"360"},{"messageId":"355","fix":"365","desc":"357"},{"messageId":"358","fix":"366","desc":"360"},{"messageId":"355","fix":"367","desc":"357"},{"messageId":"358","fix":"368","desc":"360"},{"messageId":"355","fix":"369","desc":"357"},{"messageId":"358","fix":"370","desc":"360"},{"messageId":"355","fix":"371","desc":"357"},{"messageId":"358","fix":"372","desc":"360"},{"messageId":"355","fix":"373","desc":"357"},{"messageId":"358","fix":"374","desc":"360"},{"messageId":"355","fix":"375","desc":"357"},{"messageId":"358","fix":"376","desc":"360"},{"messageId":"355","fix":"377","desc":"357"},{"messageId":"358","fix":"378","desc":"360"},{"messageId":"355","fix":"379","desc":"357"},{"messageId":"358","fix":"380","desc":"360"},{"messageId":"355","fix":"381","desc":"357"},{"messageId":"358","fix":"382","desc":"360"},{"messageId":"355","fix":"383","desc":"357"},{"messageId":"358","fix":"384","desc":"360"},{"messageId":"355","fix":"385","desc":"357"},{"messageId":"358","fix":"386","desc":"360"},{"messageId":"355","fix":"387","desc":"357"},{"messageId":"358","fix":"388","desc":"360"},{"messageId":"355","fix":"389","desc":"357"},{"messageId":"358","fix":"390","desc":"360"},{"messageId":"355","fix":"391","desc":"357"},{"messageId":"358","fix":"392","desc":"360"},{"messageId":"355","fix":"393","desc":"357"},{"messageId":"358","fix":"394","desc":"360"},{"messageId":"355","fix":"395","desc":"357"},{"messageId":"358","fix":"396","desc":"360"},{"messageId":"355","fix":"397","desc":"357"},{"messageId":"358","fix":"398","desc":"360"},{"messageId":"355","fix":"399","desc":"357"},{"messageId":"358","fix":"400","desc":"360"},{"messageId":"355","fix":"401","desc":"357"},{"messageId":"358","fix":"402","desc":"360"},{"messageId":"355","fix":"403","desc":"357"},{"messageId":"358","fix":"404","desc":"360"},{"messageId":"355","fix":"405","desc":"357"},{"messageId":"358","fix":"406","desc":"360"},{"messageId":"355","fix":"407","desc":"357"},{"messageId":"358","fix":"408","desc":"360"},{"messageId":"355","fix":"409","desc":"357"},{"messageId":"358","fix":"410","desc":"360"},{"messageId":"355","fix":"411","desc":"357"},{"messageId":"358","fix":"412","desc":"360"},{"messageId":"355","fix":"413","desc":"357"},{"messageId":"358","fix":"414","desc":"360"},{"messageId":"355","fix":"415","desc":"357"},{"messageId":"358","fix":"416","desc":"360"},{"messageId":"355","fix":"417","desc":"357"},{"messageId":"358","fix":"418","desc":"360"},{"messageId":"355","fix":"419","desc":"357"},{"messageId":"358","fix":"420","desc":"360"},{"messageId":"355","fix":"421","desc":"357"},{"messageId":"358","fix":"422","desc":"360"},{"messageId":"355","fix":"423","desc":"357"},{"messageId":"358","fix":"424","desc":"360"},{"messageId":"355","fix":"425","desc":"357"},{"messageId":"358","fix":"426","desc":"360"},{"messageId":"355","fix":"427","desc":"357"},{"messageId":"358","fix":"428","desc":"360"},{"messageId":"355","fix":"429","desc":"357"},{"messageId":"358","fix":"430","desc":"360"},{"messageId":"355","fix":"431","desc":"357"},{"messageId":"358","fix":"432","desc":"360"},{"messageId":"355","fix":"433","desc":"357"},{"messageId":"358","fix":"434","desc":"360"},{"messageId":"355","fix":"435","desc":"357"},{"messageId":"358","fix":"436","desc":"360"},{"messageId":"355","fix":"437","desc":"357"},{"messageId":"358","fix":"438","desc":"360"},{"messageId":"355","fix":"439","desc":"357"},{"messageId":"358","fix":"440","desc":"360"},{"messageId":"355","fix":"441","desc":"357"},{"messageId":"358","fix":"442","desc":"360"},"suggestUnknown",{"range":"443","text":"444"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"443","text":"445"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"446","text":"444"},{"range":"446","text":"445"},{"range":"447","text":"444"},{"range":"447","text":"445"},{"range":"448","text":"444"},{"range":"448","text":"445"},{"range":"449","text":"444"},{"range":"449","text":"445"},{"range":"450","text":"444"},{"range":"450","text":"445"},{"range":"451","text":"444"},{"range":"451","text":"445"},{"range":"452","text":"444"},{"range":"452","text":"445"},{"range":"453","text":"444"},{"range":"453","text":"445"},{"range":"454","text":"444"},{"range":"454","text":"445"},{"range":"455","text":"444"},{"range":"455","text":"445"},{"range":"456","text":"444"},{"range":"456","text":"445"},{"range":"457","text":"444"},{"range":"457","text":"445"},{"range":"458","text":"444"},{"range":"458","text":"445"},{"range":"459","text":"444"},{"range":"459","text":"445"},{"range":"460","text":"444"},{"range":"460","text":"445"},{"range":"461","text":"444"},{"range":"461","text":"445"},{"range":"462","text":"444"},{"range":"462","text":"445"},{"range":"463","text":"444"},{"range":"463","text":"445"},{"range":"464","text":"444"},{"range":"464","text":"445"},{"range":"465","text":"444"},{"range":"465","text":"445"},{"range":"466","text":"444"},{"range":"466","text":"445"},{"range":"467","text":"444"},{"range":"467","text":"445"},{"range":"468","text":"444"},{"range":"468","text":"445"},{"range":"469","text":"444"},{"range":"469","text":"445"},{"range":"470","text":"444"},{"range":"470","text":"445"},{"range":"471","text":"444"},{"range":"471","text":"445"},{"range":"472","text":"444"},{"range":"472","text":"445"},{"range":"473","text":"444"},{"range":"473","text":"445"},{"range":"474","text":"444"},{"range":"474","text":"445"},{"range":"475","text":"444"},{"range":"475","text":"445"},{"range":"476","text":"444"},{"range":"476","text":"445"},{"range":"477","text":"444"},{"range":"477","text":"445"},{"range":"478","text":"444"},{"range":"478","text":"445"},{"range":"479","text":"444"},{"range":"479","text":"445"},{"range":"480","text":"444"},{"range":"480","text":"445"},{"range":"481","text":"444"},{"range":"481","text":"445"},{"range":"482","text":"444"},{"range":"482","text":"445"},{"range":"483","text":"444"},{"range":"483","text":"445"},{"range":"484","text":"444"},{"range":"484","text":"445"},{"range":"485","text":"444"},{"range":"485","text":"445"},{"range":"486","text":"444"},{"range":"486","text":"445"},[204,207],"unknown","never",[3881,3884],[3030,3033],[5092,5095],[5984,5987],[6486,6489],[6625,6628],[6841,6844],[7042,7045],[7242,7245],[7417,7420],[7527,7530],[7639,7642],[11062,11065],[11068,11071],[11353,11356],[13313,13316],[13319,13322],[16723,16726],[16729,16732],[18664,18667],[18670,18673],[20619,20622],[20625,20628],[1983,1986],[2046,2049],[2172,2175],[2425,2428],[2837,2840],[6166,6169],[11992,11995],[13440,13443],[2602,2605],[2663,2666],[3527,3530],[3698,3701],[3824,3827],[3835,3838],[4914,4917],[5475,5478],[1905,1908],[1990,1993]]