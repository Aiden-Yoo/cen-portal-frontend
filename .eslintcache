[{"/home/cen/cen-portal-frontend/src/index.tsx":"1","/home/cen/cen-portal-frontend/src/reportWebVitals.ts":"2","/home/cen/cen-portal-frontend/src/apollo.ts":"3","/home/cen/cen-portal-frontend/src/components/App.tsx":"4","/home/cen/cen-portal-frontend/src/styles/global-styles.tsx":"5","/home/cen/cen-portal-frontend/src/styles/theme.tsx":"6","/home/cen/cen-portal-frontend/src/constants.ts":"7","/home/cen/cen-portal-frontend/src/routers/logged-out-router.tsx":"8","/home/cen/cen-portal-frontend/src/routers/logged-in-router.tsx":"9","/home/cen/cen-portal-frontend/src/__generated__/globalTypes.ts":"10","/home/cen/cen-portal-frontend/src/components/loading.tsx":"11","/home/cen/cen-portal-frontend/src/components/header.tsx":"12","/home/cen/cen-portal-frontend/src/pages/create-account.tsx":"13","/home/cen/cen-portal-frontend/src/pages/404.tsx":"14","/home/cen/cen-portal-frontend/src/pages/login.tsx":"15","/home/cen/cen-portal-frontend/src/hooks/useMe.tsx":"16","/home/cen/cen-portal-frontend/src/pages/home/home.tsx":"17","/home/cen/cen-portal-frontend/src/pages/cen/orders/orders.tsx":"18","/home/cen/cen-portal-frontend/src/pages/cen/orders/orderSerial.tsx":"19","/home/cen/cen-portal-frontend/src/pages/cen/orders/orderDetail.tsx":"20","/home/cen/cen-portal-frontend/src/pages/cen/partners/partners.tsx":"21","/home/cen/cen-portal-frontend/src/pages/cen/orders/addOrder.tsx":"22","/home/cen/cen-portal-frontend/src/pages/cen/partners/addPartner.tsx":"23","/home/cen/cen-portal-frontend/src/pages/cen/partners/partnerDetail.tsx":"24","/home/cen/cen-portal-frontend/src/pages/cen/devices/devices.tsx":"25","/home/cen/cen-portal-frontend/src/pages/cen/devices/addBundle.tsx":"26","/home/cen/cen-portal-frontend/src/pages/cen/partners/addContact.tsx":"27","/home/cen/cen-portal-frontend/src/pages/cen/devices/addPart.tsx":"28","/home/cen/cen-portal-frontend/src/pages/cen/devices/bundleDetail.tsx":"29","/home/cen/cen-portal-frontend/src/pages/cen/devices/partDetail.tsx":"30","/home/cen/cen-portal-frontend/src/pages/cen/user/mypage.tsx":"31","/home/cen/cen-portal-frontend/src/pages/partner/cases/cases.tsx":"32","/home/cen/cen-portal-frontend/src/pages/partner/workarounds/workarounds.tsx":"33","/home/cen/cen-portal-frontend/src/pages/partner/workarounds/addWorkaround.tsx":"34","/home/cen/cen-portal-frontend/src/pages/partner/firmwares/firmwares.tsx":"35","/home/cen/cen-portal-frontend/src/pages/partner/cases/caseDetail.tsx":"36","/home/cen/cen-portal-frontend/src/pages/partner/cases/addCase.tsx":"37","/home/cen/cen-portal-frontend/src/pages/partner/workarounds/workaroundDetail.tsx":"38","/home/cen/cen-portal-frontend/src/pages/partner/documents/documents.tsx":"39","/home/cen/cen-portal-frontend/src/pages/partner/firmwares/addFirmware.tsx":"40","/home/cen/cen-portal-frontend/src/pages/partner/firmwares/firmwareDetail.tsx":"41","/home/cen/cen-portal-frontend/src/pages/partner/documents/addDocument.tsx":"42","/home/cen/cen-portal-frontend/src/pages/partner/documents/documentDetail.tsx":"43","/home/cen/cen-portal-frontend/src/hooks/useAllDocuments.tsx":"44","/home/cen/cen-portal-frontend/src/hooks/useAllFirmwares.tsx":"45","/home/cen/cen-portal-frontend/src/hooks/useAllCases.tsx":"46","/home/cen/cen-portal-frontend/src/hooks/useAllWorkarounds.tsx":"47","/home/cen/cen-portal-frontend/src/hooks/useAllParts.tsx":"48","/home/cen/cen-portal-frontend/src/hooks/useAllBundles.tsx":"49","/home/cen/cen-portal-frontend/src/hooks/useAllPartners.tsx":"50"},{"size":887,"mtime":1622593952865,"results":"51","hashOfConfig":"52"},{"size":425,"mtime":1622593952865,"results":"53","hashOfConfig":"52"},{"size":1302,"mtime":1622595521735,"results":"54","hashOfConfig":"52"},{"size":416,"mtime":1622593952865,"results":"55","hashOfConfig":"52"},{"size":692,"mtime":1622593952865,"results":"56","hashOfConfig":"52"},{"size":1618,"mtime":1622593952865,"results":"57","hashOfConfig":"52"},{"size":88,"mtime":1622767545188,"results":"58","hashOfConfig":"52"},{"size":487,"mtime":1622593952865,"results":"59","hashOfConfig":"52"},{"size":8508,"mtime":1622593952865,"results":"60","hashOfConfig":"52"},{"size":11527,"mtime":1622593952865,"results":"61","hashOfConfig":"52"},{"size":447,"mtime":1622593952865,"results":"62","hashOfConfig":"52"},{"size":1646,"mtime":1622593952865,"results":"63","hashOfConfig":"52"},{"size":12197,"mtime":1622593952865,"results":"64","hashOfConfig":"52"},{"size":2108,"mtime":1622593952865,"results":"65","hashOfConfig":"52"},{"size":5950,"mtime":1622593952865,"results":"66","hashOfConfig":"52"},{"size":387,"mtime":1622593952865,"results":"67","hashOfConfig":"52"},{"size":4791,"mtime":1622596463085,"results":"68","hashOfConfig":"52"},{"size":17043,"mtime":1622695700864,"results":"69","hashOfConfig":"52"},{"size":8892,"mtime":1622593952865,"results":"70","hashOfConfig":"52"},{"size":8986,"mtime":1622593952865,"results":"71","hashOfConfig":"52"},{"size":12207,"mtime":1622593952865,"results":"72","hashOfConfig":"52"},{"size":29357,"mtime":1622704374159,"results":"73","hashOfConfig":"52"},{"size":4658,"mtime":1622593952865,"results":"74","hashOfConfig":"52"},{"size":13262,"mtime":1622593952865,"results":"75","hashOfConfig":"52"},{"size":11536,"mtime":1622600978364,"results":"76","hashOfConfig":"52"},{"size":10002,"mtime":1622702486008,"results":"77","hashOfConfig":"52"},{"size":4877,"mtime":1622593952865,"results":"78","hashOfConfig":"52"},{"size":4470,"mtime":1622593952865,"results":"79","hashOfConfig":"52"},{"size":13439,"mtime":1622593952865,"results":"80","hashOfConfig":"52"},{"size":5891,"mtime":1622593952865,"results":"81","hashOfConfig":"52"},{"size":9125,"mtime":1622593952865,"results":"82","hashOfConfig":"52"},{"size":5589,"mtime":1622593952865,"results":"83","hashOfConfig":"52"},{"size":5874,"mtime":1622593952865,"results":"84","hashOfConfig":"52"},{"size":8342,"mtime":1622767734063,"results":"85","hashOfConfig":"52"},{"size":5404,"mtime":1622593952865,"results":"86","hashOfConfig":"52"},{"size":22606,"mtime":1622593952865,"results":"87","hashOfConfig":"52"},{"size":7882,"mtime":1622767733535,"results":"88","hashOfConfig":"52"},{"size":23507,"mtime":1622593952865,"results":"89","hashOfConfig":"52"},{"size":5904,"mtime":1622593952865,"results":"90","hashOfConfig":"52"},{"size":8286,"mtime":1622767668537,"results":"91","hashOfConfig":"52"},{"size":16077,"mtime":1622593952865,"results":"92","hashOfConfig":"52"},{"size":8217,"mtime":1622767732627,"results":"93","hashOfConfig":"52"},{"size":16609,"mtime":1622593952865,"results":"94","hashOfConfig":"52"},{"size":855,"mtime":1622593952865,"results":"95","hashOfConfig":"52"},{"size":855,"mtime":1622593952865,"results":"96","hashOfConfig":"52"},{"size":811,"mtime":1622593952865,"results":"97","hashOfConfig":"52"},{"size":899,"mtime":1622593952865,"results":"98","hashOfConfig":"52"},{"size":625,"mtime":1622593952865,"results":"99","hashOfConfig":"52"},{"size":840,"mtime":1622593952865,"results":"100","hashOfConfig":"52"},{"size":849,"mtime":1622593952865,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"1t6wse3",{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"104"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"104"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"104"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"104"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"104"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"104"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"104"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"104"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"104"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"104"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"104"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"104"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"104"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"104"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"104"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"104"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"104"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"104"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"104"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"104"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"104"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"104"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"104"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"104"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"104"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"104"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"104"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"104"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"104"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"104"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"104"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"104"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"104"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"104"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"104"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"237"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"104"},"/home/cen/cen-portal-frontend/src/index.tsx",[],[],"/home/cen/cen-portal-frontend/src/reportWebVitals.ts",["241"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/home/cen/cen-portal-frontend/src/apollo.ts",[],"/home/cen/cen-portal-frontend/src/components/App.tsx",[],"/home/cen/cen-portal-frontend/src/styles/global-styles.tsx",[],"/home/cen/cen-portal-frontend/src/styles/theme.tsx",[],"/home/cen/cen-portal-frontend/src/constants.ts",[],"/home/cen/cen-portal-frontend/src/routers/logged-out-router.tsx",["242"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { CreateAccount } from '../pages/create-account';\r\nimport { Login } from '../pages/login';\r\n\r\nexport const LoggedOutRouter = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/create-account\">\r\n          <CreateAccount />\r\n        </Route>\r\n        <Route path=\"/\" exact>\r\n          <Login />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n","/home/cen/cen-portal-frontend/src/routers/logged-in-router.tsx",["243"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { useMe } from '../hooks/useMe';\r\nimport { Layout, Menu } from 'antd';\r\nimport {\r\n  InboxOutlined,\r\n  FileOutlined,\r\n  UsergroupAddOutlined,\r\n  DesktopOutlined,\r\n  ToolOutlined,\r\n} from '@ant-design/icons';\r\nimport { UserRole } from '../__generated__/globalTypes';\r\nimport logo from '../images/CoreEdge_logo.png';\r\nimport { NotFound } from '../pages/404';\r\nimport { Loading } from '../components/loading';\r\nimport { Header } from '../components/header';\r\nimport { Order } from '../pages/cen/orders/orders';\r\nimport { Partner } from '../pages/cen/partners/partners';\r\nimport { Device } from '../pages/cen/devices/devices';\r\nimport { AddBundle } from '../pages/cen/devices/addBundle';\r\nimport { AddOrder } from '../pages/cen/orders/addOrder';\r\nimport { OrderDetail } from '../pages/cen/orders/orderDetail';\r\nimport { AddPartner } from '../pages/cen/partners/addPartner';\r\nimport { PartnerDetail } from '../pages/cen/partners/partnerDetail';\r\nimport { AddContact } from '../pages/cen/partners/addContact';\r\nimport { AddPart } from '../pages/cen/devices/addPart';\r\nimport { BundleDetail } from '../pages/cen/devices/bundleDetail';\r\nimport { PartDetail } from '../pages/cen/devices/partDetail';\r\nimport { OrderSerial } from '../pages/cen/orders/orderSerial';\r\nimport { MyPage } from '../pages/cen/user/mypage';\r\nimport { Home } from '../pages/home/home';\r\nimport { Case } from '../pages/partner/cases/cases';\r\nimport { AddCase } from '../pages/partner/cases/addCase';\r\nimport { CaseDetail } from '../pages/partner/cases/caseDetail';\r\nimport { Workaround } from '../pages/partner/workarounds/workarounds';\r\nimport { AddWorkaround } from '../pages/partner/workarounds/addWorkaround';\r\nimport { WorkaroundDetail } from '../pages/partner/workarounds/workaroundDetail';\r\nimport { Firmware } from '../pages/partner/firmwares/firmwares';\r\nimport { AddFirmware } from '../pages/partner/firmwares/addFirmware';\r\nimport { FirmwareDetail } from '../pages/partner/firmwares/firmwareDetail';\r\nimport { Document } from '../pages/partner/documents/documents';\r\nimport { AddDocument } from '../pages/partner/documents/addDocument';\r\nimport { DocumentDetail } from '../pages/partner/documents/documentDetail';\r\n\r\nconst { Content, Footer, Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nconst LogoColumn = styled.div`\r\n  height: 64px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  padding: 3px;\r\n  height: 46px;\r\n`;\r\n\r\nconst ContentColumn = styled(Content)`\r\n  margin: 24px 16px 0;\r\n  overflow: initial;\r\n`;\r\n\r\nconst Contents = styled.div`\r\n  padding: 24;\r\n  min-height: calc(100vh - 108px);\r\n  background: #ffffff;\r\n`;\r\n\r\nconst cenRoutes = [\r\n  { path: '/cen/orders', component: <Order /> },\r\n  { path: '/cen/orders/add-order', component: <AddOrder /> },\r\n  { path: '/cen/orders/:id', component: <OrderDetail /> },\r\n  { path: '/cen/orders/:id/serial-number', component: <OrderSerial /> },\r\n  { path: '/cen/partners', component: <Partner /> },\r\n  { path: '/cen/partners/add-partner', component: <AddPartner /> },\r\n  { path: '/cen/partners/:id', component: <PartnerDetail /> },\r\n  { path: '/cen/partners/:id/add-contact', component: <AddContact /> },\r\n  { path: '/cen/devices', component: <Device /> },\r\n  { path: '/cen/devices/add-bundle', component: <AddBundle /> },\r\n  { path: '/cen/devices/add-part', component: <AddPart /> },\r\n  { path: '/cen/devices/bundle/:id', component: <BundleDetail /> },\r\n  { path: '/cen/devices/part/:id', component: <PartDetail /> },\r\n  // { path: '/cen/users', component: <User /> },\r\n];\r\n\r\nconst commonRoutes = [\r\n  { path: '/', component: <Home /> },\r\n  // { path: \"/confirm-email\", component: <ConfirmEmail /> },\r\n  { path: '/mypage', component: <MyPage /> },\r\n  { path: '/partner/firmwares', component: <Firmware /> },\r\n  { path: '/partner/firmwares/add-firmware', component: <AddFirmware /> },\r\n  { path: '/partner/firmwares/:id', component: <FirmwareDetail /> },\r\n  { path: '/partner/documents', component: <Document /> },\r\n  { path: '/partner/documents/add-document', component: <AddDocument /> },\r\n  { path: '/partner/documents/:id', component: <DocumentDetail /> },\r\n  { path: '/partner/cases', component: <Case /> },\r\n  { path: '/partner/cases/add-case', component: <AddCase /> },\r\n  { path: '/partner/cases/:id', component: <CaseDetail /> },\r\n  { path: '/partner/workarounds', component: <Workaround /> },\r\n  { path: '/partner/workarounds/add-workaround', component: <AddWorkaround /> },\r\n  { path: '/partner/workarounds/:id', component: <WorkaroundDetail /> },\r\n];\r\n\r\nconst siderRoutes = [\r\n  {\r\n    path: '/cen',\r\n    component: (\r\n      <Menu\r\n        theme=\"dark\"\r\n        mode=\"inline\"\r\n        defaultSelectedKeys={['1-1']}\r\n        defaultOpenKeys={['1']}\r\n      >\r\n        <SubMenu key=\"1\" icon={<InboxOutlined />} title=\"출고요청\">\r\n          <Menu.Item key=\"1-1\">\r\n            <Link to=\"/cen/orders\">출고요청서</Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"1-2\">\r\n            <Link to=\"/cen/partners\">파트너</Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"1-3\">\r\n            <Link to=\"/cen/devices\">제품</Link>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n        <Menu.Item key=\"2\" icon={<UsergroupAddOutlined />}>\r\n          <Link to=\"/cen/users\">회원관리</Link>\r\n        </Menu.Item>\r\n      </Menu>\r\n    ),\r\n  },\r\n  {\r\n    path: '/partner',\r\n    component: (\r\n      <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n        <Menu.Item key=\"1\" icon={<DesktopOutlined />}>\r\n          <Link to=\"/partner/firmwares\">Firmwares</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"2\" icon={<FileOutlined />}>\r\n          <Link to=\"/partner/documents\">Documents</Link>\r\n        </Menu.Item>\r\n        <SubMenu key=\"3\" icon={<ToolOutlined />} title=\"Technical\">\r\n          <Menu.Item key=\"3-1\">\r\n            <Link to=\"/partner/cases\">Cases</Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"3-2\">\r\n            <Link to=\"/partner/workarounds\">Workarounds</Link>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n      </Menu>\r\n    ),\r\n  },\r\n];\r\n\r\nexport const LoggedInRouter: React.FC = () => {\r\n  const year = new Date().getFullYear();\r\n  const { data, loading, error } = useMe();\r\n\r\n  return (\r\n    <Router>\r\n      {loading ? (\r\n        <Loading />\r\n      ) : (\r\n        <Layout>\r\n          <Sider\r\n            breakpoint=\"lg\"\r\n            collapsedWidth=\"0\"\r\n            onBreakpoint={(broken) => {\r\n              console.log(broken);\r\n            }}\r\n            onCollapse={(collapsed, type) => {\r\n              console.log(collapsed, type);\r\n            }}\r\n            style={{\r\n              height: 'inherit',\r\n              left: 0,\r\n            }}\r\n          >\r\n            <LogoColumn>\r\n              <Link to=\"/\">\r\n                <Logo src={logo} />\r\n              </Link>\r\n            </LogoColumn>\r\n            {siderRoutes.map((route) => (\r\n              <Route key={route.path} path={route.path}>\r\n                {route.component}\r\n              </Route>\r\n            ))}\r\n          </Sider>\r\n          <Layout>\r\n            {/* <Header style={{ padding: 0, background: '#ffffff' }} /> */}\r\n            <Header />\r\n            <Switch>\r\n              {commonRoutes.map((route) => (\r\n                <Route exact key={route.path} path={route.path}>\r\n                  <ContentColumn>\r\n                    <Contents>{route.component}</Contents>\r\n                  </ContentColumn>\r\n                </Route>\r\n              ))}\r\n              {(data?.me.role === UserRole.CENSE ||\r\n                data?.me.role === UserRole.CEN) &&\r\n                cenRoutes.map((route) => (\r\n                  <Route exact key={route.path} path={route.path}>\r\n                    <ContentColumn>\r\n                      <Contents>{route.component}</Contents>\r\n                    </ContentColumn>\r\n                  </Route>\r\n                ))}\r\n              <Route>\r\n                <NotFound />\r\n              </Route>\r\n            </Switch>\r\n            <Footer\r\n              style={{\r\n                textAlign: 'center',\r\n                fontSize: '10px',\r\n                padding: '5px 0',\r\n              }}\r\n            >\r\n              COPYRIGHT© 2017-{year} COREEDGE NETWORKS INC. ALL RIGHTS RESERVED.\r\n            </Footer>\r\n          </Layout>\r\n        </Layout>\r\n      )}\r\n    </Router>\r\n  );\r\n};\r\n","/home/cen/cen-portal-frontend/src/__generated__/globalTypes.ts",[],"/home/cen/cen-portal-frontend/src/components/loading.tsx",["244"],"/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\n/* eslint-disable react/prop-types */\r\nimport React from 'react';\r\nimport { Spin } from 'antd';\r\n\r\nexport const Loading = ({ tip }: any) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        height: '100vh',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n      }}\r\n    >\r\n      <Spin tip={tip ? tip : ''} />\r\n    </div>\r\n  );\r\n};\r\n","/home/cen/cen-portal-frontend/src/components/header.tsx",[],"/home/cen/cen-portal-frontend/src/pages/create-account.tsx",["245","246"],"import { gql, useMutation } from '@apollo/client';\r\nimport React, { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { Form, Input, Button, Select, Spin, notification } from 'antd';\r\nimport {\r\n  UserOutlined,\r\n  LockOutlined,\r\n  TagOutlined,\r\n  SnippetsOutlined,\r\n} from '@ant-design/icons';\r\nimport logo from '../images/CoreEdge_logo.png';\r\nimport {\r\n  createAccountMutation,\r\n  createAccountMutationVariables,\r\n} from '../__generated__/createAccountMutation';\r\nimport { UserRole } from '../__generated__/globalTypes';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: no-repeat url() center center;\r\n  background-color: rgba(21, 20, 13, 0.5);\r\n  background-size: 1920px 640px;\r\n`;\r\n\r\nconst LoginHeader = styled.header`\r\n  padding-left: 5px;\r\n  position: absolute;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100vw;\r\n  height: 60px;\r\n  background-color: rgba(21, 20, 13, 0.5);\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  width: 234px;\r\n  height: 50px;\r\n`;\r\n\r\nconst Box = styled.div`\r\n  margin-left: 100px;\r\n  background-color: white;\r\n  border: 1px solid #e6e6e6;\r\n  text-align: center;\r\n  width: 300px;\r\n`;\r\n\r\nconst Column = styled.div`\r\n  width: 20%;\r\n`;\r\n\r\nconst SwitchBox = styled(Box)`\r\n  padding: 25px 0px;\r\n  margin-top: 15px;\r\n`;\r\n\r\nconst SwitchLink = styled.span`\r\n  color: ${(props) => props.theme.colors.green_1};\r\n  cursor: pointer;\r\n`;\r\n\r\nconst FormBox = styled(Box)`\r\n  padding: 30px;\r\n`;\r\n\r\nconst SButton = styled(Button)`\r\n  width: 100%;\r\n`;\r\n\r\nconst CREATE_ACCOUNT_MUTATION = gql`\r\n  mutation createAccountMutation($createAccountInput: CreateAccountInput!) {\r\n    createAccount(input: $createAccountInput) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CreateAccount: React.FC = () => {\r\n  const [email, setUsername] = useState<string>('');\r\n  const [password, setPassword] = useState('');\r\n  const [passwordConfirm, setPasswordConfirm] = useState('');\r\n  const [role, setRole] = useState<UserRole>(UserRole.Partner);\r\n  const [name, setName] = useState('');\r\n  const [company, setCompany] = useState('');\r\n  const [team, setTeam] = useState('');\r\n  const [jobTitle, setJobTitle] = useState('');\r\n\r\n  const history = useHistory();\r\n\r\n  const onCompleted = (data: createAccountMutation) => {\r\n    const {\r\n      createAccount: { ok, error },\r\n    } = data;\r\n    if (ok) {\r\n      notification.info({\r\n        message: 'Success!',\r\n        description:\r\n          \"회원가입 성공. '① 가입 이메일 인증, ② 관리자 승인'이 완료되어야 로그인이 가능합니다.\",\r\n        placement: 'topRight',\r\n        duration: 0,\r\n      });\r\n      setUsername('');\r\n      setPassword('');\r\n      setPasswordConfirm('');\r\n      setRole(UserRole.Partner);\r\n      setName('');\r\n      setCompany('');\r\n      setTeam('');\r\n      setJobTitle('');\r\n      history.push('/');\r\n    } else if (error) {\r\n      notification.error({\r\n        message: 'Error',\r\n        description: `회원가입 실패. ${error}`,\r\n        placement: 'topRight',\r\n        duration: 0,\r\n      });\r\n    }\r\n  };\r\n\r\n  const [\r\n    createAccountMutation,\r\n    { loading, data: createAccountMutationResult, error },\r\n  ] = useMutation<createAccountMutation, createAccountMutationVariables>(\r\n    CREATE_ACCOUNT_MUTATION,\r\n    {\r\n      onCompleted,\r\n    },\r\n  );\r\n\r\n  if (error) console.log(error);\r\n\r\n  const onFinish = () => {\r\n    if (!loading) {\r\n      createAccountMutation({\r\n        variables: {\r\n          createAccountInput: {\r\n            email,\r\n            password,\r\n            role,\r\n            company,\r\n            name,\r\n            team,\r\n            jobTitle,\r\n          },\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo: unknown) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const onChangeHandler = (event: any) => {\r\n    if (typeof event === 'string') {\r\n      if (event === 'CEN') setRole(UserRole.CEN);\r\n      else if (event === 'Partner') setRole(UserRole.Partner);\r\n      else if (event === 'Client') setRole(UserRole.Client);\r\n    } else {\r\n      const {\r\n        target: { name, value },\r\n      } = event;\r\n      if (name === 'email') {\r\n        setUsername(value);\r\n      } else if (name === 'password') {\r\n        setPassword(value);\r\n      } else if (name === 'passwordConfirm') {\r\n        setPasswordConfirm(value);\r\n      } else if (name === 'name') {\r\n        setName(value);\r\n      } else if (name === 'company') {\r\n        setCompany(value);\r\n      } else if (name === 'team') {\r\n        setTeam(value);\r\n      } else if (name === 'jobTitle') {\r\n        setJobTitle(value);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Sign Up | CEN Portal</title>\r\n      </Helmet>\r\n      <LoginHeader>\r\n        <Logo src={logo} />\r\n      </LoginHeader>\r\n      <Container>\r\n        <Column>\r\n          <FormBox>\r\n            <Form onFinish={onFinish} onFinishFailed={onFinishFailed}>\r\n              <Form.Item\r\n                name=\"role\"\r\n                rules={[\r\n                  { required: true, message: '회원 구분을 선택해주세요' },\r\n                ]}\r\n              >\r\n                <Select\r\n                  placeholder=\"Member Role\"\r\n                  value={role}\r\n                  onChange={onChangeHandler}\r\n                >\r\n                  {/* {Object.keys(UserRole).map((role, index) => (\r\n                    <Select.Option key={index} value={role}>\r\n                      {role}\r\n                    </Select.Option>\r\n                  ))} */}\r\n                  <Select.Option value={UserRole.CEN}>\r\n                    코어엣지네트웍스\r\n                  </Select.Option>\r\n                  <Select.Option value={UserRole.Partner}>파트너</Select.Option>\r\n                  <Select.Option value={UserRole.Client}>고객</Select.Option>\r\n                </Select>\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"email\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    whitespace: true,\r\n                    message: '사용자 계정을 입력하세요',\r\n                  },\r\n                  {\r\n                    pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n                    message: '이메일 형태로 입력해주세요',\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<UserOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Email\"\r\n                  value={email}\r\n                  name=\"email\"\r\n                  type=\"text\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"password\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    whitespace: true,\r\n                    message: '비밀번호를 입력하세요',\r\n                  },\r\n                  { min: 5, message: '비밀번호는 최소 5자리입니다' },\r\n                  { max: 20, message: '비밀번호는 최대 20자리입니다' },\r\n                  {\r\n                    pattern: /^[a-zA-Z0-9_!@#$%^&*()_+-={},./<>?;:'\"]+$/,\r\n                    message: '유효하지 않은 문자를 입력했습니다',\r\n                  },\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  prefix={<LockOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Password\"\r\n                  value={password}\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"passwordConfirm\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: '비밀번호를 재입력 해주세요',\r\n                  },\r\n                  ({ getFieldValue }) => ({\r\n                    validator(rule, value) {\r\n                      if (!value || getFieldValue('password') === value) {\r\n                        return Promise.resolve();\r\n                      }\r\n                      return Promise.reject('비밀번호가 불일치합니다');\r\n                    },\r\n                  }),\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  prefix={<LockOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Confirm Password\"\r\n                  value={passwordConfirm}\r\n                  name=\"passwordConfirm\"\r\n                  type=\"password\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"name\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: '이름을 입력해주세요',\r\n                    whitespace: true,\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<TagOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Name\"\r\n                  value={name}\r\n                  name=\"name\"\r\n                  type=\"text\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"company\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: '회사명을 입력해주세요',\r\n                    whitespace: true,\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={\r\n                    <SnippetsOutlined style={{ color: 'rgba(0,0,0,.25)' }} />\r\n                  }\r\n                  placeholder=\"Company Name\"\r\n                  value={company}\r\n                  name=\"company\"\r\n                  type=\"text\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"team\"\r\n                rules={[\r\n                  {\r\n                    required: false,\r\n                    message: '팀명을 입력해주세요',\r\n                    whitespace: true,\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={\r\n                    <SnippetsOutlined style={{ color: 'rgba(0,0,0,.25)' }} />\r\n                  }\r\n                  placeholder=\"Team Name\"\r\n                  value={team}\r\n                  name=\"team\"\r\n                  type=\"text\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"jobTitle\"\r\n                rules={[\r\n                  {\r\n                    required: false,\r\n                    message: '직함이나 직책을 입력해주세요',\r\n                    whitespace: true,\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={\r\n                    <SnippetsOutlined style={{ color: 'rgba(0,0,0,.25)' }} />\r\n                  }\r\n                  placeholder=\"Job Title\"\r\n                  value={jobTitle}\r\n                  name=\"jobTitle\"\r\n                  type=\"text\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <SButton type=\"primary\" htmlType=\"submit\">\r\n                {!loading ? '회원가입' : <Spin />}\r\n              </SButton>\r\n            </Form>\r\n          </FormBox>\r\n          <SwitchBox>\r\n            이미 사용자 계정이 있으신가요?{' '}\r\n            <SwitchLink>\r\n              <Link to=\"/\">로그인</Link>\r\n            </SwitchLink>\r\n          </SwitchBox>\r\n        </Column>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n","/home/cen/cen-portal-frontend/src/pages/404.tsx",[],"/home/cen/cen-portal-frontend/src/pages/login.tsx",["247","248"],"import { gql, useMutation } from '@apollo/client';\r\nimport React, { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Link } from 'react-router-dom';\r\nimport { authTokenVar, isLoggedInVar } from '../apollo';\r\nimport styled from 'styled-components';\r\nimport { Form, Input, Button, Spin, notification } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport { LOCALSTORAGE_TOKEN } from '../constants';\r\nimport logo from '../images/CoreEdge_logo.png';\r\nimport {\r\n  loginMutation,\r\n  loginMutationVariables,\r\n} from '../__generated__/loginMutation';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: no-repeat url() center center;\r\n  background-color: rgba(21, 20, 13, 0.5);\r\n  background-size: 1920px 640px;\r\n`;\r\n\r\nconst LoginHeader = styled.header`\r\n  padding-left: 5px;\r\n  position: absolute;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100vw;\r\n  height: 60px;\r\n  background-color: rgba(21, 20, 13, 0.5);\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  width: 234px;\r\n  height: 50px;\r\n`;\r\n\r\nconst Box = styled.div`\r\n  margin-left: 100px;\r\n  background-color: white;\r\n  border: 1px solid #e6e6e6;\r\n  text-align: center;\r\n  width: 300px;\r\n`;\r\n\r\nconst Column = styled.div`\r\n  width: 20%;\r\n`;\r\n\r\nconst SwitchBox = styled(Box)`\r\n  padding: 25px 0px;\r\n  margin-top: 15px;\r\n`;\r\n\r\nconst SwitchLink = styled.span`\r\n  color: ${(props) => props.theme.colors.green_1};\r\n  cursor: pointer;\r\n`;\r\n\r\nconst FormBox = styled(Box)`\r\n  padding: 30px;\r\n`;\r\n\r\nconst SButton = styled(Button)`\r\n  width: 100%;\r\n`;\r\n\r\nconst LOGIN_MUTATION = gql`\r\n  mutation loginMutation($loginInput: LoginInput!) {\r\n    login(input: $loginInput) {\r\n      ok\r\n      token\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Login: React.FC = () => {\r\n  const [email, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const onCompleted = (data: loginMutation) => {\r\n    const {\r\n      login: { ok, token, error },\r\n    } = data;\r\n    if (ok && token) {\r\n      localStorage.setItem(LOCALSTORAGE_TOKEN, token);\r\n      authTokenVar(token);\r\n      isLoggedInVar(true);\r\n      notification.success({\r\n        message: 'Success!',\r\n        description: '로그인 성공',\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n    } else if (error) {\r\n      notification.error({\r\n        message: 'Error',\r\n        description: `로그인 실패. ${error}`,\r\n        placement: 'topRight',\r\n        duration: 0,\r\n      });\r\n    }\r\n  };\r\n\r\n  const [loginMutation, { data, loading, error }] = useMutation<\r\n    loginMutation,\r\n    loginMutationVariables\r\n  >(LOGIN_MUTATION, {\r\n    onCompleted,\r\n  });\r\n\r\n  if (error) console.log(error);\r\n\r\n  const onFinish = () => {\r\n    if (!loading) {\r\n      loginMutation({\r\n        variables: {\r\n          loginInput: {\r\n            email,\r\n            password,\r\n          },\r\n        },\r\n      });\r\n      setUsername('');\r\n      setPassword('');\r\n    }\r\n  };\r\n\r\n  const onChangeHandler = (event: any) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n    if (name === 'email') {\r\n      setUsername(value);\r\n    }\r\n    if (name === 'password') {\r\n      setPassword(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Log in | CEN Portal</title>\r\n      </Helmet>\r\n      <LoginHeader>\r\n        <Logo src={logo} />\r\n      </LoginHeader>\r\n      <Container>\r\n        <Column>\r\n          <FormBox>\r\n            <Form onFinish={onFinish}>\r\n              <Form.Item\r\n                name=\"email\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    whitespace: true,\r\n                    message: '사용자 계정을 입력하세요',\r\n                  },\r\n                  {\r\n                    pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n                    message: '이메일 형태로 입력해주세요',\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<UserOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Email\"\r\n                  value={email}\r\n                  name=\"email\"\r\n                  type=\"text\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"password\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    whitespace: true,\r\n                    message: '비밀번호를 입력하세요',\r\n                  },\r\n                  { min: 5, message: '비밀번호는 최소 5자리입니다' },\r\n                  { max: 20, message: '비밀번호는 최대 20자리입니다' },\r\n                  {\r\n                    pattern: /^[a-zA-Z0-9_!@#$%^&*()_+-={},./<>?;:'\"]+$/,\r\n                    message: '유효하지 않은 문자를 입력했습니다',\r\n                  },\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  prefix={<LockOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Password\"\r\n                  value={password}\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  onChange={onChangeHandler}\r\n                />\r\n              </Form.Item>\r\n              <SButton type=\"primary\" htmlType=\"submit\">\r\n                {!loading ? '로그인' : <Spin />}\r\n              </SButton>\r\n            </Form>\r\n          </FormBox>\r\n          <SwitchBox>\r\n            회원가입이 필요하신가요?{' '}\r\n            <SwitchLink>\r\n              <Link to=\"/create-account\">회원가입</Link>\r\n            </SwitchLink>\r\n          </SwitchBox>\r\n        </Column>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n","/home/cen/cen-portal-frontend/src/hooks/useMe.tsx",["249"],"import { gql, useQuery } from '@apollo/client';\r\nimport { meQuery } from '../__generated__/meQuery';\r\n\r\nexport const ME_QUERY = gql`\r\n  query meQuery {\r\n    me {\r\n      id\r\n      email\r\n      role\r\n      name\r\n      company\r\n      team\r\n      jobTitle\r\n      bio\r\n      verified\r\n      isLocked\r\n    }\r\n  }\r\n`;\r\n\r\nexport const useMe = () => {\r\n  return useQuery<meQuery>(ME_QUERY);\r\n};\r\n","/home/cen/cen-portal-frontend/src/pages/home/home.tsx",["250","251","252"],"import React, { useEffect, useState, useRef } from 'react';\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport { Helmet } from 'react-helmet';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport 'codemirror/lib/codemirror.css';\nimport '@toast-ui/editor/dist/toastui-editor.css';\nimport { Editor, Viewer } from '@toast-ui/react-editor';\nimport { Popconfirm, Button, notification } from 'antd';\nimport { HomeOutlined } from '@ant-design/icons';\nimport { useMe } from '../../hooks/useMe';\nimport { Loading } from '../../components/loading';\nimport { UserRole } from '../../__generated__/globalTypes';\nimport { getHomeNoticeQuery } from '../../__generated__/getHomeNoticeQuery';\nimport {\n  createHomeNoticeMutation,\n  createHomeNoticeMutationVariables,\n} from '../../__generated__/createHomeNoticeMutation';\n\nconst Wrapper = styled.div`\n  padding: 20px;\n`;\n\nconst TitleBar = styled.div`\n  font-size: 25px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nconst MenuBar = styled.span`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 8px;\n`;\n\nconst SButton = styled(Button)`\n  margin-left: 8px;\n`;\n\nconst GET_HOMENOTICE_QUERY = gql`\n  query getHomeNoticeQuery {\n    getHomeNotice {\n      ok\n      error\n      notice {\n        id\n        content\n      }\n    }\n  }\n`;\n\nconst CREATE_HOMENOTICE_MUTATION = gql`\n  mutation createHomeNoticeMutation($input: CreateHomeNoticeInput!) {\n    createHomeNotice(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\ninterface IHomeNotice {\n  content: string;\n}\n\nexport const Home: React.FC = () => {\n  const { data: meData } = useMe();\n  const history = useHistory();\n  const [isEdit, setIsEdit] = useState<boolean>(false);\n  const editorRef = React.createRef<any>();\n  const viewerRef = useRef<Viewer>();\n  const [content, setContent] = useState<string>();\n  const {\n    data: homeNoticeData,\n    loading: homeNoticeLoading,\n    refetch,\n  } = useQuery<getHomeNoticeQuery>(GET_HOMENOTICE_QUERY);\n\n  const onCompleted = (data: createHomeNoticeMutation) => {\n    const {\n      createHomeNotice: { ok, error },\n    } = data;\n    if (ok) {\n      notification.success({\n        message: 'Success!',\n        description: '공지 수정 성공',\n        placement: 'topRight',\n        duration: 1,\n      });\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `공지 수정 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    }\n  };\n\n  const [createHomeNoticeMutation, { data }] = useMutation<\n    createHomeNoticeMutation,\n    createHomeNoticeMutationVariables\n  >(CREATE_HOMENOTICE_MUTATION, { onCompleted });\n\n  useEffect(() => {\n    if (viewerRef.current && homeNoticeData) {\n      const notice = homeNoticeData.getHomeNotice.notice as IHomeNotice;\n      notice && setContent(notice.content);\n      viewerRef.current?.getInstance().setMarkdown(content as string);\n    }\n    refetch();\n  }, [homeNoticeData, content]);\n\n  const handleSave = async () => {\n    const getContent = await editorRef.current.getInstance().getMarkdown();\n    setContent(getContent);\n    createHomeNoticeMutation({\n      variables: {\n        input: {\n          content: getContent as string,\n        },\n      },\n    });\n    setIsEdit(!isEdit);\n  };\n\n  const handleCancel = () => {\n    setIsEdit(!isEdit);\n  };\n\n  const handleEdit = () => {\n    setIsEdit(!isEdit);\n  };\n\n  return (\n    <Wrapper>\n      <Helmet>\n        <title>Home | CEN Portal</title>\n      </Helmet>\n      <TitleBar>\n        <HomeOutlined />\n        {' Home'}\n      </TitleBar>\n      <MenuBar>\n        {isEdit ? (\n          <>\n            <Popconfirm title=\"정말 변경 하시겠습니까?\" onConfirm={handleSave}>\n              <SButton type=\"primary\" size=\"small\">\n                Save\n              </SButton>\n            </Popconfirm>\n            <SButton type=\"primary\" size=\"small\" onClick={handleCancel}>\n              Cancel\n            </SButton>\n          </>\n        ) : (\n          <SButton\n            type=\"primary\"\n            size=\"small\"\n            disabled={meData?.me.role !== UserRole.CENSE}\n            onClick={handleEdit}\n          >\n            Edit\n          </SButton>\n        )}\n      </MenuBar>\n      {homeNoticeLoading ? (\n        <Loading />\n      ) : isEdit ? (\n        <Editor\n          previewStyle=\"vertical\"\n          height=\"600px\"\n          initialEditType=\"markdown\"\n          placeholder=\"글쓰기\"\n          ref={editorRef}\n          initialValue={content}\n          language=\"ko-KR\"\n          previewHighlight={false}\n          usageStatistics={false}\n        />\n      ) : (\n        <Viewer\n          initialValue={content}\n          ref={viewerRef as React.MutableRefObject<Viewer>}\n        />\n      )}\n    </Wrapper>\n  );\n};\n","/home/cen/cen-portal-frontend/src/pages/cen/orders/orders.tsx",["253","254","255","256","257","258","259","260"],"/* eslint-disable react/prop-types */\r\n/* eslint-disable react/display-name */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { gql, useMutation, useQuery } from '@apollo/client';\r\nimport {\r\n  Table,\r\n  Popconfirm,\r\n  Form,\r\n  Typography,\r\n  Button,\r\n  notification,\r\n  Radio,\r\n  RadioChangeEvent,\r\n  BackTop,\r\n  Tag,\r\n  Input,\r\n  Select,\r\n} from 'antd';\r\nimport {\r\n  OrderClassification,\r\n  DeliveryType,\r\n  DeliveryMethod,\r\n  OrderStatus,\r\n  UserRole,\r\n} from '../../../__generated__/globalTypes';\r\nimport {\r\n  getOrdersQuery,\r\n  getOrdersQueryVariables,\r\n} from '../../../__generated__/getOrdersQuery';\r\nimport {\r\n  deleteOrderMutation,\r\n  deleteOrderMutationVariables,\r\n} from '../../../__generated__/deleteOrderMutation';\r\nimport {\r\n  editOrderMutation,\r\n  editOrderMutationVariables,\r\n} from '../../../__generated__/editOrderMutation';\r\nimport { FolderOpenOutlined } from '@ant-design/icons';\r\nimport { useMe } from '../../../hooks/useMe';\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst TitleBar = styled.div`\r\n  font-size: 25px;\r\n  font-weight: 700;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst MenuBar = styled.span`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 8px;\r\n`;\r\n\r\nconst SButton = styled(Button)`\r\n  margin-left: 8px;\r\n`;\r\n\r\nconst GET_ORDERS_QUERY = gql`\r\n  query getOrdersQuery($input: GetOrdersInput!) {\r\n    getOrders(input: $input) {\r\n      ok\r\n      error\r\n      totalPages\r\n      totalResults\r\n      orders {\r\n        id\r\n        createAt\r\n        salesPerson\r\n        classification\r\n        projectName\r\n        partner {\r\n          name\r\n        }\r\n        deliveryType\r\n        deliveryMethod\r\n        deliveryDate\r\n        status\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_ORDER_MUTATION = gql`\r\n  mutation deleteOrderMutation($input: DeleteOrderInput!) {\r\n    deleteOrder(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nconst EDIT_ORDER_MUTATION = gql`\r\n  mutation editOrderMutation($input: EditOrderInput!) {\r\n    editOrder(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\ninterface IPartner {\r\n  name: string;\r\n}\r\n\r\ninterface IOrder {\r\n  key?: string;\r\n  no?: number;\r\n  id?: number;\r\n  createAt: string;\r\n  salesPerson: string;\r\n  classification: OrderClassification | string;\r\n  projectName: string | JSX.Element;\r\n  partner?: IPartner | null;\r\n  deliveryType: DeliveryType;\r\n  deliveryMethod: DeliveryMethod;\r\n  deliveryDate: string;\r\n  status: OrderStatus;\r\n}\r\n\r\ninterface EditableCellProps extends React.HTMLAttributes<HTMLElement> {\r\n  editing?: boolean;\r\n  dataIndex: string;\r\n  title: string;\r\n  inputType?: 'select' | 'text';\r\n  record?: IOrder;\r\n  index?: number;\r\n  children?: React.ReactNode;\r\n  width?: string;\r\n  editable?: boolean;\r\n  align?: 'left' | 'center' | 'right' | 'justify' | 'char' | undefined;\r\n  sortDirections?: string[];\r\n  defaultSortOrder?: string;\r\n  sorter?: unknown;\r\n  render?: unknown;\r\n}\r\n\r\nconst EditableCell: React.FC<EditableCellProps> = ({\r\n  editing,\r\n  dataIndex,\r\n  title,\r\n  inputType,\r\n  record,\r\n  index,\r\n  children,\r\n  ...restProps\r\n}) => {\r\n  const { Option } = Select;\r\n  const inputNode =\r\n    inputType === 'select' ? (\r\n      <Select style={{ width: 100 }}>\r\n        <Option value={OrderStatus.Created}>출고요청</Option>\r\n        <Option value={OrderStatus.Pending}>보류</Option>\r\n        <Option value={OrderStatus.Canceled}>취소</Option>\r\n        <Option value={OrderStatus.Preparing}>준비중</Option>\r\n        <Option value={OrderStatus.Partial}>부분출고</Option>\r\n        <Option value={OrderStatus.Completed}>출고완료</Option>\r\n      </Select>\r\n    ) : (\r\n      <Input />\r\n    );\r\n\r\n  return (\r\n    <td {...restProps}>\r\n      {editing ? (\r\n        <Form.Item\r\n          name={dataIndex}\r\n          style={{ margin: 0 }}\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: `Please Input ${title}!`,\r\n            },\r\n          ]}\r\n        >\r\n          {inputNode}\r\n        </Form.Item>\r\n      ) : (\r\n        children\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport const Order = () => {\r\n  const originData: IOrder[] = [];\r\n  const { data: meData } = useMe();\r\n  const [form] = Form.useForm();\r\n  const [editingKey, setEditingKey] = useState('');\r\n  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\r\n  const [data, setData] = useState<IOrder[]>([]);\r\n  const [page, setPage] = useState<number>(1);\r\n  const [take, setTake] = useState<number>(10);\r\n  const [total, setTotal] = useState<number>(0);\r\n  const [status, setStatus] = useState<OrderStatus | null>(null);\r\n  const { data: ordersData, loading, refetch: reGetData } = useQuery<\r\n    getOrdersQuery,\r\n    getOrdersQueryVariables\r\n  >(GET_ORDERS_QUERY, {\r\n    variables: {\r\n      input: {\r\n        page,\r\n        take,\r\n        status,\r\n      },\r\n    },\r\n  });\r\n\r\n  const onDeleteCompleted = (data: deleteOrderMutation) => {\r\n    const {\r\n      deleteOrder: { ok, error },\r\n    } = data;\r\n    if (ok) {\r\n      notification.success({\r\n        message: 'Success!',\r\n        description: '삭제 성공',\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n      setSelectedRowKeys([]);\r\n    } else if (error) {\r\n      notification.error({\r\n        message: 'Error',\r\n        description: `삭제 실패. ${error}`,\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  const onEditCompleted = (data: editOrderMutation) => {\r\n    const {\r\n      editOrder: { ok, error },\r\n    } = data;\r\n    if (ok) {\r\n      notification.success({\r\n        message: 'Success!',\r\n        description: `변경 성공`,\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n    } else if (error) {\r\n      notification.error({\r\n        message: 'Error',\r\n        description: `변경 실패. ${error}`,\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  const [deleteOrderMutation, { data: deleteOrderData }] = useMutation<\r\n    deleteOrderMutation,\r\n    deleteOrderMutationVariables\r\n  >(DELETE_ORDER_MUTATION, {\r\n    onCompleted: onDeleteCompleted,\r\n  });\r\n\r\n  const [editOrderMutation, { data: editOrderData }] = useMutation<\r\n    editOrderMutation,\r\n    editOrderMutationVariables\r\n  >(EDIT_ORDER_MUTATION, {\r\n    onCompleted: onEditCompleted,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (ordersData && !loading) {\r\n      const orders = ordersData.getOrders.orders as IOrder[];\r\n      const getTotal = ordersData.getOrders.totalResults as number;\r\n      for (let i = 0; i < orders.length; i++) {\r\n        originData.push({\r\n          key: `${orders[i].id}`,\r\n          no: 1 + i,\r\n          createAt: new Date(orders[i].createAt).toLocaleDateString(),\r\n          projectName: (\r\n            <Link\r\n              to={`/cen/orders/${orders[i].id}`}\r\n            >{`${orders[i].projectName}`}</Link>\r\n          ),\r\n          classification: `${\r\n            orders[i].classification === OrderClassification.Sale\r\n              ? '판매'\r\n              : orders[i].classification\r\n          }`,\r\n          salesPerson: orders[i].salesPerson,\r\n          deliveryDate: new Date(orders[i].deliveryDate).toLocaleDateString(),\r\n          deliveryMethod: orders[i].deliveryMethod,\r\n          deliveryType: orders[i].deliveryType,\r\n          status: orders[i].status,\r\n        });\r\n      }\r\n      setTotal(getTotal);\r\n      setData(originData);\r\n    }\r\n    reGetData();\r\n  }, [ordersData]);\r\n\r\n  const isEditing = (record: IOrder) => record.key === editingKey;\r\n\r\n  const edit = (record: Partial<IOrder> & { key: React.Key }) => {\r\n    form.setFieldsValue({\r\n      status: '',\r\n      ...record,\r\n    });\r\n    setEditingKey(record.key);\r\n  };\r\n\r\n  const cancel = () => {\r\n    setEditingKey('');\r\n  };\r\n\r\n  const save = async (key: React.Key) => {\r\n    try {\r\n      const row = (await form.validateFields()) as IOrder;\r\n\r\n      const newData = [...data];\r\n      const index = newData?.findIndex((item) => key === item.key);\r\n      if (index > -1) {\r\n        const item = newData[index];\r\n        newData.splice(index, 1, {\r\n          ...item,\r\n          ...row,\r\n        });\r\n        setData(newData);\r\n        setEditingKey('');\r\n        editOrderMutation({\r\n          variables: {\r\n            input: {\r\n              id: +key,\r\n              status: row.status,\r\n            },\r\n          },\r\n        });\r\n      } else {\r\n        newData.push(row);\r\n        setData(newData);\r\n        setEditingKey('');\r\n      }\r\n      reGetData();\r\n    } catch (errInfo) {\r\n      console.log('Validate Failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    console.log('handleAdd');\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    selectedRowKeys.map((key) => {\r\n      deleteOrderMutation({\r\n        variables: { input: { orderId: +key } },\r\n      });\r\n    });\r\n    reGetData();\r\n  };\r\n\r\n  const handleRowDelete = (key: number) => {\r\n    deleteOrderMutation({\r\n      variables: { input: { orderId: +key } },\r\n    });\r\n    reGetData();\r\n  };\r\n\r\n  const handlePageChange = (page: number, take: number) => {\r\n    setPage(page);\r\n    setTake(take);\r\n  };\r\n\r\n  const handleStatusChange = (event: RadioChangeEvent) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setStatus(value);\r\n  };\r\n\r\n  const columns: EditableCellProps[] = [\r\n    {\r\n      title: 'No',\r\n      dataIndex: 'no',\r\n      width: '1%',\r\n      align: 'center',\r\n      sortDirections: ['ascend', 'descend', 'ascend'],\r\n      defaultSortOrder: 'descend',\r\n      sorter: {\r\n        compare: (a: { no: number }, b: { no: number }) => a.no - b.no,\r\n        multiple: 1,\r\n      },\r\n    },\r\n    {\r\n      title: '작성일',\r\n      dataIndex: 'createAt',\r\n      width: '10%',\r\n      align: 'center',\r\n    },\r\n    {\r\n      title: '프로젝트',\r\n      dataIndex: 'projectName',\r\n      width: '20%',\r\n      align: 'center',\r\n    },\r\n    {\r\n      title: '구분',\r\n      dataIndex: 'classification',\r\n      width: '7%',\r\n      align: 'center',\r\n    },\r\n    {\r\n      title: '담당영업',\r\n      dataIndex: 'salesPerson',\r\n      width: '10%',\r\n      align: 'center',\r\n    },\r\n    {\r\n      title: '납품일',\r\n      dataIndex: 'deliveryDate',\r\n      width: '10%',\r\n      align: 'center',\r\n    },\r\n    {\r\n      title: '배송방법',\r\n      dataIndex: 'deliveryMethod',\r\n      width: '10%',\r\n      align: 'center',\r\n      render: (deliveryMethod: DeliveryMethod) => {\r\n        if (deliveryMethod === 'Parcel') return '택배';\r\n        else if (deliveryMethod === 'Quick') return '퀵';\r\n        else if (deliveryMethod === 'Cargo') return '화물';\r\n        else if (deliveryMethod === 'Directly') return '직접전달';\r\n      },\r\n    },\r\n    {\r\n      title: '출고형태',\r\n      dataIndex: 'deliveryType',\r\n      width: '10%',\r\n      align: 'center',\r\n      sortDirections: ['ascend', 'descend', 'ascend'],\r\n      sorter: {\r\n        compare: (a: { deliveryType: string }, b: { deliveryType: string }) =>\r\n          a.deliveryType.localeCompare(b.deliveryType),\r\n        multiple: 2,\r\n      },\r\n      render: (deliveryType: DeliveryType) => {\r\n        let color = '';\r\n        let text = '';\r\n        if (deliveryType === 'Partial') {\r\n          color = 'blue';\r\n          text = '부분출고';\r\n        } else if (deliveryType === 'Total') {\r\n          color = 'geekblue';\r\n          text = '전체출고';\r\n        }\r\n        return (\r\n          <Tag color={color} key={deliveryType}>\r\n            {text}\r\n          </Tag>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: '상태',\r\n      dataIndex: 'status',\r\n      width: '1%',\r\n      editable: true,\r\n      align: 'center',\r\n      render: (status: OrderStatus) => {\r\n        let color = '';\r\n        let text = '';\r\n        if (status === 'Created') {\r\n          color = 'orange';\r\n          text = '출고요청';\r\n        } else if (status === 'Canceled') {\r\n          color = 'red';\r\n          text = '취소됨';\r\n        } else if (status === 'Pending') {\r\n          color = 'volcano';\r\n          text = '보류';\r\n        } else if (status === 'Preparing') {\r\n          color = 'green';\r\n          text = '준비중';\r\n        } else if (status === 'Partial') {\r\n          color = 'blue';\r\n          text = '부분출고';\r\n        } else if (status === 'Completed') {\r\n          color = 'geekblue';\r\n          text = '출고완료';\r\n        }\r\n        return (\r\n          <Tag color={color} key={status}>\r\n            {text}\r\n          </Tag>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: 'Operation',\r\n      dataIndex: 'operation',\r\n      align: 'center',\r\n      width: '1%',\r\n      render: (_: string, record: any) => {\r\n        const editable = isEditing(record);\r\n        return (\r\n          <span>\r\n            {editable ? (\r\n              <>\r\n                <Popconfirm\r\n                  title=\"정말 변경 하시겠습니까?\"\r\n                  onConfirm={() => save(record.key)}\r\n                >\r\n                  <Typography.Link\r\n                    style={{\r\n                      marginRight: 8,\r\n                    }}\r\n                  >\r\n                    Save\r\n                  </Typography.Link>\r\n                </Popconfirm>\r\n                <Typography.Link\r\n                  onClick={cancel}\r\n                  style={{\r\n                    marginRight: 8,\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Typography.Link>\r\n              </>\r\n            ) : (\r\n              <Typography.Link\r\n                onClick={() => edit(record)}\r\n                style={{ marginRight: 8 }}\r\n                disabled={meData?.me.role !== UserRole.CENSE}\r\n              >\r\n                Edit\r\n              </Typography.Link>\r\n            )}\r\n\r\n            <Typography.Link href=\"#!\">\r\n              <Popconfirm\r\n                title=\"정말 삭제 하시겠습니까?\"\r\n                onConfirm={() => handleRowDelete(record.key)}\r\n              >\r\n                Delete\r\n              </Popconfirm>\r\n            </Typography.Link>\r\n          </span>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  const mergedColumns = columns.map((col: any) => {\r\n    if (!col.editable) {\r\n      return col;\r\n    }\r\n    return {\r\n      ...col,\r\n      onCell: (record: IOrder) => ({\r\n        record,\r\n        inputType: col.dataIndex === 'status' ? 'select' : 'text',\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        editing: isEditing(record),\r\n      }),\r\n    };\r\n  });\r\n\r\n  const rowSelection = {\r\n    onChange: (selectedRowKeys: React.Key[], selectedRows: IOrder[]) => {\r\n      setSelectedRowKeys(selectedRowKeys);\r\n      // console.log(\r\n      //   `selectedRowKeys: ${selectedRowKeys}`,\r\n      //   'selectedRows: ',\r\n      //   selectedRows,\r\n      // );\r\n    },\r\n    // getCheckboxProps: (record: IOrder) => ({\r\n    //   disabled: record.name === 'Disabled User',\r\n    //   name: record.name,\r\n    // }),\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Helmet>\r\n        <title>Orders | CEN Portal</title>\r\n      </Helmet>\r\n      <TitleBar>\r\n        <FolderOpenOutlined />\r\n        {' 출고요청서'}\r\n      </TitleBar>\r\n      <MenuBar>\r\n        <Radio.Group\r\n          defaultValue={null}\r\n          size=\"small\"\r\n          onChange={handleStatusChange}\r\n        >\r\n          <Radio.Button value={null}>All</Radio.Button>\r\n          <Radio.Button value={OrderStatus.Created}>출고요청</Radio.Button>\r\n          <Radio.Button value={OrderStatus.Canceled}>출고취소</Radio.Button>\r\n          <Radio.Button value={OrderStatus.Pending}>보류</Radio.Button>\r\n          <Radio.Button value={OrderStatus.Preparing}>준비중</Radio.Button>\r\n          <Radio.Button value={OrderStatus.Partial}>부분출고</Radio.Button>\r\n          <Radio.Button value={OrderStatus.Completed}>출고완료</Radio.Button>\r\n        </Radio.Group>\r\n        <SButton type=\"primary\" size=\"small\" onClick={() => handleAdd()}>\r\n          <Link to=\"/cen/orders/add-order\">Add</Link>\r\n        </SButton>\r\n        <SButton type=\"primary\" size=\"small\">\r\n          <Popconfirm\r\n            title=\"정말 삭제 하시겠습니까?\"\r\n            onConfirm={() => handleDelete()}\r\n          >\r\n            Delete\r\n          </Popconfirm>\r\n        </SButton>\r\n      </MenuBar>\r\n      <Form form={form} component={false}>\r\n        <Table<IOrder>\r\n          components={{\r\n            body: {\r\n              cell: EditableCell,\r\n            },\r\n          }}\r\n          bordered\r\n          rowSelection={rowSelection}\r\n          dataSource={data}\r\n          columns={mergedColumns}\r\n          pagination={{\r\n            total,\r\n            showTotal: (total, range) =>\r\n              `${range[0]}-${range[1]} of ${total} items`,\r\n            onChange: (page, take) => handlePageChange(page, take as number),\r\n            showSizeChanger: true,\r\n          }}\r\n          loading={loading}\r\n          size=\"small\"\r\n        />\r\n      </Form>\r\n      <BackTop style={{ right: 10, bottom: 10 }} />\r\n    </Wrapper>\r\n  );\r\n};\r\n","/home/cen/cen-portal-frontend/src/pages/cen/orders/orderSerial.tsx",["261","262","263","264","265","266","267","268","269","270","271"],"/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useHistory, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport {\n  Table,\n  Button,\n  Form,\n  BackTop,\n  Input,\n  Popconfirm,\n  notification,\n} from 'antd';\nimport {\n  getOrderItemsQuery,\n  getOrderItemsQueryVariables,\n} from '../../../__generated__/getOrderItemsQuery';\nimport {\n  editItemInfoMutation,\n  editItemInfoMutationVariables,\n} from '../../../__generated__/editItemInfoMutation';\nimport { FolderOpenOutlined } from '@ant-design/icons';\nimport { useMe } from '../../../hooks/useMe';\n\nconst Wrapper = styled.div`\n  padding: 20px;\n`;\n\nconst TitleBar = styled.div`\n  font-size: 25px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nconst MenuBar = styled.span`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 8px;\n`;\n\nconst SButton = styled(Button)`\n  margin-left: 8px;\n`;\n\nconst GET_ORDERITEMS_QUERY = gql`\n  query getOrderItemsQuery($input: GetOrderItemsInput!) {\n    getOrderItems(input: $input) {\n      ok\n      error\n      totalPages\n      totalResults\n      itemInfos {\n        id\n        name\n        serialNumber\n      }\n    }\n  }\n`;\n\nconst EDIT_ITEMINFO_MUTATION = gql`\n  mutation editItemInfoMutation($input: EditItemInfoInput!) {\n    editItemInfo(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\n// const EditableContext = React.createContext<FormInstance<any> | null>(null);\n\ninterface IItemInfo {\n  key?: string;\n  no?: number;\n  id?: number;\n  name: string;\n  serialNumber: string | null;\n}\n\n////////////////////////////////////////////////////////////\n// interface EditableRowProps {\n//   index: number;\n// }\n\n// const EditableRow: React.FC<EditableRowProps> = ({ index, ...props }) => {\n//   const [form] = Form.useForm();\n//   return (\n//     <Form form={form} component={false}>\n//       <EditableContext.Provider value={form}>\n//         <tr {...props} />\n//       </EditableContext.Provider>\n//     </Form>\n//   );\n// };\n\ninterface EditableCellProps extends React.HTMLAttributes<HTMLElement> {\n  editing?: boolean;\n  dataIndex: string;\n  title: string;\n  inputType?: 'number' | 'text';\n  record: IItemInfo;\n  index?: number;\n  children?: React.ReactNode;\n  width?: string;\n  editable?: boolean;\n  align?: 'left' | 'center' | 'right' | 'justify' | 'char' | undefined;\n  sortDirections?: string[];\n  defaultSortOrder?: string;\n  sorter?: unknown;\n  render?: unknown;\n}\n\ntype EditableTableProps = Parameters<typeof Table>[0];\n\n// interface DataType {\n//   id: number;\n//   name: string;\n//   serialNumber: string | null;\n// }\n\n// interface EditableTableState {\n//   dataSource: DataType[];\n//   count: number;\n// }\n\ntype ColumnTypes = Exclude<EditableTableProps['columns'], undefined>;\n\n////////////////////////////////////////////////////////////////\n\nexport const OrderSerial: React.FC = () => {\n  const { data: meData } = useMe();\n  const [form] = Form.useForm();\n  const orderId: any = useParams();\n  const [data, setData] = useState<IItemInfo[]>([]);\n  const originData: IItemInfo[] = [];\n  const [page, setPage] = useState<number>(1);\n  const [take, setTake] = useState<number>(10);\n  const [total, setTotal] = useState<number>(0);\n  const [isEdit, setIsEdit] = useState<boolean>(false);\n  const history = useHistory();\n\n  const { data: orderItemData, loading: orderItemLoading, refetch } = useQuery<\n    getOrderItemsQuery,\n    getOrderItemsQueryVariables\n  >(GET_ORDERITEMS_QUERY, {\n    variables: {\n      input: {\n        orderId: +orderId.id,\n        page,\n        take,\n      },\n    },\n  });\n\n  const onCompleted = (data: editItemInfoMutation) => {\n    const {\n      editItemInfo: { ok, error },\n    } = data;\n\n    if (ok) {\n      notification.success({\n        message: 'Success!',\n        description: `변경 성공`,\n        placement: 'topRight',\n        duration: 1,\n      });\n      refetch();\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `변경 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    }\n  };\n\n  const [editItemInfoMutation, { data: editItemInfoData }] = useMutation<\n    editItemInfoMutation,\n    editItemInfoMutationVariables\n  >(EDIT_ITEMINFO_MUTATION, {\n    onCompleted,\n  });\n\n  const EditableCell: React.FC<EditableCellProps> = ({\n    editing,\n    dataIndex,\n    title,\n    inputType,\n    record,\n    index,\n    children,\n    ...restProps\n  }) => {\n    return (\n      <td {...restProps}>\n        {editing ? (\n          <Form.Item key={record.key} name={record.key} style={{ margin: 0 }}>\n            <Input\n              onChange={handleChange}\n              defaultValue={\n                record.serialNumber ? record.serialNumber : undefined\n              }\n            />\n          </Form.Item>\n        ) : (\n          children\n        )}\n      </td>\n    );\n  };\n\n  useEffect(() => {\n    if (orderItemData && !orderItemLoading) {\n      const itemInfos = orderItemData.getOrderItems.itemInfos as IItemInfo[];\n      const getTotalPages = orderItemData.getOrderItems.totalPages as number;\n      const getTotalResults = orderItemData.getOrderItems\n        .totalResults as number;\n      for (let i = 0; i < itemInfos.length; i++) {\n        originData.push({\n          key: `${itemInfos[i].id}`,\n          no: i + 1 + (page - 1) * take,\n          name: itemInfos[i].name,\n          serialNumber: itemInfos[i].serialNumber,\n        });\n      }\n      setTotal(getTotalResults);\n      setData(originData);\n    }\n    refetch();\n  }, [orderItemData]);\n\n  const handleChange = (e: any) => {\n    console.log(e);\n  };\n\n  const handleCancel = () => {\n    setIsEdit(!isEdit);\n  };\n\n  const handleEdit = () => {\n    setIsEdit(!isEdit);\n  };\n\n  const handleSave = async () => {\n    try {\n      const row = await form.validateFields();\n      for (const item in row) {\n        if (typeof row[item] === 'string') {\n          editItemInfoMutation({\n            variables: {\n              input: {\n                itemInfoId: +item,\n                serialNumber: row[item],\n              },\n            },\n          });\n        }\n      }\n\n      setIsEdit(!isEdit);\n      refetch();\n    } catch (errInfo) {\n      console.log('Validate Failed:', errInfo);\n    }\n  };\n\n  const handlePageChange = (page: number, take: number) => {\n    setPage(page);\n    setTake(take);\n  };\n\n  const columns: (ColumnTypes[number] & {\n    editable?: boolean;\n    dataIndex: string;\n  })[] = [\n    {\n      title: 'No',\n      dataIndex: 'no',\n      align: 'center',\n      width: '1%',\n    },\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      align: 'center',\n      width: '50%',\n    },\n    {\n      title: 'Serial Number',\n      dataIndex: 'serialNumber',\n      align: 'center',\n      editable: true,\n    },\n  ];\n\n  const mergedColumns = columns.map((col: any) => {\n    if (!col.editable) {\n      return col;\n    }\n    return {\n      ...col,\n      onCell: (record: IItemInfo) => ({\n        record,\n        inputType: 'text',\n        editable: col.editable,\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEdit,\n      }),\n    };\n  });\n\n  return (\n    <Wrapper>\n      <Helmet>\n        <title>Orders | CEN Portal</title>\n      </Helmet>\n      <TitleBar>\n        <FolderOpenOutlined />\n        {' 시리얼 넘버'}\n      </TitleBar>\n      <MenuBar>\n        {isEdit ? (\n          <>\n            <Popconfirm title=\"정말 변경 하시겠습니까?\" onConfirm={handleSave}>\n              <SButton type=\"primary\" size=\"small\">\n                Save\n              </SButton>\n            </Popconfirm>\n            <SButton type=\"primary\" size=\"small\" onClick={handleCancel}>\n              Cancel\n            </SButton>\n          </>\n        ) : (\n          <SButton type=\"primary\" size=\"small\" onClick={() => handleEdit()}>\n            Edit\n          </SButton>\n        )}\n\n        <SButton\n          type=\"primary\"\n          size=\"small\"\n          disabled={isEdit}\n          onClick={() => history.goBack()}\n        >\n          Back\n        </SButton>\n      </MenuBar>\n      <Form form={form} component={false}>\n        <Table<any>\n          components={{\n            body: {\n              cell: EditableCell,\n            },\n          }}\n          bordered\n          dataSource={data}\n          columns={mergedColumns as ColumnTypes}\n          rowClassName={() => 'editable-row'}\n          pagination={{\n            total,\n            showTotal: (total, range) =>\n              `${range[0]}-${range[1]} of ${total} items`,\n            onChange: (page, take) => handlePageChange(page, take as number),\n            showSizeChanger: true,\n          }}\n          loading={orderItemLoading}\n          size=\"small\"\n        />\n      </Form>\n      <BackTop style={{ right: 10, bottom: 10 }} />\n    </Wrapper>\n  );\n};\n","/home/cen/cen-portal-frontend/src/pages/cen/orders/orderDetail.tsx",["272","273","274","275","276","277","278","279","280"],"import React, { useState, useEffect, SetStateAction } from 'react';\r\nimport { ColumnsType } from 'antd/es/table';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { gql, useMutation, useQuery } from '@apollo/client';\r\nimport { Table, Button, Descriptions, Badge } from 'antd';\r\nimport {\r\n  getOrderQuery,\r\n  getOrderQueryVariables,\r\n} from '../../../__generated__/getOrderQuery';\r\nimport { FolderOpenOutlined } from '@ant-design/icons';\r\nimport { Loading } from '../../../components/loading';\r\nimport {\r\n  DeliveryMethod,\r\n  DeliveryType,\r\n  OrderClassification,\r\n  OrderStatus,\r\n} from '../../../__generated__/globalTypes';\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst TitleBar = styled.div`\r\n  font-size: 25px;\r\n  font-weight: 700;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst MenuBar = styled.span`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 8px;\r\n`;\r\n\r\nconst SButton = styled(Button)`\r\n  margin-left: 8px;\r\n`;\r\n\r\nconst GET_ORDER_QUERY = gql`\r\n  query getOrderQuery($input: GetOrderInput!) {\r\n    getOrder(input: $input) {\r\n      ok\r\n      error\r\n      order {\r\n        id\r\n        createAt\r\n        updateAt\r\n        writer {\r\n          name\r\n        }\r\n        salesPerson\r\n        projectName\r\n        classification\r\n        demoReturnDate\r\n        orderSheet\r\n        partner {\r\n          name\r\n        }\r\n        destination\r\n        receiver\r\n        contact\r\n        address\r\n        deliveryDate\r\n        deliveryType\r\n        deliveryMethod\r\n        remark\r\n        items {\r\n          bundle {\r\n            name\r\n          }\r\n          num\r\n        }\r\n        status\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\ninterface IUser {\r\n  name: string;\r\n}\r\n\r\ninterface IPartner {\r\n  name: string;\r\n}\r\n\r\ninterface IBundle {\r\n  name: string;\r\n}\r\n\r\ninterface IOrderItem {\r\n  bundle: IBundle | null;\r\n  num: number;\r\n}\r\n\r\ninterface IOrder {\r\n  id: number;\r\n  createAt: any;\r\n  updateAt: any;\r\n  writer: IUser | null;\r\n  salesPerson: string;\r\n  projectName: string;\r\n  classification: OrderClassification;\r\n  demoReturnDate: any | null;\r\n  orderSheet: boolean;\r\n  partner: IPartner | null;\r\n  destination: string;\r\n  receiver: string;\r\n  contact: string;\r\n  address: string;\r\n  deliveryDate: any;\r\n  deliveryType: DeliveryType;\r\n  deliveryMethod: DeliveryMethod;\r\n  remark: string | null;\r\n  items: IOrderItem[];\r\n  status: OrderStatus;\r\n}\r\n\r\ninterface IOrderItemData {\r\n  key: number;\r\n  no: number;\r\n  name: string | undefined;\r\n  num: number;\r\n}\r\n\r\nexport const OrderDetail: React.FC = () => {\r\n  const originData: IOrderItemData[] = [];\r\n  const history = useHistory();\r\n  const orderId: any = useParams();\r\n  const [order, setOrder] = useState<IOrder>();\r\n  const [data, setData] = useState<IOrderItemData[]>([]);\r\n  const [orderText, setOrderText] = useState('');\r\n  const [orderColor, setOrderColor] = useState('');\r\n\r\n  const { data: orderData, loading, refetch } = useQuery<\r\n    getOrderQuery,\r\n    getOrderQueryVariables\r\n  >(GET_ORDER_QUERY, {\r\n    variables: {\r\n      input: {\r\n        id: +orderId.id,\r\n      },\r\n    },\r\n  });\r\n\r\n  const columns: ColumnsType<any> = [\r\n    {\r\n      title: 'No',\r\n      dataIndex: 'no',\r\n      width: '10%',\r\n      align: 'center',\r\n    },\r\n    {\r\n      title: '제품명',\r\n      dataIndex: 'name',\r\n      width: '70%',\r\n      align: 'center',\r\n    },\r\n    {\r\n      title: '수량',\r\n      dataIndex: 'num',\r\n      width: '20%',\r\n      align: 'center',\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (orderData && !loading) {\r\n      const orderInfo = orderData.getOrder.order as IOrder;\r\n      setOrder(orderInfo);\r\n      const orderItems = orderInfo.items as IOrderItem[];\r\n      for (let i = 0; i < orderItems.length; i++) {\r\n        originData.push({\r\n          key: i + 1,\r\n          no: i + 1,\r\n          name: orderItems[i].bundle?.name,\r\n          num: orderItems[i].num,\r\n        });\r\n      }\r\n      setData(originData);\r\n      if (orderInfo.status === OrderStatus.Created) {\r\n        setOrderText('출고요청');\r\n        setOrderColor('orange');\r\n      } else if (orderInfo.status === OrderStatus.Canceled) {\r\n        setOrderText('취소됨');\r\n        setOrderColor('red');\r\n      } else if (orderInfo.status === OrderStatus.Pending) {\r\n        setOrderText('보류');\r\n        setOrderColor('volcano');\r\n      } else if (orderInfo.status === OrderStatus.Preparing) {\r\n        setOrderText('준비중');\r\n        setOrderColor('green');\r\n      } else if (orderInfo.status === OrderStatus.Partial) {\r\n        setOrderText('부분출고');\r\n        setOrderColor('blue');\r\n      } else if (orderInfo.status === OrderStatus.Completed) {\r\n        setOrderText('출고완료');\r\n        setOrderColor('geekblue');\r\n      }\r\n    }\r\n    refetch();\r\n  }, [orderData]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Helmet>\r\n        <title>Orders | CEN Portal</title>\r\n      </Helmet>\r\n      <TitleBar>\r\n        <FolderOpenOutlined />\r\n        {` 출고요청서`}\r\n      </TitleBar>\r\n      <MenuBar>\r\n        <SButton type=\"primary\" size=\"small\">\r\n          <Link to={`/cen/orders/${orderId.id}/serial-number`}>\r\n            Serial Number\r\n          </Link>\r\n        </SButton>\r\n        <SButton type=\"primary\" size=\"small\" onClick={() => history.goBack()}>\r\n          Back\r\n        </SButton>\r\n      </MenuBar>\r\n      {loading ? (\r\n        <Loading />\r\n      ) : (\r\n        <>\r\n          <Descriptions\r\n            title={`${order?.projectName}`}\r\n            bordered\r\n            size=\"small\"\r\n            labelStyle={{ backgroundColor: '#F0F2F5' }}\r\n          >\r\n            <Descriptions.Item label=\"작성일\">\r\n              {new Date(order?.createAt).toLocaleDateString()}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"담당영업\">\r\n              {order?.salesPerson}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"작성자\">\r\n              {order?.writer?.name}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"프로젝트명\" span={2}>\r\n              {order?.projectName}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"상태\">\r\n              <Badge color={orderColor} text={orderText} />\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"구분\">\r\n              {order?.classification === OrderClassification.Sale\r\n                ? '판매'\r\n                : order?.classification === OrderClassification.Demo\r\n                ? '데모'\r\n                : `${order?.classification}`}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"Demo 회수일자\">\r\n              {new Date(`${order?.demoReturnDate}`).toLocaleDateString()}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"발주서 접수\">\r\n              {order?.orderSheet === true ? 'O' : 'X'}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"거래처\">\r\n              {order?.partner?.name}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"납품처\">\r\n              {order?.destination}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"납품일\">\r\n              {new Date(order?.deliveryDate).toLocaleDateString()}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"출고형태\" span={2}>\r\n              {order?.deliveryType === DeliveryType.Total\r\n                ? '전체출고'\r\n                : '부분출고'}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"배송방법\">\r\n              {order?.deliveryMethod === DeliveryMethod.Parcel\r\n                ? '택배'\r\n                : order?.deliveryMethod === DeliveryMethod.Cargo\r\n                ? '화물'\r\n                : order?.deliveryMethod === DeliveryMethod.Quick\r\n                ? '퀵'\r\n                : '직접배송'}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"수령자\" span={2}>\r\n              {order?.receiver}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"연락처\">\r\n              {order?.contact}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"납품장소\" span={3}>\r\n              {order?.address}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"요청사항\" span={3}>\r\n              {order?.remark}\r\n            </Descriptions.Item>\r\n          </Descriptions>\r\n          <Descriptions layout=\"vertical\" bordered size=\"small\">\r\n            <Descriptions.Item\r\n              label=\"출고제품\"\r\n              style={{ backgroundColor: '#F0F2F5' }}\r\n            >\r\n              <Table<any>\r\n                columns={columns}\r\n                dataSource={data}\r\n                pagination={false}\r\n                size=\"small\"\r\n              />\r\n            </Descriptions.Item>\r\n          </Descriptions>\r\n        </>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\n","/home/cen/cen-portal-frontend/src/pages/cen/partners/partners.tsx",["281","282","283","284","285","286","287","288","289","290"],"/* eslint-disable react/prop-types */\r\n/* eslint-disable react/display-name */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { gql, useMutation } from '@apollo/client';\r\nimport {\r\n  Table,\r\n  Popconfirm,\r\n  Form,\r\n  Typography,\r\n  Button,\r\n  notification,\r\n  BackTop,\r\n  Input,\r\n} from 'antd';\r\nimport { FolderOpenOutlined } from '@ant-design/icons';\r\nimport { useMe } from '../../../hooks/useMe';\r\nimport { useAllPartners } from '../../../hooks/useAllPartners';\r\nimport {\r\n  deletePartnerMutation,\r\n  deletePartnerMutationVariables,\r\n} from '../../../__generated__/deletePartnerMutation';\r\nimport {\r\n  editPartnerMutation,\r\n  editPartnerMutationVariables,\r\n} from '../../../__generated__/editPartnerMutation';\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst TitleBar = styled.div`\r\n  font-size: 25px;\r\n  font-weight: 700;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst MenuBar = styled.span`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 8px;\r\n`;\r\n\r\nconst SButton = styled(Button)`\r\n  margin-left: 8px;\r\n`;\r\n\r\nconst DELETE_PARTNER_MUTATION = gql`\r\n  mutation deletePartnerMutation($input: DeletePartnerInput!) {\r\n    deletePartner(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nconst EDIT_PARTNER_MUTATION = gql`\r\n  mutation editPartnerMutation($input: EditPartnerInput!) {\r\n    editPartner(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\ninterface IPartner {\r\n  key?: string;\r\n  no?: number;\r\n  id?: number;\r\n  name: string | JSX.Element;\r\n  address: string;\r\n  zip: string;\r\n  tel: string;\r\n  contactsCount: number;\r\n}\r\n\r\ninterface EditableCellProps extends React.HTMLAttributes<HTMLElement> {\r\n  editing?: boolean;\r\n  dataIndex: string;\r\n  title: string;\r\n  inputType?: 'number' | 'text';\r\n  record?: IPartner;\r\n  index?: number;\r\n  children?: React.ReactNode;\r\n  width?: string;\r\n  editable?: boolean;\r\n  align?: 'left' | 'center' | 'right' | 'justify' | 'char' | undefined;\r\n  sortDirections?: string[];\r\n  defaultSortOrder?: string;\r\n  sorter?: unknown;\r\n  render?: unknown;\r\n}\r\n\r\nconst EditableCell: React.FC<EditableCellProps> = ({\r\n  editing,\r\n  dataIndex,\r\n  title,\r\n  inputType,\r\n  record,\r\n  index,\r\n  children,\r\n  ...restProps\r\n}) => {\r\n  return (\r\n    <td {...restProps}>\r\n      {editing ? (\r\n        <Form.Item\r\n          name={dataIndex}\r\n          style={{ margin: 0 }}\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: `Please Input ${title}!`,\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n      ) : (\r\n        children\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport const Partner = () => {\r\n  const originData: IPartner[] = [];\r\n  const [form] = Form.useForm();\r\n  const [editingKey, setEditingKey] = useState('');\r\n  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\r\n  const [data, setData] = useState<IPartner[]>([]);\r\n  const [page, setPage] = useState<number>(1);\r\n  const [take, setTake] = useState<number>(10);\r\n  const [total, setTotal] = useState<number>(0);\r\n  const { data: meData } = useMe();\r\n  const {\r\n    data: allPartnersData,\r\n    loading: allPartnersLoading,\r\n    refetch: reGetData,\r\n  } = useAllPartners(page, take);\r\n\r\n  const onDeleteCompleted = (data: deletePartnerMutation) => {\r\n    const {\r\n      deletePartner: { ok, error },\r\n    } = data;\r\n    if (ok) {\r\n      notification.success({\r\n        message: 'Success!',\r\n        description: '삭제 성공',\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n      setSelectedRowKeys([]);\r\n    } else if (error) {\r\n      notification.error({\r\n        message: 'Error',\r\n        description: `삭제 실패. ${error}`,\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  const onEditCompleted = (data: editPartnerMutation) => {\r\n    const {\r\n      editPartner: { ok, error },\r\n    } = data;\r\n    if (ok) {\r\n      notification.success({\r\n        message: 'Success!',\r\n        description: `변경 성공`,\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n    } else if (error) {\r\n      notification.error({\r\n        message: 'Error',\r\n        description: `변경 실패. ${error}`,\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  const [deletePartnerMutation, { data: deletePartnerData }] = useMutation<\r\n    deletePartnerMutation,\r\n    deletePartnerMutationVariables\r\n  >(DELETE_PARTNER_MUTATION, {\r\n    onCompleted: onDeleteCompleted,\r\n  });\r\n\r\n  const [editPartnerMutation, { data: editPartnerData }] = useMutation<\r\n    editPartnerMutation,\r\n    editPartnerMutationVariables\r\n  >(EDIT_PARTNER_MUTATION, {\r\n    onCompleted: onEditCompleted,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (allPartnersData && !allPartnersLoading) {\r\n      const partners = allPartnersData.allPartners.partners as IPartner[];\r\n      const getTotalPages = allPartnersData.allPartners.totalPages as number;\r\n      const getTotalResults = allPartnersData.allPartners\r\n        .totalResults as number;\r\n      for (let i = 0; i < partners.length; i++) {\r\n        originData.push({\r\n          key: `${partners[i].id}`,\r\n          // no: i + 1 + (getTotalPages - page) * (getTotalResults % take),\r\n          no: (getTotalPages - page) * take + (getTotalResults % take) - i,\r\n          name: (\r\n            <Link\r\n              to={`/cen/partners/${partners[i].id}`}\r\n            >{`${partners[i].name}`}</Link>\r\n          ),\r\n          address: partners[i].address,\r\n          zip: partners[i].zip,\r\n          tel: partners[i].tel,\r\n          contactsCount: partners[i].contactsCount,\r\n        });\r\n      }\r\n      setTotal(getTotalResults);\r\n      setData(originData);\r\n    }\r\n    reGetData();\r\n  }, [allPartnersData]);\r\n\r\n  const isEditing = (record: IPartner) => record.key === editingKey;\r\n\r\n  const edit = (record: Partial<IPartner> & { key: React.Key }) => {\r\n    form.setFieldsValue({\r\n      status: '',\r\n      ...record,\r\n    });\r\n    setEditingKey(record.key);\r\n  };\r\n\r\n  const cancel = () => {\r\n    setEditingKey('');\r\n  };\r\n\r\n  const save = async (key: React.Key) => {\r\n    try {\r\n      const row = (await form.validateFields()) as IPartner;\r\n\r\n      const newData = [...data];\r\n      const index = newData?.findIndex((item) => key === item.key);\r\n      if (index > -1) {\r\n        const item = newData[index];\r\n        newData.splice(index, 1, {\r\n          ...item,\r\n          ...row,\r\n        });\r\n        setData(newData);\r\n        setEditingKey('');\r\n        editPartnerMutation({\r\n          variables: {\r\n            input: {\r\n              partnerId: +key,\r\n              address: row.address,\r\n              zip: row.zip,\r\n              tel: row.tel,\r\n            },\r\n          },\r\n        });\r\n      } else {\r\n        newData.push(row);\r\n        setData(newData);\r\n        setEditingKey('');\r\n      }\r\n      reGetData();\r\n    } catch (errInfo) {\r\n      console.log('Validate Failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    selectedRowKeys.map((key) => {\r\n      deletePartnerMutation({\r\n        variables: { input: { partnerId: +key } },\r\n      });\r\n    });\r\n    reGetData();\r\n  };\r\n\r\n  const handleRowDelete = (key: number) => {\r\n    deletePartnerMutation({\r\n      variables: { input: { partnerId: +key } },\r\n    });\r\n    reGetData();\r\n  };\r\n\r\n  const handlePageChange = (page: number, take: number) => {\r\n    setPage(page);\r\n    setTake(take);\r\n  };\r\n\r\n  const columns: EditableCellProps[] = [\r\n    {\r\n      title: 'No',\r\n      dataIndex: 'no',\r\n      width: '1%',\r\n      align: 'center',\r\n      sortDirections: ['ascend', 'descend', 'ascend'],\r\n      defaultSortOrder: 'descend',\r\n      sorter: {\r\n        compare: (a: { no: number }, b: { no: number }) => a.no - b.no,\r\n        multiple: 1,\r\n      },\r\n    },\r\n    {\r\n      title: '회사명',\r\n      dataIndex: 'name',\r\n      width: '20%',\r\n      align: 'center',\r\n    },\r\n    {\r\n      title: '주소',\r\n      dataIndex: 'address',\r\n      align: 'center',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: '우편번호',\r\n      dataIndex: 'zip',\r\n      width: '10%',\r\n      align: 'center',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: '회사번호',\r\n      dataIndex: 'tel',\r\n      width: '12%',\r\n      align: 'center',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: '연락처 수',\r\n      dataIndex: 'contactsCount',\r\n      width: '9%',\r\n      align: 'center',\r\n    },\r\n    {\r\n      title: 'Operation',\r\n      dataIndex: 'operation',\r\n      align: 'center',\r\n      width: '1%',\r\n      render: (_: string, record: any) => {\r\n        const editable = isEditing(record);\r\n        return (\r\n          <span>\r\n            {editable ? (\r\n              <>\r\n                <Popconfirm\r\n                  title=\"정말 변경 하시겠습니까?\"\r\n                  onConfirm={() => save(record.key)}\r\n                >\r\n                  <Typography.Link\r\n                    style={{\r\n                      marginRight: 8,\r\n                    }}\r\n                  >\r\n                    Save\r\n                  </Typography.Link>\r\n                </Popconfirm>\r\n                <Typography.Link\r\n                  onClick={cancel}\r\n                  style={{\r\n                    marginRight: 8,\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Typography.Link>\r\n              </>\r\n            ) : (\r\n              <Typography.Link\r\n                onClick={() => edit(record)}\r\n                style={{ marginRight: 8 }}\r\n              >\r\n                Edit\r\n              </Typography.Link>\r\n            )}\r\n\r\n            <Typography.Link href=\"#!\">\r\n              <Popconfirm\r\n                title=\"정말 삭제 하시겠습니까?\"\r\n                onConfirm={() => handleRowDelete(record.key)}\r\n              >\r\n                Delete\r\n              </Popconfirm>\r\n            </Typography.Link>\r\n          </span>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  const mergedColumns = columns.map((col: any) => {\r\n    if (!col.editable) {\r\n      return col;\r\n    }\r\n    return {\r\n      ...col,\r\n      onCell: (record: IPartner) => ({\r\n        record,\r\n        inputType: 'text',\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        editing: isEditing(record),\r\n      }),\r\n    };\r\n  });\r\n\r\n  const rowSelection = {\r\n    onChange: (selectedRowKeys: React.Key[], selectedRows: IPartner[]) => {\r\n      setSelectedRowKeys(selectedRowKeys);\r\n      // console.log(\r\n      //   `selectedRowKeys: ${selectedRowKeys}`,\r\n      //   'selectedRows: ',\r\n      //   selectedRows,\r\n      // );\r\n    },\r\n    // getCheckboxProps: (record: IPartner) => ({\r\n    //   disabled: record.name === 'Disabled User',\r\n    //   name: record.name,\r\n    // }),\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Helmet>\r\n        <title>Partners | CEN Portal</title>\r\n      </Helmet>\r\n      <TitleBar>\r\n        <FolderOpenOutlined />\r\n        {' 파트너'}\r\n      </TitleBar>\r\n      <MenuBar>\r\n        <SButton type=\"primary\" size=\"small\">\r\n          <Link to=\"/cen/partners/add-partner\">Add</Link>\r\n        </SButton>\r\n        <SButton type=\"primary\" size=\"small\">\r\n          <Popconfirm\r\n            title=\"정말 삭제 하시겠습니까?\"\r\n            onConfirm={() => handleDelete()}\r\n          >\r\n            Delete\r\n          </Popconfirm>\r\n        </SButton>\r\n      </MenuBar>\r\n      <Form form={form} component={false}>\r\n        <Table<IPartner>\r\n          components={{\r\n            body: {\r\n              cell: EditableCell,\r\n            },\r\n          }}\r\n          bordered\r\n          rowSelection={rowSelection}\r\n          dataSource={data}\r\n          columns={mergedColumns}\r\n          pagination={{\r\n            total,\r\n            showTotal: (total, range) =>\r\n              `${range[0]}-${range[1]} of ${total} items`,\r\n            onChange: (page, take) => handlePageChange(page, take as number),\r\n            showSizeChanger: true,\r\n          }}\r\n          loading={allPartnersLoading}\r\n          size=\"small\"\r\n        />\r\n      </Form>\r\n      <BackTop style={{ right: 10, bottom: 10 }} />\r\n    </Wrapper>\r\n  );\r\n};\r\n","/home/cen/cen-portal-frontend/src/pages/cen/orders/addOrder.tsx",["291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311"],"import React, { useState, useEffect } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { gql, useMutation } from '@apollo/client';\r\nimport {\r\n  Popconfirm,\r\n  Form,\r\n  Button,\r\n  notification,\r\n  Input,\r\n  InputNumber,\r\n  Space,\r\n  Select,\r\n  Tooltip,\r\n  Descriptions,\r\n  Badge,\r\n  Checkbox,\r\n  DatePicker,\r\n  Divider,\r\n  TreeSelect,\r\n} from 'antd';\r\nimport {\r\n  FolderOpenOutlined,\r\n  MinusCircleOutlined,\r\n  PlusOutlined,\r\n  QuestionCircleOutlined,\r\n} from '@ant-design/icons';\r\nimport {\r\n  createOrderMutation,\r\n  createOrderMutationVariables,\r\n} from '../../../__generated__/createOrderMutation';\r\nimport {\r\n  DeliveryMethod,\r\n  DeliveryType,\r\n  OrderClassification,\r\n  OrderStatus,\r\n} from '../../../__generated__/globalTypes';\r\nimport { useMe } from '../../../hooks/useMe';\r\nimport { useAllBundles } from '../../../hooks/useAllBundles';\r\nimport { useAllPartners } from '../../../hooks/useAllPartners';\r\nimport { Loading } from '../../../components/loading';\r\nimport { TreeNode } from 'rc-tree-select';\r\n\r\nconst { Option } = Select;\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst TitleBar = styled.div`\r\n  font-size: 25px;\r\n  font-weight: 700;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst FormColumn = styled.div`\r\n  margin-top: 40px;\r\n`;\r\n\r\nconst ItemList = styled.div`\r\n  background-color: #ffffff;\r\n  padding: 20px;\r\n`;\r\n\r\nconst ButtonColumn = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 10px;\r\n`;\r\n\r\nconst CREATE_ORDER_MUTATION = gql`\r\n  mutation createOrderMutation($input: CreateOrderInput!) {\r\n    createOrder(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\ninterface IPartner {\r\n  id: number;\r\n  name: string;\r\n  address: string;\r\n  zip: string | null;\r\n  tel: string | null;\r\n  contactsCount: number;\r\n  contacts: IContact[] | null;\r\n}\r\n\r\ninterface IContact {\r\n  id: number;\r\n  name: string;\r\n  jobTitle: string | null;\r\n  tel: string;\r\n}\r\n\r\ninterface IPart {\r\n  id: number;\r\n  name: string;\r\n  num: number | null;\r\n}\r\n\r\ninterface IBundle {\r\n  id: number;\r\n  name: string;\r\n  series: string;\r\n  parts: IPart[] | null;\r\n}\r\n\r\n// interface IAllBundlesOutput {\r\n//   ok: boolean;\r\n//   error: string | null;\r\n//   totalPages: number | null;\r\n//   totalResults: number | null;\r\n//   bundles: IBundle[] | null;\r\n// }\r\n\r\nexport const AddOrder: React.FC = () => {\r\n  const { data: meData } = useMe();\r\n  const { data: bundleData } = useAllBundles();\r\n  const { data: partnerData } = useAllPartners();\r\n  const history = useHistory();\r\n  const [form] = Form.useForm();\r\n  const [partners, setPartners] = useState<IPartner[]>([]);\r\n  const [newDestination, setNewDestination] = useState<string>('');\r\n  const [destItem, setDestItem] = useState<string[]>([]);\r\n  const [newAddress, setNewAddress] = useState<string>('');\r\n  const [addrItem, setAddrItem] = useState<string[]>([]);\r\n  const [newReceiver, setNewReceiver] = useState<string>('');\r\n  const [recvItem, setRecvItem] = useState<string[]>([]);\r\n  const [newTel, setNewTel] = useState<string>('');\r\n  const [telItem, setTelItem] = useState<string[]>([]);\r\n  const [telItemTemp, setTelItemTemp] = useState<string[]>([]);\r\n  const [bundles, setBundles] = useState<IBundle[]>([]);\r\n  const [deliveryDate, setDeliveryDate] = useState<string>();\r\n  const [demoReturnDate, setDemoReturnDate] = useState<string>();\r\n  const [orderSheet, setOrderSheet] = useState<boolean>(false);\r\n  const parentList: string[] = [];\r\n\r\n  useEffect(() => {\r\n    if (meData) {\r\n      console.log(meData);\r\n    }\r\n  }, [meData]);\r\n\r\n  useEffect(() => {\r\n    const partnersName: string[] = [];\r\n    if (partnerData) {\r\n      // console.log(partnerData);\r\n      const allPartners = partnerData.allPartners.partners as IPartner[];\r\n      setPartners(allPartners);\r\n      allPartners?.map((partner) => partnersName.push(partner.name));\r\n      setDestItem(partnersName);\r\n    }\r\n  }, [partnerData]);\r\n\r\n  useEffect(() => {\r\n    if (bundleData) {\r\n      const allBundles = bundleData.allBundles.bundles as IBundle[];\r\n      allBundles.map((bundle) => {\r\n        if (parentList.indexOf(bundle.series) === -1) {\r\n          parentList.push(bundle.series);\r\n        }\r\n      });\r\n      setBundles(allBundles);\r\n    }\r\n  }, [bundleData, parentList]);\r\n\r\n  const onCompleted = (data: createOrderMutation) => {\r\n    const {\r\n      createOrder: { ok, error },\r\n    } = data;\r\n    if (ok) {\r\n      notification.success({\r\n        message: 'Success!',\r\n        description: '번들 등록 성공',\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n    } else if (error) {\r\n      notification.error({\r\n        message: 'Error',\r\n        description: `번들 등록 실패. ${error}`,\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  const [\r\n    createOrderMutation,\r\n    { data: createOrderData, loading: createOrderLoading },\r\n  ] = useMutation<createOrderMutation, createOrderMutationVariables>(\r\n    CREATE_ORDER_MUTATION,\r\n    {\r\n      onCompleted,\r\n    },\r\n  );\r\n\r\n  if (createOrderLoading) {\r\n    return (\r\n      <Loading\r\n        tip={\r\n          '등록중입니다. 잠시만 기다려주세요... 제품 수량이 많을수록 많은 시간이 소요됩니다.'\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  if (createOrderData && !createOrderLoading) {\r\n    history.push('/cen/orders');\r\n  }\r\n\r\n  const onFinish = (values: any) => {\r\n    let fail = '';\r\n    console.log('Received values of form:', values);\r\n    if (!values.projectName) {\r\n      fail += `${fail !== '' ? ', ' : ''}프로젝트명`;\r\n    }\r\n    if (!values.classification) {\r\n      fail += `${fail !== '' ? ', ' : ''}구분`;\r\n    }\r\n    if (!values.receiver) {\r\n      fail += `${fail !== '' ? ', ' : ''}거래처`;\r\n    }\r\n    if (!values.contact) {\r\n      fail += `${fail !== '' ? ', ' : ''}연락처`;\r\n    }\r\n    if (!values.address) {\r\n      fail += `${fail !== '' ? ', ' : ''}납품장소`;\r\n    }\r\n    if (!values.deliveryType) {\r\n      fail += `${fail !== '' ? ', ' : ''}출고형태`;\r\n    }\r\n    if (!values.deliveryMethod) {\r\n      fail += `${fail !== '' ? ', ' : ''}출고방법`;\r\n    }\r\n    if (!values.deliveryMethod) {\r\n      fail += `${fail !== '' ? ', ' : ''}배송방법`;\r\n    }\r\n    if (fail !== '') {\r\n      notification.error({\r\n        message: 'Error',\r\n        description: `[작성 누락] ${fail}`,\r\n        placement: 'topRight',\r\n        duration: 3,\r\n      });\r\n    } else {\r\n      createOrderMutation({\r\n        variables: {\r\n          input: {\r\n            address: values.address,\r\n            classification: values.classification,\r\n            contact: values.contact,\r\n            deliveryDate,\r\n            deliveryMethod: values.deliveryMethod,\r\n            deliveryType: values.deliveryType,\r\n            demoReturnDate,\r\n            destination: values.destination,\r\n            items: values.items,\r\n            orderSheet,\r\n            partnerId: values.partnerId,\r\n            projectName: values.projectName,\r\n            receiver: values.receiver,\r\n            remark: values.remark,\r\n            salesPerson: values.salesPerson\r\n              ? values.salesPerson\r\n              : meData?.me.name,\r\n            status: OrderStatus.Created,\r\n          },\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const onPartnerIdChange = (_: string, option?: any) => {\r\n    const partner = partners[option.key];\r\n    const recvTemp: string[] = [];\r\n    const telTemp: string[] = [];\r\n    setRecvItem([]);\r\n    setTelItem([]);\r\n    setAddrItem([partner.address]);\r\n    if (!partner.contacts) return;\r\n    partner.contacts.map((contact) => {\r\n      recvTemp.push(contact.name + ' ' + contact.jobTitle);\r\n      telTemp.push(contact.tel);\r\n    });\r\n    setRecvItem(recvTemp);\r\n    setTelItemTemp(telTemp);\r\n  };\r\n\r\n  const onReceiverIdChange = (_: string, option?: any) => {\r\n    const telTemp: string = telItemTemp[option.key];\r\n    setTelItem([telTemp]);\r\n  };\r\n\r\n  const onDestinationChange = (event: any) => {\r\n    setNewDestination(event.target.value);\r\n  };\r\n\r\n  const addDestination = () => {\r\n    setDestItem([...destItem, newDestination]);\r\n    setNewDestination('');\r\n  };\r\n\r\n  const onAddressChange = (event: any) => {\r\n    setNewAddress(event.target.value);\r\n  };\r\n\r\n  const addAddress = () => {\r\n    setAddrItem([...addrItem, newAddress]);\r\n    setNewAddress('');\r\n  };\r\n\r\n  const onReceiverChange = (event: any) => {\r\n    setNewReceiver(event.target.value);\r\n  };\r\n\r\n  const addReceiver = () => {\r\n    setRecvItem([...recvItem, newReceiver]);\r\n    setNewReceiver('');\r\n  };\r\n\r\n  const onTelChange = (event: any) => {\r\n    setNewTel(event.target.value);\r\n  };\r\n\r\n  const addTel = () => {\r\n    setTelItem([...telItem, newTel]);\r\n    setNewTel('');\r\n  };\r\n\r\n  const onDateChange = (_: any, dateString: string) => {\r\n    setDeliveryDate(dateString);\r\n  };\r\n\r\n  const onDemoReturnDateChange = (_: any, dateString: string) => {\r\n    setDemoReturnDate(dateString);\r\n  };\r\n\r\n  const onOrderSheetChange = (event: any) => {\r\n    const {\r\n      target: { checked },\r\n    } = event;\r\n    setOrderSheet(checked);\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Helmet>\r\n        <title>Add Orders | CEN Portal</title>\r\n      </Helmet>\r\n      <TitleBar>\r\n        <FolderOpenOutlined />\r\n        {' 출고요청서 등록'}\r\n      </TitleBar>\r\n      <FormColumn>\r\n        <Form form={form} onFinish={onFinish} autoComplete=\"off\">\r\n          <Descriptions\r\n            bordered\r\n            size=\"small\"\r\n            labelStyle={{ backgroundColor: '#F0F2F5' }}\r\n          >\r\n            <Descriptions.Item label=\"작성일자\">\r\n              <Form.Item name=\"writeDate\">\r\n                <Input\r\n                  defaultValue={new Date().toLocaleDateString()}\r\n                  disabled\r\n                />\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"담당영업\">\r\n              <Form.Item name=\"salesPerson\">\r\n                <Input defaultValue={meData?.me.name} value={meData?.me.name} />\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"작성자\">\r\n              <Form.Item name=\"writer\">\r\n                <Input defaultValue={meData?.me.name} disabled />\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"프로젝트명\" span={2}>\r\n              <Form.Item name=\"projectName\">\r\n                <Input />\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"상태\">\r\n              <Form.Item name=\"status\">\r\n                <Input\r\n                  prefix={<Badge status=\"processing\" text=\"출고요청\" />}\r\n                  value={OrderStatus.Created}\r\n                  disabled\r\n                />\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"구분\">\r\n              <Form.Item name=\"classification\">\r\n                <Select>\r\n                  <Option value={OrderClassification.Sale}>판매</Option>\r\n                  <Option value={OrderClassification.Demo}>Demo</Option>\r\n                  <Option value={OrderClassification.RMA}>RMA</Option>\r\n                  <Option value={OrderClassification.DoA}>DoA</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"Demo 회수일자\">\r\n              <Form.Item name=\"demoReturnDate\">\r\n                <Space direction=\"vertical\">\r\n                  <DatePicker onChange={onDemoReturnDateChange} />\r\n                </Space>\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"발주서 접수\">\r\n              <Form.Item name=\"orderSheet\">\r\n                <Checkbox onChange={onOrderSheetChange} checked={orderSheet} />\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item\r\n              label={\r\n                <span>\r\n                  {'거래처 '}\r\n                  <Tooltip title=\"등록한 파트너만 선택 가능\">\r\n                    <QuestionCircleOutlined />\r\n                  </Tooltip>\r\n                </span>\r\n              }\r\n            >\r\n              <Form.Item name=\"partnerId\">\r\n                <Select\r\n                  onChange={onPartnerIdChange}\r\n                  placeholder=\"거래처 선택\"\r\n                  showSearch\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input: string, option: any): any =>\r\n                    option.children.indexOf(input) >= 0\r\n                  }\r\n                  filterSort={(optionA, optionB) =>\r\n                    optionA.value.localeCompare(optionB.value)\r\n                  }\r\n                >\r\n                  {partners.map((partner: any, index: number) => (\r\n                    <Option key={index} value={partner.id}>\r\n                      {partner?.name}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item\r\n              label={\r\n                <span>\r\n                  {'납품처 '}\r\n                  <Tooltip title=\"리스트에 없는 경우, 직접입력\">\r\n                    <QuestionCircleOutlined />\r\n                  </Tooltip>\r\n                </span>\r\n              }\r\n            >\r\n              <Form.Item name=\"destination\">\r\n                <Select\r\n                  placeholder=\"납품처 입력\"\r\n                  dropdownRender={(menu) => (\r\n                    <div>\r\n                      {menu}\r\n                      <Divider style={{ margin: '4px 0' }} />\r\n                      <div\r\n                        style={{\r\n                          display: 'flex',\r\n                          flexWrap: 'nowrap',\r\n                          padding: 8,\r\n                        }}\r\n                      >\r\n                        <Input\r\n                          style={{ flex: 'auto' }}\r\n                          value={newDestination}\r\n                          onChange={onDestinationChange}\r\n                        />\r\n                        <a\r\n                          style={{\r\n                            flex: 'none',\r\n                            padding: '8px',\r\n                            display: 'block',\r\n                            cursor: 'pointer',\r\n                          }}\r\n                          onClick={addDestination}\r\n                        >\r\n                          <PlusOutlined /> Add item\r\n                        </a>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  showSearch\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input: string, option: any): any =>\r\n                    option.children.indexOf(input) >= 0\r\n                  }\r\n                  filterSort={(optionA, optionB) =>\r\n                    optionA.value.localeCompare(optionB.value)\r\n                  }\r\n                >\r\n                  {destItem.map((item) => (\r\n                    <Option key={item} value={item}>\r\n                      {item}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"납품일\">\r\n              <Form.Item name=\"deliveryDate\">\r\n                <Space direction=\"vertical\">\r\n                  <DatePicker onChange={onDateChange} />\r\n                </Space>\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"출고형태\" span={2}>\r\n              <Form.Item name=\"deliveryType\">\r\n                <Select>\r\n                  <Option value={DeliveryType.Total}>전체출고</Option>\r\n                  <Option value={DeliveryType.Partial}>부분출고</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"배송방법\" span={2}>\r\n              <Form.Item name=\"deliveryMethod\">\r\n                <Select>\r\n                  <Option value={DeliveryMethod.Parcel}>택배</Option>\r\n                  <Option value={DeliveryMethod.Quick}>퀵</Option>\r\n                  <Option value={DeliveryMethod.Cargo}>화물</Option>\r\n                  <Option value={DeliveryMethod.Directly}>직접배송</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item\r\n              label={\r\n                <span>\r\n                  {'수령자 '}\r\n                  <Tooltip title=\"등록한 연락처 입력 혹은 직접입력\">\r\n                    <QuestionCircleOutlined />\r\n                  </Tooltip>\r\n                </span>\r\n              }\r\n              span={2}\r\n            >\r\n              <Form.Item name=\"receiver\">\r\n                <Select\r\n                  onChange={onReceiverIdChange}\r\n                  placeholder=\"수령자 입력\"\r\n                  dropdownRender={(menu) => (\r\n                    <div>\r\n                      {menu}\r\n                      <Divider style={{ margin: '4px 0' }} />\r\n                      <div\r\n                        style={{\r\n                          display: 'flex',\r\n                          flexWrap: 'nowrap',\r\n                          padding: 8,\r\n                        }}\r\n                      >\r\n                        <Input\r\n                          style={{ flex: 'auto' }}\r\n                          value={newReceiver}\r\n                          onChange={onReceiverChange}\r\n                        />\r\n                        <a\r\n                          style={{\r\n                            flex: 'none',\r\n                            padding: '8px',\r\n                            display: 'block',\r\n                            cursor: 'pointer',\r\n                          }}\r\n                          onClick={addReceiver}\r\n                        >\r\n                          <PlusOutlined /> Add item\r\n                        </a>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  showSearch\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input: string, option: any): any =>\r\n                    option.children.indexOf(input) >= 0\r\n                  }\r\n                  filterSort={(optionA, optionB) =>\r\n                    optionA.value.localeCompare(optionB.value)\r\n                  }\r\n                >\r\n                  {recvItem.map((item, index) => (\r\n                    <Option key={index} value={item}>\r\n                      {item}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"연락처\">\r\n              <Form.Item name=\"contact\">\r\n                <Select\r\n                  placeholder=\"연락처 입력\"\r\n                  dropdownRender={(menu) => (\r\n                    <div>\r\n                      {menu}\r\n                      <Divider style={{ margin: '4px 0' }} />\r\n                      <div\r\n                        style={{\r\n                          display: 'flex',\r\n                          flexWrap: 'nowrap',\r\n                          padding: 8,\r\n                        }}\r\n                      >\r\n                        <Input\r\n                          style={{ flex: 'auto' }}\r\n                          value={newTel}\r\n                          onChange={onTelChange}\r\n                        />\r\n                        <a\r\n                          style={{\r\n                            flex: 'none',\r\n                            padding: '8px',\r\n                            display: 'block',\r\n                            cursor: 'pointer',\r\n                          }}\r\n                          onClick={addTel}\r\n                        >\r\n                          <PlusOutlined /> Add item\r\n                        </a>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  showSearch\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input: string, option: any): any =>\r\n                    option.children.indexOf(input) >= 0\r\n                  }\r\n                  filterSort={(optionA, optionB) =>\r\n                    optionA.value.localeCompare(optionB.value)\r\n                  }\r\n                >\r\n                  {telItem.map((item) => (\r\n                    <Option key={item} value={item}>\r\n                      {item}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"납품장소\" span={3}>\r\n              <Form.Item name=\"address\">\r\n                <Select\r\n                  placeholder=\"납품장소 입력\"\r\n                  dropdownRender={(menu) => (\r\n                    <div>\r\n                      {menu}\r\n                      <Divider style={{ margin: '4px 0' }} />\r\n                      <div\r\n                        style={{\r\n                          display: 'flex',\r\n                          flexWrap: 'nowrap',\r\n                          padding: 8,\r\n                        }}\r\n                      >\r\n                        <Input\r\n                          style={{ flex: 'auto' }}\r\n                          value={newAddress}\r\n                          onChange={onAddressChange}\r\n                        />\r\n                        <a\r\n                          style={{\r\n                            flex: 'none',\r\n                            padding: '8px',\r\n                            display: 'block',\r\n                            cursor: 'pointer',\r\n                          }}\r\n                          onClick={addAddress}\r\n                        >\r\n                          <PlusOutlined /> Add item\r\n                        </a>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  showSearch\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input: string, option: any): any =>\r\n                    option.children.indexOf(input) >= 0\r\n                  }\r\n                  filterSort={(optionA, optionB) =>\r\n                    optionA.value.localeCompare(optionB.value)\r\n                  }\r\n                >\r\n                  {addrItem.map((item) => (\r\n                    <Option key={item} value={item}>\r\n                      {item}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"요청사항\" span={3}>\r\n              <Form.Item name=\"remark\">\r\n                <Input.TextArea />\r\n              </Form.Item>\r\n            </Descriptions.Item>\r\n          </Descriptions>\r\n          <Descriptions layout=\"vertical\" bordered size=\"small\">\r\n            <Descriptions.Item\r\n              label={\r\n                <span>\r\n                  {'출고제품 '}\r\n                  <Tooltip title=\"등록한 제품만 선택 가능. 'Add Bundles' 버튼을 통해 항목추가 가능.\">\r\n                    <QuestionCircleOutlined />\r\n                  </Tooltip>\r\n                </span>\r\n              }\r\n              style={{ backgroundColor: '#F0F2F5' }}\r\n            >\r\n              <ItemList>\r\n                <Form.List name=\"items\">\r\n                  {(fields, { add, remove }) => (\r\n                    <>\r\n                      {fields.map((field) => (\r\n                        <div key={field.key}>\r\n                          <Space align=\"baseline\">\r\n                            <Form.Item\r\n                              noStyle\r\n                              shouldUpdate={(prevValues, curValues) =>\r\n                                prevValues.area !== curValues.area ||\r\n                                prevValues.items !== curValues.items\r\n                              }\r\n                            >\r\n                              {() => (\r\n                                <Form.Item\r\n                                  {...field}\r\n                                  label=\"제품명\"\r\n                                  name={[field.name, 'bundleId']}\r\n                                  fieldKey={[field.fieldKey, 'bundleId']}\r\n                                  rules={[\r\n                                    {\r\n                                      required: true,\r\n                                      message: '번들 이름을 선택해주세요.',\r\n                                    },\r\n                                  ]}\r\n                                  style={{ width: 250 }}\r\n                                >\r\n                                  <TreeSelect\r\n                                    showSearch\r\n                                    placeholder=\"Please select\"\r\n                                    allowClear\r\n                                    style={{ width: '180px' }}\r\n                                    dropdownStyle={{\r\n                                      maxHeight: 400,\r\n                                      overflow: 'auto',\r\n                                    }}\r\n                                  >\r\n                                    {bundles\r\n                                      ? parentList.map((parent) => {\r\n                                          console.log(parentList);\r\n                                          return (\r\n                                            // parent list.\r\n                                            <TreeNode\r\n                                              key={parent}\r\n                                              value={parent}\r\n                                              title={parent}\r\n                                              selectable={false}\r\n                                            >\r\n                                              {bundles.map((bundle) => {\r\n                                                // children list.\r\n                                                if (bundle.series === parent) {\r\n                                                  return (\r\n                                                    <TreeNode\r\n                                                      key={bundle.id}\r\n                                                      value={bundle.id}\r\n                                                      title={bundle.name}\r\n                                                    />\r\n                                                  );\r\n                                                }\r\n                                              })}\r\n                                            </TreeNode>\r\n                                          );\r\n                                        })\r\n                                      : null}\r\n                                  </TreeSelect>\r\n                                </Form.Item>\r\n                              )}\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                              {...field}\r\n                              label=\"수량\"\r\n                              name={[field.name, 'num']}\r\n                              fieldKey={[field.fieldKey, 'num']}\r\n                              rules={[\r\n                                {\r\n                                  required: true,\r\n                                  message: '수량 입력 필요',\r\n                                },\r\n                              ]}\r\n                              style={{ width: 150 }}\r\n                            >\r\n                              <InputNumber />\r\n                            </Form.Item>\r\n                            <MinusCircleOutlined\r\n                              onClick={() => remove(field.name)}\r\n                            />\r\n                          </Space>\r\n                        </div>\r\n                      ))}\r\n                      <Form.Item>\r\n                        <Button\r\n                          type=\"dashed\"\r\n                          onClick={() => add()}\r\n                          block\r\n                          icon={<PlusOutlined />}\r\n                        >\r\n                          Add Bundles\r\n                        </Button>\r\n                      </Form.Item>\r\n                    </>\r\n                  )}\r\n                </Form.List>\r\n              </ItemList>\r\n            </Descriptions.Item>\r\n          </Descriptions>\r\n          <Form.Item>\r\n            <ButtonColumn>\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                style={{ marginRight: 8 }}\r\n              >\r\n                Submit\r\n              </Button>\r\n              <Button type=\"primary\">\r\n                <Popconfirm\r\n                  title=\"정말 취소 하시겠습니까?\"\r\n                  onConfirm={() => history.goBack()}\r\n                >\r\n                  Cancel\r\n                </Popconfirm>\r\n              </Button>\r\n            </ButtonColumn>\r\n          </Form.Item>\r\n        </Form>\r\n      </FormColumn>\r\n    </Wrapper>\r\n  );\r\n};\r\n","/home/cen/cen-portal-frontend/src/pages/cen/partners/addPartner.tsx",["312","313","314","315","316","317","318"],"import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { gql, useMutation } from '@apollo/client';\nimport {\n  Popconfirm,\n  Form,\n  Button,\n  notification,\n  Input,\n  Space,\n  Select,\n  Tooltip,\n} from 'antd';\nimport {\n  FolderOpenOutlined,\n  MinusCircleOutlined,\n  PlusOutlined,\n  QuestionCircleOutlined,\n} from '@ant-design/icons';\nimport {\n  createPartnerMutation,\n  createPartnerMutationVariables,\n} from '../../../__generated__/createPartnerMutation';\n\nconst { Option } = Select;\n\nconst Wrapper = styled.div`\n  padding: 20px;\n`;\n\nconst TitleBar = styled.div`\n  font-size: 25px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nconst FormColumn = styled.div`\n  margin-top: 40px;\n`;\n\nconst CREATE_PARTNER_MUTATION = gql`\n  mutation createPartnerMutation($input: CreatePartnerInput!) {\n    createPartner(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\nconst layout = {\n  labelCol: { span: 2 },\n  wrapperCol: { span: 10 },\n};\n\nconst tailLayout = {\n  wrapperCol: { offset: 2, span: 10 },\n};\n\nexport const AddPartner = () => {\n  const history = useHistory();\n  const [form] = Form.useForm();\n\n  const onCompleted = (data: createPartnerMutation) => {\n    const {\n      createPartner: { ok, error },\n    } = data;\n    if (ok) {\n      notification.success({\n        message: 'Success!',\n        description: '파트너 등록 성공',\n        placement: 'topRight',\n        duration: 1,\n      });\n      // setSelectedRowKeys([]);\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `파트너 등록 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    }\n  };\n\n  const [createPartnerMutation, { data: createPartnerData }] = useMutation<\n    createPartnerMutation,\n    createPartnerMutationVariables\n  >(CREATE_PARTNER_MUTATION, {\n    onCompleted,\n  });\n\n  const onFinish = (values: any) => {\n    console.log('Received values of form:', values);\n    createPartnerMutation({\n      variables: {\n        input: {\n          name: values.name,\n          address: values.address,\n          zip: values.zip,\n          tel: values.tel,\n        },\n      },\n    });\n    history.goBack();\n  };\n\n  return (\n    <Wrapper>\n      <Helmet>\n        <title>Add Partners | CEN Portal</title>\n      </Helmet>\n      <TitleBar>\n        <FolderOpenOutlined />\n        {' 파트너 등록'}\n      </TitleBar>\n      <FormColumn>\n        <Form form={form} onFinish={onFinish} autoComplete=\"off\" {...layout}>\n          <Form.Item\n            name=\"name\"\n            label={\n              <span>\n                {'Partner '}\n                <Tooltip title=\"파트너명 입력\">\n                  <QuestionCircleOutlined />\n                </Tooltip>\n              </span>\n            }\n            rules={[{ required: true, message: '파트너 이름을 입력해주세요.' }]}\n          >\n            <Input style={{ width: 300 }} />\n          </Form.Item>\n          <Form.Item\n            name=\"address\"\n            label={\n              <span>\n                {'Address '}\n                <Tooltip title=\"주소 입력\">\n                  <QuestionCircleOutlined />\n                </Tooltip>\n              </span>\n            }\n            rules={[{ required: true, message: '주소를 입력 해주세요.' }]}\n          >\n            <Input style={{ width: 400 }} />\n          </Form.Item>\n          <Form.Item\n            name=\"zip\"\n            label={\n              <span>\n                {'Zip '}\n                <Tooltip title=\"우편번호 입력\">\n                  <QuestionCircleOutlined />\n                </Tooltip>\n              </span>\n            }\n          >\n            <Input style={{ width: 200 }} />\n          </Form.Item>\n          <Form.Item\n            name=\"tel\"\n            label={\n              <span>\n                {'Tel '}\n                <Tooltip title=\"회사번호 입력\">\n                  <QuestionCircleOutlined />\n                </Tooltip>\n              </span>\n            }\n          >\n            <Input style={{ width: 200 }} />\n          </Form.Item>\n          <Form.Item {...tailLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" style={{ marginRight: 8 }}>\n              Submit\n            </Button>\n            <Button type=\"primary\">\n              <Popconfirm\n                title=\"정말 취소 하시겠습니까?\"\n                onConfirm={() => history.goBack()}\n              >\n                Cancel\n              </Popconfirm>\n            </Button>\n          </Form.Item>\n        </Form>\n      </FormColumn>\n    </Wrapper>\n  );\n};\n","/home/cen/cen-portal-frontend/src/pages/cen/partners/partnerDetail.tsx",["319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334"],"/* eslint-disable react/prop-types */\n/* eslint-disable react/display-name */\nimport React, { useState, useEffect } from 'react';\nimport { ColumnsType } from 'antd/es/table';\nimport { Helmet } from 'react-helmet';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport {\n  Table,\n  Popconfirm,\n  Form,\n  Typography,\n  Button,\n  notification,\n  Descriptions,\n  Badge,\n  Input,\n} from 'antd';\nimport {\n  getPartnerQuery,\n  getPartnerQueryVariables,\n} from '../../../__generated__/getPartnerQuery';\nimport {\n  deleteContactMutation,\n  deleteContactMutationVariables,\n} from '../../../__generated__/deleteContactMutation';\nimport {\n  editContactMutation,\n  editContactMutationVariables,\n} from '../../../__generated__/editContactMutation';\nimport { FolderOpenOutlined } from '@ant-design/icons';\nimport { Loading } from '../../../components/loading';\nimport { UserRole } from '../../../__generated__/globalTypes';\nimport { useMe } from '../../../hooks/useMe';\n\nconst Wrapper = styled.div`\n  padding: 20px;\n`;\n\nconst TitleBar = styled.div`\n  font-size: 25px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nconst MenuBar = styled.span`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 8px;\n`;\n\nconst TableColumn = styled.div`\n  padding: 8px;\n  background-color: #ffffff;\n`;\n\nconst SButton = styled(Button)`\n  margin-left: 8px;\n`;\n\nconst GET_PARTNER_QUERY = gql`\n  query getPartnerQuery($input: PartnerInput!) {\n    findPartnerById(input: $input) {\n      ok\n      error\n      partner {\n        id\n        name\n        address\n        zip\n        tel\n        contacts {\n          id\n          name\n          jobTitle\n          tel\n          team\n        }\n        orders {\n          id\n          projectName\n          items {\n            id\n            num\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst DELETE_CONTACT_MUTATION = gql`\n  mutation deleteContactMutation($input: DeleteContactInput!) {\n    deleteContact(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\nconst EDIT_CONTACT_MUTATION = gql`\n  mutation editContactMutation($input: EditContactInput!) {\n    editContact(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\ninterface IContact {\n  key?: number;\n  no?: number;\n  id?: number;\n  name: string;\n  jobTitle: string | null;\n  tel: string;\n  team?: string | null;\n}\n\ninterface IBundle {\n  name: string;\n}\n\ninterface IOrderItem {\n  id: number;\n  bundle: IBundle;\n  num: number;\n}\n\ninterface IOrder {\n  id: number;\n  projectName: string;\n  items: IOrderItem[];\n}\n\ninterface IPartner {\n  key?: string;\n  id: number;\n  name: string;\n  address: string;\n  zip: string | null;\n  tel: string | null;\n  contacts: IContact[] | null;\n  orders: IOrder[] | null;\n}\n\ninterface IPartnerOutput {\n  ok: boolean;\n  error: string | null;\n  partner: IPartner | null;\n}\n\ninterface EditableCellProps extends React.HTMLAttributes<HTMLElement> {\n  editing?: boolean;\n  dataIndex: string;\n  title: string;\n  inputType?: 'number' | 'text';\n  record?: IPartner;\n  index?: number;\n  children?: React.ReactNode;\n  width?: string;\n  editable?: boolean;\n  align?: 'left' | 'center' | 'right' | 'justify' | 'char' | undefined;\n  sortDirections?: string[];\n  defaultSortOrder?: string;\n  sorter?: unknown;\n  render?: unknown;\n}\n\nconst EditableCell: React.FC<EditableCellProps> = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  return (\n    <td {...restProps}>\n      {editing ? (\n        <Form.Item\n          name={dataIndex}\n          style={{ margin: 0 }}\n          rules={[\n            {\n              required: true,\n              message: `Please Input ${title}!`,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n      ) : (\n        children\n      )}\n    </td>\n  );\n};\n\nexport const PartnerDetail: React.FC = () => {\n  const history = useHistory();\n  const originData: IContact[] = [];\n  const [form] = Form.useForm();\n  const [editingKey, setEditingKey] = useState('');\n  const partnerId: any = useParams();\n  const { data: meData } = useMe();\n  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\n  const [partner, setPartner] = useState<IPartner>();\n  const [data, setData] = useState<any>([]);\n\n  const {\n    data: partnerData,\n    loading: partnerLoading,\n    refetch: reGetData,\n  } = useQuery<getPartnerQuery, getPartnerQueryVariables>(GET_PARTNER_QUERY, {\n    variables: {\n      input: {\n        partnerId: +partnerId.id,\n      },\n    },\n  });\n\n  const onDeleteCompleted = (data: deleteContactMutation) => {\n    const {\n      deleteContact: { ok, error },\n    } = data;\n    if (ok) {\n      notification.success({\n        message: 'Success!',\n        description: '삭제 성공',\n        placement: 'topRight',\n        duration: 1,\n      });\n      setSelectedRowKeys([]);\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `삭제 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    }\n  };\n\n  const onEditCompleted = (data: editContactMutation) => {\n    const {\n      editContact: { ok, error },\n    } = data;\n    if (ok) {\n      notification.success({\n        message: 'Success!',\n        description: `변경 성공`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `변경 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    }\n  };\n\n  const [deleteContactMutation, { data: deleteContactData }] = useMutation<\n    deleteContactMutation,\n    deleteContactMutationVariables\n  >(DELETE_CONTACT_MUTATION, {\n    onCompleted: onDeleteCompleted,\n  });\n\n  const [editContactMutation, { data: editContactData }] = useMutation<\n    editContactMutation,\n    editContactMutationVariables\n  >(EDIT_CONTACT_MUTATION, {\n    onCompleted: onEditCompleted,\n  });\n\n  useEffect(() => {\n    if (partnerData && !partnerLoading) {\n      const partnerInfo = partnerData.findPartnerById.partner as IPartner;\n      const contactsInfo = partnerInfo.contacts as IContact[];\n      setPartner(partnerInfo);\n      for (let i = 0; i < contactsInfo.length; i++) {\n        originData.push({\n          key: contactsInfo[i].id,\n          no: i + 1,\n          name: contactsInfo[i].name,\n          jobTitle: contactsInfo[i].jobTitle,\n          team: contactsInfo[i].team,\n          tel: contactsInfo[i].tel,\n        });\n      }\n      setData(originData);\n    }\n  }, [partnerData]);\n\n  const columns: EditableCellProps[] = [\n    {\n      title: 'No',\n      dataIndex: 'no',\n      width: '8%',\n      align: 'center',\n    },\n    {\n      title: '이름',\n      dataIndex: 'name',\n      width: '15%',\n      align: 'center',\n      editable: true,\n    },\n    {\n      title: '직함/직책',\n      dataIndex: 'jobTitle',\n      width: '13%',\n      align: 'center',\n      editable: true,\n    },\n    {\n      title: '팀',\n      dataIndex: 'team',\n      width: '17%',\n      align: 'center',\n      editable: true,\n    },\n    {\n      title: '연락처',\n      dataIndex: 'tel',\n      width: '25%',\n      align: 'center',\n      editable: true,\n    },\n    {\n      title: 'Operation',\n      dataIndex: 'operation',\n      align: 'center',\n      width: '15%',\n      render: (_: string, record: any) => {\n        const editable = isEditing(record);\n        return (\n          <span>\n            {editable ? (\n              <>\n                <Popconfirm\n                  title=\"정말 변경 하시겠습니까?\"\n                  onConfirm={() => save(record.key)}\n                >\n                  <Typography.Link style={{ marginRight: 8 }}>\n                    Save\n                  </Typography.Link>\n                </Popconfirm>\n                <Typography.Link onClick={cancel} style={{ marginRight: 8 }}>\n                  Cancel\n                </Typography.Link>\n              </>\n            ) : (\n              <Typography.Link\n                onClick={() => edit(record)}\n                style={{ marginRight: 8 }}\n                disabled={editingKey !== ''}\n              >\n                Edit\n              </Typography.Link>\n            )}\n\n            <Typography.Link href=\"#!\" disabled={editingKey !== ''}>\n              <Popconfirm\n                title=\"정말 삭제 하시겠습니까?\"\n                onConfirm={() => handleRowDelete(record.key)}\n              >\n                Delete\n              </Popconfirm>\n            </Typography.Link>\n          </span>\n        );\n      },\n    },\n  ];\n\n  const mergedColumns = columns.map((col: any) => {\n    if (!col.editable) {\n      return col;\n    }\n    return {\n      ...col,\n      onCell: (record: IPartner) => ({\n        record,\n        inputType: 'text',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record),\n      }),\n    };\n  });\n\n  const isEditing = (record: IPartner) => record.key === editingKey;\n\n  const edit = (record: Partial<IPartner> & { key: React.Key }) => {\n    form.setFieldsValue({\n      status: '',\n      ...record,\n    });\n    setEditingKey(record.key);\n  };\n\n  const cancel = () => {\n    setEditingKey('');\n  };\n\n  const save = async (key: React.Key) => {\n    try {\n      const row = (await form.validateFields()) as IContact;\n      const newData = [...data];\n      const index = newData?.findIndex((item) => key === item.key);\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, {\n          ...item,\n          ...row,\n        });\n        setData(newData);\n        setEditingKey('');\n        editContactMutation({\n          variables: {\n            input: {\n              contactId: +key,\n              name: row.name,\n              jobTitle: row.jobTitle,\n              team: row.team,\n              tel: row.tel,\n            },\n          },\n        });\n      } else {\n        newData.push(row);\n        setData(newData);\n        setEditingKey('');\n      }\n    } catch (errInfo) {\n      console.log('Validate Failed:', errInfo);\n    }\n  };\n\n  const handleDelete = () => {\n    selectedRowKeys.map((key) => {\n      deleteContactMutation({\n        variables: { input: { contactId: +key } },\n      });\n    });\n    reGetData();\n  };\n\n  const handleRowDelete = (key: number) => {\n    deleteContactMutation({\n      variables: { input: { contactId: +key } },\n    });\n    reGetData();\n  };\n\n  const rowSelection = {\n    onChange: (selectedRowKeys: React.Key[], selectedRows: IOrder[]) => {\n      setSelectedRowKeys(selectedRowKeys);\n      // console.log(\n      //   `selectedRowKeys: ${selectedRowKeys}`,\n      //   'selectedRows: ',\n      //   selectedRows,\n      // );\n    },\n    // getCheckboxProps: (record: IOrder) => ({\n    //   disabled: record.name === 'Disabled User',\n    //   name: record.name,\n    // }),\n  };\n\n  return (\n    <Wrapper>\n      <Helmet>\n        <title>Partners | CEN Portal</title>\n      </Helmet>\n      <TitleBar>\n        <FolderOpenOutlined />\n        {` 파트너`}\n      </TitleBar>\n      <MenuBar>\n        <SButton type=\"primary\" size=\"small\" onClick={() => history.goBack()}>\n          Back\n        </SButton>\n      </MenuBar>\n\n      <Descriptions\n        title={`${partner?.name}`}\n        bordered\n        size=\"small\"\n        labelStyle={{ backgroundColor: '#F0F2F5' }}\n      >\n        <Descriptions.Item label=\"업체명\" span={1}>\n          {partner?.name}\n        </Descriptions.Item>\n        <Descriptions.Item label=\"주소\" span={2}>\n          {partner?.address}\n        </Descriptions.Item>\n        <Descriptions.Item label=\"우편번호\" span={1}>\n          {partner?.zip == null ? '-' : partner?.zip}\n        </Descriptions.Item>\n        <Descriptions.Item label=\"대표번호\" span={2}>\n          {partner?.tel == null ? '-' : partner?.tel}\n        </Descriptions.Item>\n      </Descriptions>\n      <Descriptions layout=\"vertical\" bordered size=\"small\">\n        <Descriptions.Item\n          label=\"연락처\"\n          style={{ backgroundColor: '#F0F2F5' }}\n        >\n          <TableColumn>\n            <MenuBar>\n              <SButton type=\"primary\" size=\"small\">\n                <Link to={`/cen/partners/${partnerId.id}/add-contact`}>\n                  Add\n                </Link>\n              </SButton>\n              <SButton type=\"primary\" size=\"small\" disabled={editingKey !== ''}>\n                <Popconfirm\n                  title=\"정말 삭제 하시겠습니까?\"\n                  onConfirm={() => handleDelete()}\n                >\n                  Delete\n                </Popconfirm>\n              </SButton>\n            </MenuBar>\n            <Form form={form} component={false}>\n              <Table\n                components={{\n                  body: {\n                    cell: EditableCell,\n                  },\n                }}\n                columns={mergedColumns}\n                dataSource={data}\n                rowSelection={rowSelection}\n                pagination={false}\n                size=\"small\"\n                bordered\n                loading={partnerLoading}\n              />\n            </Form>\n          </TableColumn>\n        </Descriptions.Item>\n      </Descriptions>\n    </Wrapper>\n  );\n};\n","/home/cen/cen-portal-frontend/src/pages/cen/devices/devices.tsx",["335","336","337","338","339","340","341","342","343","344","345","346","347","348","349"],"/* eslint-disable react/prop-types */\r\n/* eslint-disable react/display-name */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { ColumnsType } from 'antd/es/table';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { gql, useApolloClient, useMutation } from '@apollo/client';\r\nimport {\r\n  Table,\r\n  Popconfirm,\r\n  Form,\r\n  Typography,\r\n  Button,\r\n  notification,\r\n  Radio,\r\n  BackTop,\r\n} from 'antd';\r\nimport {\r\n  deleteBundleMutation,\r\n  deleteBundleMutationVariables,\r\n} from '../../../__generated__/deleteBundleMutation';\r\nimport {\r\n  deletePartMutation,\r\n  deletePartMutationVariables,\r\n} from '../../../__generated__/deletePartMutation';\r\nimport { FolderOpenOutlined } from '@ant-design/icons';\r\nimport { Loading } from '../../../components/loading';\r\nimport { useAllBundles } from '../../../hooks/useAllBundles';\r\nimport { useAllParts } from '../../../hooks/useAllParts';\r\nimport { UserRole } from '../../../__generated__/globalTypes';\r\nimport { useMe } from '../../../hooks/useMe';\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst TitleBar = styled.div`\r\n  font-size: 25px;\r\n  font-weight: 700;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst MenuBar = styled.span`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 8px;\r\n`;\r\n\r\nconst SButton = styled(Button)`\r\n  margin-left: 8px;\r\n`;\r\n\r\nconst DELETE_BUNDLE_MUTATION = gql`\r\n  mutation deleteBundleMutation($input: DeleteBundleInput!) {\r\n    deleteBundle(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_PART_MUTATION = gql`\r\n  mutation deletePartMutation($input: DeletePartInput!) {\r\n    deletePart(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\ninterface Item {\r\n  key: string;\r\n  no: number;\r\n  series: string;\r\n  name: string | JSX.Element;\r\n  sorter?: unknown;\r\n}\r\n\r\ninterface IBundleItem {\r\n  num: number | null;\r\n  part: IPart;\r\n}\r\n\r\ninterface IBundle {\r\n  id: number;\r\n  name: string;\r\n  series: string | null;\r\n  description: string | null;\r\n  parts: IBundleItem[] | null;\r\n}\r\n\r\ninterface IAllBundlesOutput {\r\n  ok: boolean;\r\n  error: string | null;\r\n  totalPages: number | null;\r\n  totalResults: number | null;\r\n  bundles: IBundle[] | null;\r\n}\r\n\r\ninterface IPart {\r\n  id: number;\r\n  name: string;\r\n  series: string;\r\n  description?: string | null;\r\n}\r\n\r\ninterface IAllPartsOutput {\r\n  ok: boolean;\r\n  error: string | null;\r\n  totalPages: number | null;\r\n  totalResults: number | null;\r\n  parts: IPart[] | null;\r\n}\r\n\r\nexport const Device = () => {\r\n  const client = useApolloClient();\r\n  const originBundleData: Item[] = [];\r\n  const originPartData: Item[] = [];\r\n  const { data: meData } = useMe();\r\n  const [form] = Form.useForm();\r\n  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\r\n  const [radioValue, setRadioValue] = useState('Bundles');\r\n  const [bundlesData, setBundlesData] = useState<Item[]>([]);\r\n  const [partsData, setPartsData] = useState<Item[]>([]);\r\n  const [bundlesPage, setBundlesPage] = useState(1);\r\n  const [bundlesTake, setBundlesTake] = useState(10);\r\n  const [bundlesTotal, setBundlesTotal] = useState(0);\r\n  const [partsPage, setPartsPage] = useState(1);\r\n  const [partsTake, setPartsTake] = useState(10);\r\n  const [partsTotal, setPartsTotal] = useState(0);\r\n  const {\r\n    data: bundleGetData,\r\n    loading: bundleLoading,\r\n    refetch: reGetBundles,\r\n  } = useAllBundles(bundlesPage, bundlesTake);\r\n  const {\r\n    data: partGetData,\r\n    loading: partLoading,\r\n    refetch: reGetParts,\r\n  } = useAllParts(partsPage, partsTake);\r\n  const devicesOptions = ['Bundles', 'Parts'];\r\n\r\n  const onCompletedBundle = (data: deleteBundleMutation) => {\r\n    const {\r\n      deleteBundle: { ok, error },\r\n    } = data;\r\n    if (ok) {\r\n      notification.success({\r\n        message: 'Success!',\r\n        description: '삭제 성공',\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n      setSelectedRowKeys([]);\r\n      reGetBundles();\r\n    } else if (error) {\r\n      notification.error({\r\n        message: 'Error',\r\n        description: `삭제 실패. ${error}`,\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  const onCompletedPart = (data: deletePartMutation) => {\r\n    const {\r\n      deletePart: { ok, error },\r\n    } = data;\r\n    if (ok) {\r\n      notification.success({\r\n        message: 'Success!',\r\n        description: '삭제 성공',\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n      setSelectedRowKeys([]);\r\n      reGetParts();\r\n    } else if (error) {\r\n      notification.error({\r\n        message: 'Error',\r\n        description: `삭제 실패. ${error}`,\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  const [deleteBundleMutation, { data: deleteBundleData }] = useMutation<\r\n    deleteBundleMutation,\r\n    deleteBundleMutationVariables\r\n  >(DELETE_BUNDLE_MUTATION, {\r\n    onCompleted: onCompletedBundle,\r\n  });\r\n\r\n  const [deletePartMutation, { data: deletePartData }] = useMutation<\r\n    deletePartMutation,\r\n    deletePartMutationVariables\r\n  >(DELETE_PART_MUTATION, {\r\n    onCompleted: onCompletedPart,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (bundleGetData && !bundleLoading) {\r\n      setBundlesData([]);\r\n      const bundles = bundleGetData.allBundles.bundles as IBundle[];\r\n      const getTotal = bundleGetData.allBundles.totalResults as number;\r\n      for (let i = 0; i < bundles.length; i++) {\r\n        originBundleData.push({\r\n          key: `${bundles[i].id}`,\r\n          no: i + 1 + (bundlesPage - 1) * bundlesTake,\r\n          series: `${bundles[i].series}`,\r\n          name: (\r\n            <Link\r\n              to={`/cen/devices/bundle/${bundles[i].id}`}\r\n            >{`${bundles[i].name}`}</Link>\r\n          ),\r\n        });\r\n      }\r\n      setBundlesTotal(getTotal);\r\n      setBundlesData(originBundleData);\r\n    }\r\n    if (partGetData && !partLoading) {\r\n      setPartsData([]);\r\n      const parts = partGetData.allParts.parts as IPart[];\r\n      const getTotal = partGetData.allParts.totalResults as number;\r\n      for (let i = 0; i < parts.length; i++) {\r\n        originPartData.push({\r\n          key: `${parts[i].id}`,\r\n          no: i + 1 + (bundlesPage - 1) * bundlesTake,\r\n          series: `${parts[i].series}`,\r\n          name: (\r\n            <Link\r\n              to={`/cen/devices/part/${parts[i].id}`}\r\n            >{`${parts[i].name}`}</Link>\r\n          ),\r\n        });\r\n      }\r\n      setPartsTotal(getTotal);\r\n      setPartsData(originPartData);\r\n    }\r\n  }, [bundleGetData, partGetData]);\r\n\r\n  const handleDelete = (key?: number) => {\r\n    if (key && radioValue === 'Bundles') {\r\n      deleteBundleMutation({\r\n        variables: { input: { bundleId: +key } },\r\n      });\r\n    }\r\n    if (key && radioValue === 'Parts') {\r\n      deletePartMutation({\r\n        variables: { input: { partId: +key } },\r\n      });\r\n    }\r\n    selectedRowKeys?.map((key) => {\r\n      if (radioValue === 'Bundles') {\r\n        deleteBundleMutation({\r\n          variables: { input: { bundleId: +key } },\r\n        });\r\n      }\r\n      if (radioValue === 'Parts') {\r\n        deletePartMutation({\r\n          variables: { input: { partId: +key } },\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleCancel = (key: any) => {\r\n    console.log(key);\r\n  };\r\n\r\n  const handleBundlePageChange = (page: number, take: number) => {\r\n    setBundlesPage(page);\r\n    setBundlesTake(take);\r\n    console.log(page, take);\r\n  };\r\n\r\n  const handlePartPageChange = (page: number, take: number) => {\r\n    setPartsPage(page);\r\n    setPartsTake(take);\r\n    console.log(page, take);\r\n  };\r\n\r\n  const save = async (key: React.Key) => {\r\n    console.log(key);\r\n  };\r\n\r\n  const handleRadioChange = (e: any) => {\r\n    setRadioValue(e.target.value);\r\n  };\r\n\r\n  const columns: ColumnsType<Item> = [\r\n    {\r\n      title: 'No',\r\n      dataIndex: 'no',\r\n      width: '10%',\r\n      align: 'center',\r\n      sortDirections: ['ascend', 'descend', 'ascend'],\r\n      sortOrder: 'ascend',\r\n      sorter: (a: { no: number }, b: { no: number }) => a.no - b.no,\r\n    },\r\n    {\r\n      title: 'Series',\r\n      dataIndex: 'series',\r\n      width: '20%',\r\n      align: 'center',\r\n    },\r\n    {\r\n      title: 'Name',\r\n      dataIndex: 'name',\r\n      width: '30%',\r\n      align: 'center',\r\n    },\r\n    {\r\n      title: 'Operation',\r\n      dataIndex: 'operation',\r\n      align: 'center',\r\n      render: (_: string, record: any) => {\r\n        return (\r\n          <span>\r\n            <Typography.Link href=\"#!\">\r\n              <Popconfirm\r\n                title=\"정말 삭제 하시겠습니까?\"\r\n                onConfirm={() => handleDelete(record.key)}\r\n              >\r\n                Delete\r\n              </Popconfirm>\r\n            </Typography.Link>\r\n          </span>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  const rowSelection = {\r\n    onChange: (selectedRowKeys: React.Key[], selectedRows: Item[]) => {\r\n      setSelectedRowKeys(selectedRowKeys);\r\n      // console.log(\r\n      //   `selectedRowKeys: ${selectedRowKeys}`,\r\n      //   'selectedRows: ',\r\n      //   selectedRows,\r\n      // );\r\n    },\r\n    // getCheckboxProps: (record: Item) => ({\r\n    //   disabled: record.name === 'Disabled User',\r\n    //   name: record.name,\r\n    // }),\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Helmet>\r\n        <title>Devices | CEN Portal</title>\r\n      </Helmet>\r\n      <TitleBar>\r\n        <FolderOpenOutlined />\r\n        {' 제품'}\r\n        {radioValue === 'Bundles' ? ' - Bundles' : ' - Parts'}\r\n      </TitleBar>\r\n      <MenuBar>\r\n        <Radio.Group\r\n          options={devicesOptions}\r\n          onChange={handleRadioChange}\r\n          value={radioValue}\r\n        />\r\n        <SButton type=\"primary\" size=\"small\">\r\n          {radioValue === 'Bundles' ? (\r\n            <Link to=\"/cen/devices/add-bundle\">Add</Link>\r\n          ) : (\r\n            <Link to=\"/cen/devices/add-part\">Add</Link>\r\n          )}\r\n        </SButton>\r\n        <SButton type=\"primary\" size=\"small\">\r\n          <Popconfirm\r\n            title=\"정말 삭제 하시겠습니까?\"\r\n            onConfirm={() => handleDelete()}\r\n          >\r\n            Delete\r\n          </Popconfirm>\r\n        </SButton>\r\n      </MenuBar>\r\n      <Form form={form} component={false}>\r\n        {radioValue === 'Bundles' ? (\r\n          <Table<Item>\r\n            bordered\r\n            rowSelection={rowSelection}\r\n            dataSource={bundlesData}\r\n            columns={columns}\r\n            pagination={{\r\n              total: bundlesTotal,\r\n              showTotal: (total, range) =>\r\n                `${range[0]}-${range[1]} of ${total} items`,\r\n              onChange: (page, take) =>\r\n                handleBundlePageChange(page, take as number),\r\n              showSizeChanger: true,\r\n            }}\r\n            loading={bundleLoading}\r\n            size=\"small\"\r\n          />\r\n        ) : (\r\n          <Table<Item>\r\n            bordered\r\n            rowSelection={rowSelection}\r\n            dataSource={partsData}\r\n            columns={columns}\r\n            pagination={{\r\n              total: partsTotal,\r\n              showTotal: (total, range) =>\r\n                `${range[0]}-${range[1]} of ${total} items`,\r\n              onChange: (page, take) =>\r\n                handlePartPageChange(page, take as number),\r\n              showSizeChanger: true,\r\n            }}\r\n            loading={partLoading}\r\n            size=\"small\"\r\n          />\r\n        )}\r\n      </Form>\r\n      <BackTop style={{ right: 10, bottom: 10 }} />\r\n    </Wrapper>\r\n  );\r\n};\r\n","/home/cen/cen-portal-frontend/src/pages/cen/devices/addBundle.tsx",["350","351","352","353","354","355","356","357"],"import React, { useEffect, useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { gql, useMutation } from '@apollo/client';\r\nimport {\r\n  Popconfirm,\r\n  Form,\r\n  Button,\r\n  notification,\r\n  Input,\r\n  Space,\r\n  Select,\r\n  Tooltip,\r\n  TreeSelect,\r\n} from 'antd';\r\nimport {\r\n  FolderOpenOutlined,\r\n  MinusCircleOutlined,\r\n  PlusOutlined,\r\n  QuestionCircleOutlined,\r\n} from '@ant-design/icons';\r\nimport {\r\n  createBundleMutation,\r\n  createBundleMutationVariables,\r\n} from '../../../__generated__/createBundleMutation';\r\nimport { useAllParts } from '../../../hooks/useAllParts';\r\n\r\nconst { Option } = Select;\r\nconst { TreeNode } = TreeSelect;\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst TitleBar = styled.div`\r\n  font-size: 25px;\r\n  font-weight: 700;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst FormColumn = styled.div`\r\n  margin-top: 40px;\r\n`;\r\n\r\nconst CREATE_BUNDLE_MUTATION = gql`\r\n  mutation createBundleMutation($input: CreateBundleInput!) {\r\n    createBundle(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\ninterface IPart {\r\n  id: number;\r\n  name: string;\r\n  series: string;\r\n  description: string | null;\r\n}\r\n\r\ninterface IAllPartsOutput {\r\n  ok: boolean;\r\n  error: string | null;\r\n  totalPages: number | null;\r\n  totalResults: number | null;\r\n  parts: IPart[] | null;\r\n}\r\n\r\nexport const AddBundle = () => {\r\n  const history = useHistory();\r\n  const [form] = Form.useForm();\r\n  const [parts, setParts] = useState<IPart[]>([]);\r\n  const parentList: string[] = [];\r\n\r\n  const {\r\n    data: partData,\r\n    loading: partLoading,\r\n    refetch: reGetParts,\r\n  } = useAllParts(1, 1000);\r\n\r\n  useEffect(() => {\r\n    if (partData && !partLoading) {\r\n      const parts = partData.allParts.parts as IPart[];\r\n      parts.map((part) => {\r\n        if (parentList.indexOf(part.series) === -1) {\r\n          parentList.push(part.series);\r\n        }\r\n      });\r\n      setParts(parts);\r\n    }\r\n  }, [partData, parentList]);\r\n\r\n  const onCompleted = (data: createBundleMutation) => {\r\n    const {\r\n      createBundle: { ok, error },\r\n    } = data;\r\n    if (ok) {\r\n      notification.success({\r\n        message: 'Success!',\r\n        description: '번들 등록 성공',\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n      // setSelectedRowKeys([]);\r\n    } else if (error) {\r\n      notification.error({\r\n        message: 'Error',\r\n        description: `번들 등록 실패. ${error}`,\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  const [createBundleMutation, { data: createBundleData }] = useMutation<\r\n    createBundleMutation,\r\n    createBundleMutationVariables\r\n  >(CREATE_BUNDLE_MUTATION, {\r\n    onCompleted,\r\n  });\r\n\r\n  const onFinish = (values: any) => {\r\n    // console.log('Received values of form:', values);\r\n    const parts: any[] = [];\r\n    for (const part in values.parts) {\r\n      parts.push({\r\n        partId: +values.parts[part].partId,\r\n        num: +values.parts[part].num,\r\n      });\r\n    }\r\n    createBundleMutation({\r\n      variables: {\r\n        input: {\r\n          name: values.name,\r\n          series: values.series,\r\n          parts: parts,\r\n        },\r\n      },\r\n    });\r\n    history.goBack();\r\n    setTimeout(() => {\r\n      history.go(0);\r\n    }, 10);\r\n  };\r\n\r\n  const handleChange = () => {\r\n    form.setFieldsValue({ parts: [] });\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Helmet>\r\n        <title>Add Bundles | CEN Portal</title>\r\n      </Helmet>\r\n      <TitleBar>\r\n        <FolderOpenOutlined />\r\n        {' 제품 등록'}\r\n      </TitleBar>\r\n      <FormColumn>\r\n        <Form form={form} onFinish={onFinish} autoComplete=\"off\">\r\n          <Form.Item\r\n            name=\"name\"\r\n            label={\r\n              <span>\r\n                {'Bundle '}\r\n                <Tooltip title=\"번들명 입력\">\r\n                  <QuestionCircleOutlined />\r\n                </Tooltip>\r\n              </span>\r\n            }\r\n            rules={[{ required: true, message: '번들 이름을 입력해주세요.' }]}\r\n            style={{ width: 300 }}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"series\"\r\n            label={\r\n              <span>\r\n                {'Series '}\r\n                <Tooltip title=\"시리즈명 입력\">\r\n                  <QuestionCircleOutlined />\r\n                </Tooltip>\r\n              </span>\r\n            }\r\n            rules={[{ required: true, message: '시리즈 이름를 입력해주세요.' }]}\r\n            style={{ width: 300 }}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"description\"\r\n            label={\r\n              <span>\r\n                {'Description '}\r\n                <Tooltip title=\"번들 설명 입력\">\r\n                  <QuestionCircleOutlined />\r\n                </Tooltip>\r\n              </span>\r\n            }\r\n            style={{ width: 500 }}\r\n          >\r\n            <Input.TextArea />\r\n          </Form.Item>\r\n          <Form.List name=\"parts\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map((field) => (\r\n                  <Space key={field.key} align=\"baseline\">\r\n                    <Form.Item\r\n                      noStyle\r\n                      shouldUpdate={(prevValues, curValues) =>\r\n                        prevValues.area !== curValues.area ||\r\n                        prevValues.parts !== curValues.parts\r\n                      }\r\n                    >\r\n                      {() => (\r\n                        <Form.Item\r\n                          {...field}\r\n                          label={\r\n                            <span>\r\n                              Part{' '}\r\n                              <Tooltip title=\"번들에 포함된 부품(Parts) 입력\">\r\n                                <QuestionCircleOutlined />\r\n                              </Tooltip>\r\n                            </span>\r\n                          }\r\n                          name={[field.name, 'partId']}\r\n                          fieldKey={[field.fieldKey, 'partId']}\r\n                          rules={[\r\n                            { required: true, message: '부품을 선택해주세요.' },\r\n                          ]}\r\n                        >\r\n                          <TreeSelect\r\n                            showSearch\r\n                            placeholder=\"Please select\"\r\n                            allowClear\r\n                            style={{ width: '300px' }}\r\n                            dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\r\n                          >\r\n                            {parts\r\n                              ? parentList.map((parent) => {\r\n                                  return (\r\n                                    // parent list.\r\n                                    <TreeNode\r\n                                      key={parent}\r\n                                      value={parent}\r\n                                      title={parent}\r\n                                      selectable={false}\r\n                                    >\r\n                                      {parts.map((part) => {\r\n                                        // children list.\r\n                                        if (part.series === parent) {\r\n                                          return (\r\n                                            <TreeNode\r\n                                              key={part.id}\r\n                                              value={part.id}\r\n                                              title={part.name}\r\n                                            />\r\n                                          );\r\n                                        }\r\n                                      })}\r\n                                    </TreeNode>\r\n                                  );\r\n                                })\r\n                              : null}\r\n                          </TreeSelect>\r\n                        </Form.Item>\r\n                      )}\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                      {...field}\r\n                      label={\r\n                        <span>\r\n                          Num{' '}\r\n                          <Tooltip title=\"번들에 포함된 부품(Parts) 입력\">\r\n                            <QuestionCircleOutlined />\r\n                          </Tooltip>\r\n                        </span>\r\n                      }\r\n                      style={{ width: '200px' }}\r\n                      name={[field.name, 'num']}\r\n                      fieldKey={[field.fieldKey, 'num']}\r\n                      rules={[\r\n                        { required: true, message: '부품 수를 입력해주세요' },\r\n                      ]}\r\n                    >\r\n                      <Input type=\"number\" />\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                  </Space>\r\n                ))}\r\n\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"dashed\"\r\n                    onClick={() => add()}\r\n                    block\r\n                    icon={<PlusOutlined />}\r\n                  >\r\n                    Add Parts\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" style={{ marginRight: 8 }}>\r\n              Submit\r\n            </Button>\r\n            <Button type=\"primary\">\r\n              <Popconfirm\r\n                title=\"정말 취소 하시겠습니까?\"\r\n                onConfirm={() => history.goBack()}\r\n              >\r\n                Cancel\r\n              </Popconfirm>\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </FormColumn>\r\n    </Wrapper>\r\n  );\r\n};\r\n","/home/cen/cen-portal-frontend/src/pages/cen/partners/addContact.tsx",["358","359","360","361","362","363","364","365","366"],"import React, { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useHistory, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { gql, useMutation } from '@apollo/client';\nimport {\n  Popconfirm,\n  Form,\n  Button,\n  notification,\n  Input,\n  Space,\n  Select,\n  Tooltip,\n} from 'antd';\nimport {\n  FolderOpenOutlined,\n  MinusCircleOutlined,\n  PlusOutlined,\n  QuestionCircleOutlined,\n} from '@ant-design/icons';\nimport {\n  createContactMutation,\n  createContactMutationVariables,\n} from '../../../__generated__/createContactMutation';\n\nconst { Option } = Select;\n\nconst Wrapper = styled.div`\n  padding: 20px;\n`;\n\nconst TitleBar = styled.div`\n  font-size: 25px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nconst FormColumn = styled.div`\n  margin-top: 40px;\n`;\n\nconst CREATE_CONTACT_MUTATION = gql`\n  mutation createContactMutation($input: CreateContactInput!) {\n    createContact(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\nconst layout = {\n  labelCol: { span: 4 },\n  wrapperCol: { span: 10 },\n};\n\nconst tailLayout = {\n  wrapperCol: { offset: 4, span: 10 },\n};\n\nexport const AddContact = () => {\n  const history = useHistory();\n  const contactId: any = useParams();\n  const [form] = Form.useForm();\n\n  const onCompleted = (data: createContactMutation) => {\n    const {\n      createContact: { ok, error },\n    } = data;\n    if (ok) {\n      notification.success({\n        message: 'Success!',\n        description: '연락처 등록 성공',\n        placement: 'topRight',\n        duration: 1,\n      });\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `연락처 등록 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n      history.go(0);\n    }\n  };\n\n  const [createContactMutation, { data: createContactData }] = useMutation<\n    createContactMutation,\n    createContactMutationVariables\n  >(CREATE_CONTACT_MUTATION, {\n    onCompleted,\n  });\n\n  const onFinish = (values: any) => {\n    createContactMutation({\n      variables: {\n        input: {\n          partnerId: +contactId.id,\n          name: values.name,\n          jobTitle: values.jobTitle,\n          team: values.team,\n          tel: values.tel,\n        },\n      },\n    });\n    history.goBack();\n    setTimeout(() => {\n      history.go(0);\n    }, 10);\n  };\n\n  return (\n    <Wrapper>\n      <Helmet>\n        <title>Add Contacts | CEN Portal</title>\n      </Helmet>\n      <TitleBar>\n        <FolderOpenOutlined />\n        {' 연락처 등록'}\n      </TitleBar>\n      <FormColumn>\n        <Form form={form} onFinish={onFinish} autoComplete=\"off\" {...layout}>\n          <Form.Item\n            name=\"name\"\n            label={\n              <span>\n                {'이름 '}\n                <Tooltip title=\"이름 입력\">\n                  <QuestionCircleOutlined />\n                </Tooltip>\n              </span>\n            }\n            rules={[{ required: true, message: '이름을 입력해주세요.' }]}\n          >\n            <Input style={{ width: 200 }} />\n          </Form.Item>\n          <Form.Item\n            name=\"jobTitle\"\n            label={\n              <span>\n                {'직급/직함 '}\n                <Tooltip title=\"직급/직함 입력\">\n                  <QuestionCircleOutlined />\n                </Tooltip>\n              </span>\n            }\n            rules={[\n              { required: true, message: '직급 or 직함을 입력 해주세요.' },\n            ]}\n          >\n            <Input style={{ width: 200 }} />\n          </Form.Item>\n          <Form.Item\n            name=\"team\"\n            label={\n              <span>\n                {'팀명 '}\n                <Tooltip title=\"팀명 입력\">\n                  <QuestionCircleOutlined />\n                </Tooltip>\n              </span>\n            }\n          >\n            <Input style={{ width: 200 }} />\n          </Form.Item>\n          <Form.Item\n            name=\"tel\"\n            label={\n              <span>\n                {'연락처 '}\n                <Tooltip title=\"연락처 입력\">\n                  <QuestionCircleOutlined />\n                </Tooltip>\n              </span>\n            }\n            rules={[{ required: true, message: '연락처를 입력 해주세요.' }]}\n          >\n            <Input style={{ width: 200 }} />\n          </Form.Item>\n          <Form.Item {...tailLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" style={{ marginRight: 8 }}>\n              Submit\n            </Button>\n            <Button type=\"primary\">\n              <Popconfirm\n                title=\"정말 취소 하시겠습니까?\"\n                onConfirm={() => history.goBack()}\n              >\n                Cancel\n              </Popconfirm>\n            </Button>\n          </Form.Item>\n        </Form>\n      </FormColumn>\n    </Wrapper>\n  );\n};\n","/home/cen/cen-portal-frontend/src/pages/cen/devices/addPart.tsx",["367","368","369","370"],"import React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { gql, useMutation } from '@apollo/client';\r\nimport { Popconfirm, Form, Button, notification, Input, Tooltip } from 'antd';\r\nimport { FolderOpenOutlined, QuestionCircleOutlined } from '@ant-design/icons';\r\nimport {\r\n  createPartMutation,\r\n  createPartMutationVariables,\r\n} from '../../../__generated__/createPartMutation';\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst TitleBar = styled.div`\r\n  font-size: 25px;\r\n  font-weight: 700;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst FormColumn = styled.div`\r\n  margin-top: 40px;\r\n`;\r\n\r\nconst CREATE_PART_MUTATION = gql`\r\n  mutation createPartMutation($input: CreatePartInput!) {\r\n    createPart(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nconst layout = {\r\n  labelCol: { span: 3 },\r\n  wrapperCol: { span: 14 },\r\n};\r\n\r\nconst tailLayout = {\r\n  wrapperCol: { offset: 3, span: 10 },\r\n};\r\n\r\nexport const AddPart = () => {\r\n  const history = useHistory();\r\n  const [form] = Form.useForm();\r\n\r\n  const onCompleted = (data: createPartMutation) => {\r\n    const {\r\n      createPart: { ok, error },\r\n    } = data;\r\n    if (ok) {\r\n      notification.success({\r\n        message: 'Success!',\r\n        description: '번들 등록 성공',\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n      // setSelectedRowKeys([]);\r\n    } else if (error) {\r\n      notification.error({\r\n        message: 'Error',\r\n        description: `번들 등록 실패. ${error}`,\r\n        placement: 'topRight',\r\n        duration: 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  const [createPartMutation, { data: createPartData }] = useMutation<\r\n    createPartMutation,\r\n    createPartMutationVariables\r\n  >(CREATE_PART_MUTATION, {\r\n    onCompleted,\r\n  });\r\n\r\n  const onFinish = (values: any) => {\r\n    // console.log('Received values of form:', values);\r\n    createPartMutation({\r\n      variables: {\r\n        input: {\r\n          name: values.name,\r\n          series: values.series,\r\n          description: values.description,\r\n        },\r\n      },\r\n    });\r\n    history.goBack();\r\n    setTimeout(() => {\r\n      history.go(0);\r\n    }, 10);\r\n  };\r\n\r\n  const handleChange = () => {\r\n    form.setFieldsValue({ parts: [] });\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Helmet>\r\n        <title>Add Parts | CEN Portal</title>\r\n      </Helmet>\r\n      <TitleBar>\r\n        <FolderOpenOutlined />\r\n        {' 제품 등록 - Parts'}\r\n      </TitleBar>\r\n      <FormColumn>\r\n        <Form form={form} onFinish={onFinish} autoComplete=\"off\" {...layout}>\r\n          <Form.Item\r\n            name=\"name\"\r\n            label={\r\n              <span>\r\n                {'Name '}\r\n                <Tooltip title=\"부품명 입력\">\r\n                  <QuestionCircleOutlined />\r\n                </Tooltip>\r\n              </span>\r\n            }\r\n            rules={[{ required: true, message: '부품 이름을 입력해주세요.' }]}\r\n          >\r\n            <Input style={{ width: 300 }} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"series\"\r\n            label={\r\n              <span>\r\n                {'Series '}\r\n                <Tooltip title=\"시리즈명 입력\">\r\n                  <QuestionCircleOutlined />\r\n                </Tooltip>\r\n              </span>\r\n            }\r\n            rules={[{ required: true, message: '시리즈 이름를 입력해주세요.' }]}\r\n          >\r\n            <Input style={{ width: 300 }} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"description\"\r\n            label={\r\n              <span>\r\n                {'Description '}\r\n                <Tooltip title=\"참고사항 입력\">\r\n                  <QuestionCircleOutlined />\r\n                </Tooltip>\r\n              </span>\r\n            }\r\n          >\r\n            <Input.TextArea style={{ width: 500 }} />\r\n          </Form.Item>\r\n          <Form.Item {...tailLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\" style={{ marginRight: 8 }}>\r\n              Submit\r\n            </Button>\r\n            <Button type=\"primary\">\r\n              <Popconfirm\r\n                title=\"정말 취소 하시겠습니까?\"\r\n                onConfirm={() => history.goBack()}\r\n              >\r\n                Cancel\r\n              </Popconfirm>\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </FormColumn>\r\n    </Wrapper>\r\n  );\r\n};\r\n","/home/cen/cen-portal-frontend/src/pages/cen/devices/bundleDetail.tsx",["371","372","373","374","375","376","377","378","379"],"/* eslint-disable react/prop-types */\n/* eslint-disable react/display-name */\nimport React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useHistory, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport {\n  Form,\n  Button,\n  notification,\n  Descriptions,\n  Input,\n  InputNumber,\n  Popconfirm,\n  Table,\n  Typography,\n  Select,\n} from 'antd';\nimport {\n  editBundleMutation,\n  editBundleMutationVariables,\n} from '../../../__generated__/editBundleMutation';\nimport {\n  getBundleQuery,\n  getBundleQueryVariables,\n} from '../../../__generated__/getBundleQuery';\nimport { FolderOpenOutlined } from '@ant-design/icons';\nimport { useMe } from '../../../hooks/useMe';\nimport {\n  UserRole,\n  CreateBundleItemInput,\n} from '../../../__generated__/globalTypes';\n\nconst Wrapper = styled.div`\n  padding: 20px;\n`;\n\nconst TitleBar = styled.div`\n  font-size: 25px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nconst MenuBar = styled.span`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 8px;\n`;\n\nconst TableColumn = styled.div`\n  padding: 8px;\n  background-color: #ffffff;\n`;\n\nconst SButton = styled(Button)`\n  margin-left: 8px;\n`;\n\nconst GET_BUNDLE_QUERY = gql`\n  query getBundleQuery($input: BundleInput!) {\n    findBundleById(input: $input) {\n      ok\n      error\n      bundle {\n        id\n        name\n        series\n        description\n        parts {\n          num\n          part {\n            id\n            name\n            series\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst EDIT_BUNDLE_MUTATION = gql`\n  mutation editBundleMutation($input: EditBundleInput!) {\n    editBundle(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\ninterface IBundleParts {\n  key: string;\n  no: number;\n  name: string;\n  series: string;\n  num: number | null;\n}\n\ninterface IPart {\n  id: number;\n  name: string;\n  series: string;\n}\n\ninterface IBundleItem {\n  num: number | null;\n  part: IPart;\n}\n\ninterface IBundle {\n  id: number;\n  name: string;\n  series: string | null;\n  description: string | null;\n  parts: IBundleItem[] | null;\n}\n\ninterface IBundleOutput {\n  ok: boolean;\n  error: string | null;\n  bundle: IBundle | null;\n}\n\ninterface EditableCellProps extends React.HTMLAttributes<HTMLElement> {\n  editing?: boolean;\n  dataIndex: string;\n  title: string;\n  inputType?: 'select' | 'number' | 'text';\n  record?: IBundle;\n  index?: number;\n  children?: React.ReactNode;\n  //\n  width?: string;\n  editable?: boolean;\n  align?: 'left' | 'center' | 'right' | 'justify' | 'char' | undefined;\n  sortDirections?: string[];\n  defaultSortOrder?: string;\n  sorter?: unknown;\n  render?: unknown;\n}\n\nconst EditableCell: React.FC<EditableCellProps> = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const { Option } = Select;\n  let inputNode;\n  if (inputType === 'select') {\n    inputNode = (\n      <Select>\n        <Option value={1}>test</Option>\n      </Select>\n    );\n  } else if (inputType === 'number') {\n    inputNode = <InputNumber />;\n  } else {\n    inputNode = <Input />;\n  }\n  return (\n    <td {...restProps}>\n      {editing ? (\n        <Form.Item\n          name={dataIndex}\n          style={{ margin: 0 }}\n          rules={[\n            {\n              required: true,\n              message: `Please Input ${title}!`,\n            },\n          ]}\n        >\n          {inputNode}\n        </Form.Item>\n      ) : (\n        children\n      )}\n    </td>\n  );\n};\n\nexport const BundleDetail: React.FC = () => {\n  const originData: IBundleParts[] = [];\n  const { data: meData } = useMe();\n  const [form] = Form.useForm();\n  const history = useHistory();\n  const bundleId: any = useParams();\n  const [isEdit, setIsEdit] = useState(false);\n  const [name, setName] = useState<string>('');\n  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\n  const [series, setSeries] = useState<string | null>('');\n  const [description, setDescription] = useState<string | null>('');\n  const [data, setData] = useState<IBundleParts[]>([]);\n  const [parts, setParts] = useState<IBundleItem[]>([]);\n  const [inputParts, setInputParts] = useState<CreateBundleItemInput[]>([]);\n  const [editingKey, setEditingKey] = useState('');\n\n  const isEditing = (record: IBundleParts) => record.key === editingKey;\n\n  const { data: bundleData, loading: bundleLoading, refetch } = useQuery<\n    getBundleQuery,\n    getBundleQueryVariables\n  >(GET_BUNDLE_QUERY, {\n    variables: {\n      input: {\n        bundleId: +bundleId.id,\n      },\n    },\n  });\n\n  const onCompleted = (data: editBundleMutation) => {\n    const {\n      editBundle: { ok, error },\n    } = data;\n    if (ok) {\n      notification.success({\n        message: 'Success!',\n        description: '변경 성공',\n        placement: 'topRight',\n        duration: 1,\n      });\n      setSelectedRowKeys([]);\n      refetch();\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `변경 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    }\n  };\n\n  const [editBundleMutation, { data: editBundleData }] = useMutation<\n    editBundleMutation,\n    editBundleMutationVariables\n  >(EDIT_BUNDLE_MUTATION, {\n    onCompleted,\n  });\n\n  useEffect(() => {\n    if (bundleData && !bundleLoading) {\n      const bundleInfo = bundleData.findBundleById.bundle as IBundle;\n      const partsInfo = bundleInfo.parts as IBundleItem[];\n      setName(bundleInfo.name);\n      setSeries(bundleInfo.series);\n      setDescription(bundleInfo.description);\n      setParts(bundleInfo.parts as IBundleItem[]);\n      for (let i = 0; i < partsInfo.length; i++) {\n        originData.push({\n          key: `${partsInfo[i].part.id}`,\n          no: 1 + i,\n          name: partsInfo[i].part.name,\n          series: partsInfo[i].part.series,\n          num: partsInfo[i].num,\n        });\n      }\n      setData(originData);\n    }\n  }, [bundleData]);\n\n  const handleChange = (e: any) => {\n    const {\n      target: { name, value },\n    } = e;\n    if (name === 'name') {\n      setName(value);\n    }\n    if (name === 'series') {\n      setSeries(value);\n    }\n    if (name === 'description') {\n      setDescription(value);\n    }\n  };\n\n  const handleEdit = () => {\n    setIsEdit(!isEdit);\n    // form.setFieldsValue({\n    //   ...record,\n    // });\n    // setEditingKey(record.key);\n  };\n\n  const handleCancel = () => {\n    setIsEdit(!isEdit);\n  };\n\n  const handleSave = () => {\n    try {\n      editBundleMutation({\n        variables: {\n          input: {\n            bundleId: +bundleId.id,\n            name: name,\n            series: series,\n            description: description,\n            parts: inputParts,\n          },\n        },\n      });\n      setIsEdit(!isEdit);\n      console.log(parts);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  // const handleAdd = () => {\n  //   const newData = {\n  //     key: `${data.length + 1}`,\n  //     no: data.length + 1,\n  //     name: '',\n  //     series: '',\n  //     num: null,\n  //   };\n  //   setData([...data, newData]);\n  // };\n\n  const handleDelete = () => {\n    let newData: IBundleParts[] = [...data];\n    let newPartsData: CreateBundleItemInput[] = [];\n    selectedRowKeys.map((key) => {\n      const tempData: IBundleParts[] = [];\n      const tempPart: CreateBundleItemInput[] = [];\n      newData.map((k: IBundleParts) => {\n        if (k.key !== `${key}`) {\n          tempData.push(k);\n          tempPart.push({ partId: +k.key, num: k.num });\n        }\n        newData = tempData;\n        newPartsData = tempPart;\n      });\n    });\n    setData(newData);\n    setInputParts(newPartsData);\n  };\n\n  const handleRowDelete = (key: number) => {\n    const newData = [];\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].key !== `${key}`) {\n        newData.push({\n          key: data[i].key,\n          no: data[i].no,\n          name: data[i].name,\n          series: data[i].series,\n          num: data[i].num,\n        });\n      }\n    }\n    setData(newData);\n  };\n\n  const columns: EditableCellProps[] = [\n    {\n      title: 'No',\n      dataIndex: 'no',\n      width: '8%',\n      align: 'center',\n    },\n    {\n      title: '모델명',\n      dataIndex: 'name',\n      width: '35%',\n      align: 'center',\n      editable: true,\n    },\n    {\n      title: '시리즈',\n      dataIndex: 'series',\n      width: '20%',\n      align: 'center',\n      editable: true,\n    },\n    {\n      title: '수량',\n      dataIndex: 'num',\n      width: '8%',\n      align: 'center',\n      editable: true,\n    },\n    {\n      title: 'Operation',\n      dataIndex: 'operation',\n      align: 'center',\n      render: (_: string, record: any) => {\n        return (\n          <span>\n            <Typography.Link href=\"#!\" disabled={!isEdit}>\n              <Popconfirm\n                title=\"정말 삭제 하시겠습니까?\"\n                onConfirm={() => handleRowDelete(record.key)}\n              >\n                Delete\n              </Popconfirm>\n            </Typography.Link>\n          </span>\n        );\n      },\n    },\n  ];\n\n  const mergedColumns = columns.map((col: any) => {\n    if (!col.editable) {\n      return col;\n    }\n    return {\n      ...col,\n      onCell: (record: IBundleParts) => ({\n        record,\n        inputType:\n          col.dataIndex === 'name'\n            ? 'select'\n            : col.dataIndex === 'name'\n            ? 'number'\n            : 'text',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record),\n      }),\n    };\n  });\n\n  const rowSelection = {\n    onChange: (selectedRowKeys: React.Key[], selectedRows: IBundleParts[]) => {\n      setSelectedRowKeys(selectedRowKeys);\n      console.log(\n        `selectedRowKeys: ${selectedRowKeys}`,\n        'selectedRows: ',\n        selectedRows,\n      );\n    },\n    // getCheckboxProps: (record: IPart) => ({\n    //   disabled: record.name === 'Disabled User',\n    //   name: record.name,\n    // }),\n  };\n\n  return (\n    <Wrapper>\n      <Helmet>\n        <title>Devices | CEN Portal</title>\n      </Helmet>\n      <TitleBar>\n        <FolderOpenOutlined />\n        {` 제품 - Bundles`}\n      </TitleBar>\n      <MenuBar>\n        {isEdit ? (\n          <>\n            <Popconfirm title=\"정말 변경 하시겠습니까?\" onConfirm={handleSave}>\n              <SButton type=\"primary\" size=\"small\">\n                Save\n              </SButton>\n            </Popconfirm>\n            <SButton type=\"primary\" size=\"small\" onClick={handleCancel}>\n              Cancel\n            </SButton>\n          </>\n        ) : (\n          <SButton\n            type=\"primary\"\n            size=\"small\"\n            disabled={meData?.me.role !== UserRole.CENSE}\n            onClick={() => handleEdit()}\n          >\n            Edit\n          </SButton>\n        )}\n\n        <SButton\n          type=\"primary\"\n          size=\"small\"\n          disabled={isEdit}\n          onClick={() => history.goBack()}\n        >\n          Back\n        </SButton>\n      </MenuBar>\n\n      <Descriptions\n        title={`${name}`}\n        bordered\n        size=\"small\"\n        labelStyle={{ backgroundColor: '#F0F2F5' }}\n      >\n        <Descriptions.Item label=\"모델명\" span={2}>\n          {isEdit ? (\n            <Input name=\"name\" onChange={handleChange} defaultValue={name} />\n          ) : (\n            name\n          )}\n        </Descriptions.Item>\n        <Descriptions.Item label=\"시리즈\" span={1}>\n          {isEdit ? (\n            <Input\n              name=\"series\"\n              onChange={handleChange}\n              defaultValue={series ? `${series}` : ''}\n            />\n          ) : (\n            series\n          )}\n        </Descriptions.Item>\n        <Descriptions.Item label=\"설명\" span={3}>\n          {isEdit ? (\n            <Input.TextArea\n              name=\"description\"\n              onChange={handleChange}\n              defaultValue={description ? `${description}` : ''}\n            />\n          ) : (\n            description\n          )}\n        </Descriptions.Item>\n      </Descriptions>\n      <Descriptions layout=\"vertical\" bordered size=\"small\">\n        <Descriptions.Item\n          label=\"포함 제품\"\n          style={{ backgroundColor: '#F0F2F5' }}\n        >\n          <TableColumn>\n            {isEdit ? (\n              <MenuBar>\n                {/* <SButton type=\"primary\" size=\"small\" onClick={handleAdd}>\n                  Add a row\n                </SButton> */}\n                <SButton type=\"primary\" size=\"small\">\n                  <Popconfirm\n                    title=\"정말 삭제 하시겠습니까?\"\n                    onConfirm={() => handleDelete()}\n                  >\n                    Delete\n                  </Popconfirm>\n                </SButton>\n              </MenuBar>\n            ) : (\n              ''\n            )}\n\n            <Form form={form} component={false}>\n              <Table\n                components={{\n                  body: {\n                    cell: EditableCell,\n                  },\n                }}\n                columns={mergedColumns}\n                dataSource={data}\n                rowSelection={rowSelection}\n                pagination={false}\n                size=\"small\"\n                bordered\n                loading={bundleLoading}\n              />\n            </Form>\n          </TableColumn>\n        </Descriptions.Item>\n      </Descriptions>\n    </Wrapper>\n  );\n};\n","/home/cen/cen-portal-frontend/src/pages/cen/devices/partDetail.tsx",["380","381","382","383"],"/* eslint-disable react/prop-types */\n/* eslint-disable react/display-name */\nimport React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useHistory, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport {\n  Form,\n  Button,\n  notification,\n  Descriptions,\n  Input,\n  Popconfirm,\n} from 'antd';\nimport {\n  editPartMutation,\n  editPartMutationVariables,\n} from '../../../__generated__/editPartMutation';\nimport {\n  getPartQuery,\n  getPartQueryVariables,\n} from '../../../__generated__/getPartQuery';\nimport { FolderOpenOutlined } from '@ant-design/icons';\nimport { useMe } from '../../../hooks/useMe';\nimport { UserRole } from '../../../__generated__/globalTypes';\n\nconst Wrapper = styled.div`\n  padding: 20px;\n`;\n\nconst TitleBar = styled.div`\n  font-size: 25px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nconst MenuBar = styled.span`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 8px;\n`;\n\nconst SButton = styled(Button)`\n  margin-left: 8px;\n`;\n\nconst GET_PART_QUERY = gql`\n  query getPartQuery($input: PartInput!) {\n    findPartById(input: $input) {\n      ok\n      error\n      part {\n        id\n        name\n        series\n        description\n      }\n    }\n  }\n`;\n\nconst EDIT_PART_MUTATION = gql`\n  mutation editPartMutation($input: EditPartInput!) {\n    editPart(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\ninterface IPart {\n  id: number;\n  name: string;\n  series: string;\n  description: string | null;\n}\n\nexport const PartDetail: React.FC = () => {\n  const history = useHistory();\n  const { data: meData } = useMe();\n  const partId: any = useParams();\n  const [isEdit, setIsEdit] = useState(false);\n  const [name, setName] = useState<string>('');\n  const [series, setSeries] = useState<string>('');\n  const [description, setDescription] = useState<string | null>('');\n\n  const { data: partData, loading, refetch } = useQuery<\n    getPartQuery,\n    getPartQueryVariables\n  >(GET_PART_QUERY, {\n    variables: {\n      input: {\n        partId: +partId.id,\n      },\n    },\n  });\n\n  const onCompleted = (data: editPartMutation) => {\n    const {\n      editPart: { ok, error },\n    } = data;\n    if (ok) {\n      notification.success({\n        message: 'Success!',\n        description: '변경 성공',\n        placement: 'topRight',\n        duration: 1,\n      });\n      refetch();\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `변경 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    }\n  };\n\n  const [editPartMutation, { data: editPartData }] = useMutation<\n    editPartMutation,\n    editPartMutationVariables\n  >(EDIT_PART_MUTATION, {\n    onCompleted,\n  });\n\n  useEffect(() => {\n    if (partData && !loading) {\n      const partInfo = partData.findPartById.part as IPart;\n      setName(partInfo.name);\n      setSeries(partInfo.series);\n      setDescription(partInfo.description);\n    }\n  }, [partData]);\n\n  const handleChange = (e: any) => {\n    const {\n      target: { name, value },\n    } = e;\n    if (name === 'name') {\n      setName(value);\n    }\n    if (name === 'series') {\n      setSeries(value);\n    }\n    if (name === 'description') {\n      setDescription(value);\n    }\n  };\n\n  const handleEdit = () => {\n    console.log('handleEdit');\n    setIsEdit(!isEdit);\n  };\n\n  const handleSave = () => {\n    try {\n      editPartMutation({\n        variables: {\n          input: {\n            partId: +partId.id,\n            name: name,\n            series: series,\n            description: description,\n          },\n        },\n      });\n      setIsEdit(!isEdit);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleCancel = () => {\n    setIsEdit(!isEdit);\n  };\n\n  return (\n    <Wrapper>\n      <Helmet>\n        <title>Devices | CEN Portal</title>\n      </Helmet>\n      <TitleBar>\n        <FolderOpenOutlined />\n        {` 제품 - Parts`}\n      </TitleBar>\n      <MenuBar>\n        {isEdit ? (\n          <>\n            <Popconfirm title=\"정말 변경 하시겠습니까?\" onConfirm={handleSave}>\n              <SButton type=\"primary\" size=\"small\">\n                Save\n              </SButton>\n            </Popconfirm>\n            <SButton type=\"primary\" size=\"small\" onClick={handleCancel}>\n              Cancel\n            </SButton>\n          </>\n        ) : (\n          <SButton\n            type=\"primary\"\n            size=\"small\"\n            disabled={meData?.me.role !== UserRole.CENSE}\n            onClick={() => handleEdit()}\n          >\n            Edit\n          </SButton>\n        )}\n\n        <SButton\n          type=\"primary\"\n          size=\"small\"\n          disabled={isEdit}\n          onClick={() => history.goBack()}\n        >\n          Back\n        </SButton>\n      </MenuBar>\n\n      <Descriptions\n        title={`${name}`}\n        bordered\n        size=\"small\"\n        labelStyle={{ backgroundColor: '#F0F2F5' }}\n      >\n        <Descriptions.Item label=\"모델명\" span={2}>\n          {isEdit ? (\n            <Input name=\"name\" onChange={handleChange} defaultValue={name} />\n          ) : (\n            name\n          )}\n        </Descriptions.Item>\n        <Descriptions.Item label=\"시리즈\" span={1}>\n          {isEdit ? (\n            <Input\n              name=\"series\"\n              onChange={handleChange}\n              defaultValue={series}\n            />\n          ) : (\n            series\n          )}\n        </Descriptions.Item>\n        <Descriptions.Item label=\"설명\" span={3}>\n          {isEdit ? (\n            <Input.TextArea\n              name=\"description\"\n              onChange={handleChange}\n              defaultValue={description ? `${description}` : ''}\n            />\n          ) : (\n            description\n          )}\n        </Descriptions.Item>\n      </Descriptions>\n    </Wrapper>\n  );\n};\n","/home/cen/cen-portal-frontend/src/pages/cen/user/mypage.tsx",["384"],"import React, { useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport styled from 'styled-components';\nimport { gql, useMutation, useApolloClient } from '@apollo/client';\nimport { Button, Form, Input, notification, Descriptions, Spin } from 'antd';\nimport {\n  UserOutlined,\n  LockOutlined,\n  SnippetsOutlined,\n} from '@ant-design/icons';\nimport { useMe } from '../../../hooks/useMe';\nimport {\n  editProfileMutation,\n  editProfileMutationVariables,\n} from '../../../__generated__/editProfileMutation';\n\nconst Wrapper = styled.div`\n  padding: 20px;\n`;\n\nconst TitleBar = styled.div`\n  font-size: 25px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nconst MenuBar = styled.span`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 8px;\n`;\n\nconst ContentBar = styled.div`\n  padding: 0 20%;\n`;\n\nconst SButton = styled(Button)`\n  margin-left: 8px;\n`;\n\nconst EDIT_PROFILE_MUTATION = gql`\n  mutation editProfileMutation($input: EditProfileInput!) {\n    editProfile(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\ninterface IFormValue {\n  password: string | undefined;\n  passwordConfirm: string | undefined;\n  team: string | undefined;\n  jobTitle: string | undefined;\n  bio: string | undefined;\n}\n\nconst layout = {\n  labelCol: { span: 5 },\n  wrapperCol: { span: 15 },\n};\n\nconst tailLayout = {\n  wrapperCol: { offset: 18 },\n};\n\nexport const MyPage: React.FC = () => {\n  const { data: userData, loading } = useMe();\n  const client = useApolloClient();\n  const [isEdit, setIsEdit] = useState<boolean>(false);\n  const [inputValue, setInputValue] = useState<IFormValue>();\n\n  const onCompleted = (data: editProfileMutation) => {\n    const {\n      editProfile: { ok, error },\n    } = data;\n    if (ok && userData?.me.id && inputValue) {\n      client.writeFragment({\n        id: `User:${userData.me.id}`,\n        fragment: gql`\n          fragment VerifiedUser on User {\n            team\n            jobTitle\n            bio\n          }\n        `,\n        data: {\n          team: inputValue.team,\n          jobTitle: inputValue.jobTitle,\n          bio: inputValue.bio,\n        },\n      });\n      notification.success({\n        message: 'Success!',\n        description: `변경 성공`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `변경 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    }\n    setIsEdit(!isEdit);\n  };\n\n  const [editProfileMutation, { data }] = useMutation<\n    editProfileMutation,\n    editProfileMutationVariables\n  >(EDIT_PROFILE_MUTATION, { onCompleted });\n\n  const handleCancel = () => {\n    setIsEdit(!isEdit);\n  };\n\n  const handleEdit = () => {\n    setIsEdit(!isEdit);\n  };\n\n  const onFinish = (value: IFormValue) => {\n    setInputValue(value);\n    console.log(value);\n    if (!value.password && !value.team && !value.jobTitle && !value.bio) {\n      notification.error({\n        message: 'Error',\n        description: `입력한 정보가 없습니다.`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    } else if (!loading) {\n      editProfileMutation({\n        variables: {\n          input: {\n            password: value.password,\n            team: value.team,\n            jobTitle: value.jobTitle,\n            bio: value.bio,\n          },\n        },\n      });\n    }\n  };\n\n  const onFinishFailed = (errorInfo: unknown) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  return (\n    <Wrapper>\n      <Helmet>\n        <title>MyPage | CEN Portal</title>\n      </Helmet>\n      <TitleBar>\n        <UserOutlined />\n        {' 프로필'}\n      </TitleBar>\n      <MenuBar>\n        {isEdit ? (\n          <SButton type=\"primary\" size=\"small\" onClick={handleCancel}>\n            Cancel\n          </SButton>\n        ) : (\n          <SButton type=\"primary\" size=\"small\" onClick={handleEdit}>\n            Edit\n          </SButton>\n        )}\n      </MenuBar>\n      <ContentBar>\n        {isEdit ? (\n          <Form\n            {...layout}\n            name=\"basic\"\n            initialValues={{ remember: true }}\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n          >\n            <Form.Item label=\"이름\">{userData?.me.name}</Form.Item>\n            <Form.Item label=\"이메일\">{userData?.me.email}</Form.Item>\n            <Form.Item label=\"회사\">{userData?.me.company}</Form.Item>\n            <Form.Item\n              label=\"비밀번호\"\n              name=\"password\"\n              rules={[\n                {\n                  required: false,\n                  whitespace: true,\n                  message: '비밀번호를 입력하세요',\n                },\n                { min: 5, message: '비밀번호는 최소 5자리입니다' },\n                { max: 20, message: '비밀번호는 최대 20자리입니다' },\n                {\n                  pattern: /^[a-zA-Z0-9_!@#$%^&*()_+-={},./<>?;:'\"]+$/,\n                  message: '유효하지 않은 문자를 입력했습니다',\n                },\n              ]}\n            >\n              <Input.Password\n                prefix={<LockOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\n                placeholder=\"Password\"\n                name=\"password\"\n                type=\"password\"\n              />\n            </Form.Item>\n            <Form.Item\n              label=\"비밀번호 확인\"\n              name=\"passwordConfirm\"\n              rules={[\n                {\n                  required: false,\n                  whitespace: true,\n                  message: '비밀번호를 재입력 해주세요',\n                },\n                ({ getFieldValue }) => ({\n                  validator(rule, value) {\n                    if (!value || getFieldValue('password') === value) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject('비밀번호가 불일치합니다');\n                  },\n                }),\n              ]}\n            >\n              <Input.Password\n                prefix={<LockOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\n                placeholder=\"Confirm Password\"\n                name=\"passwordConfirm\"\n                type=\"password\"\n              />\n            </Form.Item>\n            <Form.Item\n              label=\"팀명\"\n              name=\"team\"\n              rules={[\n                {\n                  required: false,\n                  message: '팀명을 입력해주세요',\n                  whitespace: true,\n                },\n              ]}\n            >\n              <Input\n                prefix={\n                  <SnippetsOutlined style={{ color: 'rgba(0,0,0,.25)' }} />\n                }\n                placeholder={\n                  userData?.me.team ? (userData?.me.team as string) : `Team`\n                }\n                name=\"team\"\n                type=\"text\"\n              />\n            </Form.Item>\n            <Form.Item\n              label=\"직함/직급\"\n              name=\"jobTitle\"\n              rules={[\n                {\n                  required: false,\n                  message: '직함이나 직책을 입력해주세요',\n                  whitespace: true,\n                },\n              ]}\n            >\n              <Input\n                prefix={\n                  <SnippetsOutlined style={{ color: 'rgba(0,0,0,.25)' }} />\n                }\n                placeholder={\n                  userData?.me.jobTitle\n                    ? (userData?.me.jobTitle as string)\n                    : `Job Title`\n                }\n                name=\"jobTitle\"\n                type=\"text\"\n              />\n            </Form.Item>\n            <Form.Item label=\"자기소개\" name=\"bio\">\n              <Input.TextArea\n                placeholder={\n                  userData?.me.bio ? (userData?.me.bio as string) : `자기소개`\n                }\n                autoSize={{ minRows: 4, maxRows: 10 }}\n                name=\"bio\"\n              />\n            </Form.Item>\n            <Form.Item {...tailLayout}>\n              <SButton type=\"primary\" htmlType=\"submit\">\n                {!loading ? 'Submit' : <Spin />}\n              </SButton>\n            </Form.Item>\n          </Form>\n        ) : (\n          <Descriptions bordered>\n            <Descriptions.Item label=\"이름\" span={3}>\n              {userData?.me.name}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"이메일\" span={3}>\n              {userData?.me.email}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"회사\" span={3}>\n              {userData?.me.company}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"팀\" span={3}>\n              {userData?.me.team}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"직함/직급\" span={3}>\n              {userData?.me.jobTitle}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"자기소개\" span={3}>\n              {userData?.me.bio}\n            </Descriptions.Item>\n          </Descriptions>\n        )}\n      </ContentBar>\n    </Wrapper>\n  );\n};\n","/home/cen/cen-portal-frontend/src/pages/partner/cases/cases.tsx",["385","386","387"],"/* eslint-disable react/display-name */\nimport React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Table, Typography, Button, BackTop } from 'antd';\nimport {\n  ToolOutlined,\n  CommentOutlined,\n  LockOutlined,\n  FileZipOutlined,\n} from '@ant-design/icons';\nimport { ColumnsType } from 'antd/es/table';\nimport { useMe } from '../../../hooks/useMe';\nimport { useAllCases } from '../../../hooks/useAllCases';\nimport {\n  KindRole,\n  KindWorkaround,\n  UserRole,\n} from '../../../__generated__/globalTypes';\n\nconst Wrapper = styled.div`\n  padding: 20px;\n`;\n\nconst TitleBar = styled.div`\n  font-size: 25px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nconst MenuBar = styled.span`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 8px;\n`;\n\nconst SButton = styled(Button)`\n  margin-left: 8px;\n`;\n\ninterface IUser {\n  id: number;\n  name: string;\n  company: string;\n}\n\ninterface IIssueFiles {\n  id: number;\n  path: string;\n}\n\ninterface IIssues {\n  id: number;\n  writer: IUser | null;\n  locked: boolean | null;\n  kind: string | null;\n  title: string;\n  files: IIssueFiles[] | null;\n  createAt: any;\n  updateAt: any;\n  commentsNum: number;\n}\n\ninterface ICasesData {\n  key: string;\n  no: number;\n  title: string | JSX.Element;\n  kind: string | null;\n  locked: boolean | null;\n  writer: IUser['name'] | null;\n  company: IUser['company'] | null;\n  filesCount: number;\n  commentsNum: number;\n  createAt: string;\n}\n\nexport const Case: React.FC = () => {\n  const originData: ICasesData[] = [];\n  const [data, setData] = useState<ICasesData[]>([]);\n  const [page, setPage] = useState<number>(1);\n  const [take, setTake] = useState<number>(10);\n  const [total, setTotal] = useState<number>(0);\n  const { data: meData } = useMe();\n  const {\n    data: allCasesData,\n    loading: allCasesLoading,\n    refetch: reGetData,\n  } = useAllCases(page, take);\n\n  useEffect(() => {\n    if (allCasesData && !allCasesLoading) {\n      const cases = allCasesData.allIssues.issues as IIssues[];\n      const getTotalResults = allCasesData.allIssues.totalResults as number;\n      for (let i = 0; i < cases.length; i++) {\n        originData.push({\n          key: `${cases[i].id}`,\n          no: cases[i].id,\n          title: (\n            <>\n              {cases[i].kind === KindRole.Question\n                ? `[문의] `\n                : `[${cases[i].kind}] `}\n              <Typography.Link\n                disabled={\n                  meData?.me.role === UserRole.CENSE ||\n                  cases[i].writer?.id === meData?.me.id\n                    ? false\n                    : (cases[i].locked as boolean)\n                }\n                href={`/partner/cases/${cases[i].id}`}\n              >{`${cases[i].title}`}</Typography.Link>\n              {cases[i].files?.length !== 0 ? (\n                <span style={{ fontSize: '11px' }}>\n                  {' '}\n                  <FileZipOutlined />\n                  {cases[i].files?.length}\n                </span>\n              ) : null}\n              {cases[i].commentsNum ? (\n                <span style={{ fontSize: '11px' }}>\n                  {' '}\n                  <CommentOutlined />\n                  {cases[i].commentsNum}\n                </span>\n              ) : null}\n              {cases[i].locked ? (\n                <span style={{ fontSize: '11px' }}>\n                  {' '}\n                  <LockOutlined />\n                </span>\n              ) : null}\n            </>\n          ),\n          kind: cases[i].kind,\n          locked: cases[i].locked,\n          writer: cases[i].writer?.name as string,\n          company: cases[i].writer?.company as string,\n          filesCount: cases[i].files?.length as number,\n          commentsNum: cases[i].commentsNum,\n          createAt: new Date(cases[i].createAt).toLocaleDateString(),\n        });\n      }\n      setTotal(getTotalResults);\n      setData(originData);\n    }\n    reGetData();\n    console.log(allCasesData);\n    console.log(originData);\n  }, [allCasesData]);\n\n  const handlePageChange = (page: number, take: number) => {\n    setPage(page);\n    setTake(take);\n  };\n\n  const columns: ColumnsType<ICasesData> = [\n    {\n      title: 'No',\n      dataIndex: 'no',\n      width: '1%',\n      align: 'center',\n    },\n    {\n      title: '제목',\n      dataIndex: 'title',\n      width: '50%',\n      align: 'center',\n    },\n    {\n      title: '소속',\n      dataIndex: 'company',\n      width: '20%',\n      align: 'center',\n    },\n    {\n      title: '작성자',\n      dataIndex: 'writer',\n      width: '10%',\n      align: 'center',\n    },\n    {\n      title: '작성일',\n      dataIndex: 'createAt',\n      width: '20%',\n      align: 'center',\n    },\n  ];\n\n  return (\n    <Wrapper>\n      <Helmet>\n        <title>Cases | CEN Portal</title>\n      </Helmet>\n      <TitleBar>\n        <ToolOutlined />\n        {' Cases'}\n      </TitleBar>\n      <MenuBar>\n        <SButton type=\"primary\" size=\"small\">\n          <Link to=\"/partner/cases/add-case\">New</Link>\n        </SButton>\n      </MenuBar>\n      <Table<ICasesData>\n        bordered\n        dataSource={data}\n        columns={columns}\n        pagination={{\n          total,\n          showTotal: (total, range) =>\n            `${range[0]}-${range[1]} of ${total} items`,\n          onChange: (page, take) => handlePageChange(page, take as number),\n          showSizeChanger: true,\n        }}\n        loading={allCasesLoading}\n        size=\"small\"\n      />\n      <BackTop style={{ right: 10, bottom: 10 }} />\n    </Wrapper>\n  );\n};\n","/home/cen/cen-portal-frontend/src/pages/partner/workarounds/workarounds.tsx",["388","389"],"/* eslint-disable react/display-name */\nimport React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Table, Typography, Button, BackTop } from 'antd';\nimport {\n  ToolOutlined,\n  CommentOutlined,\n  LockOutlined,\n  FileZipOutlined,\n} from '@ant-design/icons';\nimport { ColumnsType } from 'antd/es/table';\nimport { useMe } from '../../../hooks/useMe';\nimport { useAllWorkarounds } from '../../../hooks/useAllWorkarounds';\nimport { UserRole } from '../../../__generated__/globalTypes';\n\nconst Wrapper = styled.div`\n  padding: 20px;\n`;\n\nconst TitleBar = styled.div`\n  font-size: 25px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nconst MenuBar = styled.span`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 8px;\n`;\n\nconst SButton = styled(Button)`\n  margin-left: 8px;\n`;\n\ninterface IUser {\n  id: number;\n  name: string;\n  company: string;\n}\n\ninterface IWorkaroundFiles {\n  id: number;\n  path: string;\n}\n\ninterface IWorkarounds {\n  id: number;\n  writer: IUser | null;\n  locked: boolean | null;\n  kind: string | null;\n  title: string;\n  files: IWorkaroundFiles[] | null;\n  createAt: any;\n  updateAt: any;\n  commentsNum: number;\n}\n\ninterface IWorkaroundsData {\n  key: string;\n  no: number;\n  title: string | JSX.Element;\n  kind: string | null;\n  locked: boolean | null;\n  writer: IUser['name'] | null;\n  company: IUser['company'] | null;\n  filesCount: number;\n  commentsNum: number;\n  createAt: string;\n}\n\nexport const Workaround: React.FC = () => {\n  const originData: IWorkaroundsData[] = [];\n  const [data, setData] = useState<IWorkaroundsData[]>([]);\n  const [page, setPage] = useState<number>(1);\n  const [take, setTake] = useState<number>(10);\n  const [total, setTotal] = useState<number>(0);\n  const { data: meData } = useMe();\n  const {\n    data: allWorkaroundsData,\n    loading: allWorkaroundsLoading,\n    refetch: reGetData,\n  } = useAllWorkarounds(page, take);\n\n  useEffect(() => {\n    if (allWorkaroundsData && !allWorkaroundsLoading) {\n      const workarounds = allWorkaroundsData.allWorkarounds\n        .workarounds as IWorkarounds[];\n      const getTotalResults = allWorkaroundsData.allWorkarounds\n        .totalResults as number;\n      for (let i = 0; i < workarounds.length; i++) {\n        originData.push({\n          key: `${workarounds[i].id}`,\n          no: workarounds[i].id,\n          title: (\n            <>\n              {`[${workarounds[i].kind}] `}\n              <Typography.Link\n                disabled={\n                  meData?.me.role === UserRole.CENSE ||\n                  workarounds[i].writer?.id === meData?.me.id\n                    ? false\n                    : (workarounds[i].locked as boolean)\n                }\n                href={`/partner/workarounds/${workarounds[i].id}`}\n              >{`${workarounds[i].title}`}</Typography.Link>\n              {workarounds[i].files?.length !== 0 ? (\n                <span style={{ fontSize: '11px' }}>\n                  {' '}\n                  <FileZipOutlined />\n                  {workarounds[i].files?.length}\n                </span>\n              ) : null}\n              {workarounds[i].commentsNum ? (\n                <span style={{ fontSize: '11px' }}>\n                  {' '}\n                  <CommentOutlined />\n                  {workarounds[i].commentsNum}\n                </span>\n              ) : null}\n              {workarounds[i].locked ? (\n                <span style={{ fontSize: '11px' }}>\n                  {' '}\n                  <LockOutlined />\n                </span>\n              ) : null}\n            </>\n          ),\n          kind: workarounds[i].kind,\n          locked: workarounds[i].locked,\n          writer: workarounds[i].writer?.name as string,\n          company: workarounds[i].writer?.company as string,\n          filesCount: workarounds[i].files?.length as number,\n          commentsNum: workarounds[i].commentsNum,\n          createAt: new Date(workarounds[i].createAt).toLocaleDateString(),\n        });\n      }\n      setTotal(getTotalResults);\n      setData(originData);\n    }\n    reGetData();\n    console.log(allWorkaroundsData);\n    console.log(originData);\n  }, [allWorkaroundsData]);\n\n  const handlePageChange = (page: number, take: number) => {\n    setPage(page);\n    setTake(take);\n  };\n\n  const columns: ColumnsType<IWorkaroundsData> = [\n    {\n      title: 'No',\n      dataIndex: 'no',\n      width: '1%',\n      align: 'center',\n    },\n    {\n      title: '제목',\n      dataIndex: 'title',\n      width: '50%',\n      align: 'center',\n    },\n    {\n      title: '소속',\n      dataIndex: 'company',\n      width: '20%',\n      align: 'center',\n    },\n    {\n      title: '작성자',\n      dataIndex: 'writer',\n      width: '10%',\n      align: 'center',\n    },\n    {\n      title: '작성일',\n      dataIndex: 'createAt',\n      width: '20%',\n      align: 'center',\n    },\n  ];\n\n  return (\n    <Wrapper>\n      <Helmet>\n        <title>Workarounds | CEN Portal</title>\n      </Helmet>\n      <TitleBar>\n        <ToolOutlined />\n        {' Workarounds'}\n      </TitleBar>\n      <MenuBar>\n        <SButton\n          type=\"primary\"\n          size=\"small\"\n          disabled={UserRole.CENSE !== meData?.me.role}\n        >\n          <Link to=\"/partner/workarounds/add-workaround\">New</Link>\n        </SButton>\n      </MenuBar>\n      <Table<IWorkaroundsData>\n        bordered\n        dataSource={data}\n        columns={columns}\n        pagination={{\n          total,\n          showTotal: (total, range) =>\n            `${range[0]}-${range[1]} of ${total} items`,\n          onChange: (page, take) => handlePageChange(page, take as number),\n          showSizeChanger: true,\n        }}\n        loading={allWorkaroundsLoading}\n        size=\"small\"\n      />\n      <BackTop style={{ right: 10, bottom: 10 }} />\n    </Wrapper>\n  );\n};\n","/home/cen/cen-portal-frontend/src/pages/partner/workarounds/addWorkaround.tsx",["390","391","392","393","394","395","396","397","398","399","400"],"/home/cen/cen-portal-frontend/src/pages/partner/firmwares/firmwares.tsx",["401","402"],"/* eslint-disable react/display-name */\nimport React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Table, Typography, Button, BackTop } from 'antd';\nimport {\n  DesktopOutlined,\n  LockOutlined,\n  FileZipOutlined,\n} from '@ant-design/icons';\nimport { ColumnsType } from 'antd/es/table';\nimport { useMe } from '../../../hooks/useMe';\nimport { useAllFirmwares } from '../../../hooks/useAllFirmwares';\nimport { UserRole } from '../../../__generated__/globalTypes';\n\nconst Wrapper = styled.div`\n  padding: 20px;\n`;\n\nconst TitleBar = styled.div`\n  font-size: 25px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nconst MenuBar = styled.span`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 8px;\n`;\n\nconst SButton = styled(Button)`\n  margin-left: 8px;\n`;\n\ninterface IUser {\n  id: number;\n  name: string;\n  company: string;\n}\n\ninterface IFirmwareFiles {\n  id: number;\n  path: string;\n}\n\ninterface IFirmwares {\n  id: number;\n  writer: IUser | null;\n  locked: boolean | null;\n  kind: string | null;\n  title: string;\n  files: IFirmwareFiles[] | null;\n  createAt: any;\n  updateAt: any;\n}\n\ninterface IFirmwaresData {\n  key: string;\n  no: number;\n  title: string | JSX.Element;\n  kind: string | null;\n  locked: boolean | null;\n  writer: IUser['name'] | null;\n  company: IUser['company'] | null;\n  filesCount: number;\n  createAt: string;\n}\n\nexport const Firmware: React.FC = () => {\n  const originData: IFirmwaresData[] = [];\n  const [data, setData] = useState<IFirmwaresData[]>([]);\n  const [page, setPage] = useState<number>(1);\n  const [take, setTake] = useState<number>(10);\n  const [total, setTotal] = useState<number>(0);\n  const { data: meData } = useMe();\n  const {\n    data: allFirmwaresData,\n    loading: allFirmwaresLoading,\n    refetch: reGetData,\n  } = useAllFirmwares(page, take);\n\n  useEffect(() => {\n    if (allFirmwaresData && !allFirmwaresLoading) {\n      const firmwares = allFirmwaresData.allFirmwares.firmwares as IFirmwares[];\n      const getTotalResults = allFirmwaresData.allFirmwares\n        .totalResults as number;\n      for (let i = 0; i < firmwares.length; i++) {\n        originData.push({\n          key: `${firmwares[i].id}`,\n          no: firmwares[i].id,\n          title: (\n            <>\n              {`[${firmwares[i].kind}] `}\n              <Typography.Link\n                disabled={\n                  meData?.me.role === UserRole.CENSE ||\n                  firmwares[i].writer?.id === meData?.me.id\n                    ? false\n                    : (firmwares[i].locked as boolean)\n                }\n                href={`/partner/firmwares/${firmwares[i].id}`}\n              >{`${firmwares[i].title}`}</Typography.Link>\n              {firmwares[i].files?.length !== 0 ? (\n                <span style={{ fontSize: '11px' }}>\n                  {' '}\n                  <FileZipOutlined />\n                  {firmwares[i].files?.length}\n                </span>\n              ) : null}\n              {firmwares[i].locked ? (\n                <span style={{ fontSize: '11px' }}>\n                  {' '}\n                  <LockOutlined />\n                </span>\n              ) : null}\n            </>\n          ),\n          kind: firmwares[i].kind,\n          locked: firmwares[i].locked,\n          writer: firmwares[i].writer?.name as string,\n          company: firmwares[i].writer?.company as string,\n          filesCount: firmwares[i].files?.length as number,\n          createAt: new Date(firmwares[i].createAt).toLocaleDateString(),\n        });\n      }\n      setTotal(getTotalResults);\n      setData(originData);\n    }\n    reGetData();\n    console.log(allFirmwaresData);\n    console.log(originData);\n  }, [allFirmwaresData]);\n\n  const handlePageChange = (page: number, take: number) => {\n    setPage(page);\n    setTake(take);\n  };\n\n  const columns: ColumnsType<IFirmwaresData> = [\n    {\n      title: 'No',\n      dataIndex: 'no',\n      width: '1%',\n      align: 'center',\n    },\n    {\n      title: '제목',\n      dataIndex: 'title',\n      width: '50%',\n      align: 'center',\n    },\n    {\n      title: '소속',\n      dataIndex: 'company',\n      width: '20%',\n      align: 'center',\n    },\n    {\n      title: '작성자',\n      dataIndex: 'writer',\n      width: '10%',\n      align: 'center',\n    },\n    {\n      title: '작성일',\n      dataIndex: 'createAt',\n      width: '20%',\n      align: 'center',\n    },\n  ];\n\n  return (\n    <Wrapper>\n      <Helmet>\n        <title>Firmwares | CEN Portal</title>\n      </Helmet>\n      <TitleBar>\n        <DesktopOutlined />\n        {' Firmwares'}\n      </TitleBar>\n      <MenuBar>\n        <SButton\n          type=\"primary\"\n          size=\"small\"\n          disabled={UserRole.CENSE !== meData?.me.role}\n        >\n          <Link to=\"/partner/firmwares/add-firmware\">New</Link>\n        </SButton>\n      </MenuBar>\n      <Table<IFirmwaresData>\n        bordered\n        dataSource={data}\n        columns={columns}\n        pagination={{\n          total,\n          showTotal: (total, range) =>\n            `${range[0]}-${range[1]} of ${total} items`,\n          onChange: (page, take) => handlePageChange(page, take as number),\n          showSizeChanger: true,\n        }}\n        loading={allFirmwaresLoading}\n        size=\"small\"\n      />\n      <BackTop style={{ right: 10, bottom: 10 }} />\n    </Wrapper>\n  );\n};\n","/home/cen/cen-portal-frontend/src/pages/partner/cases/caseDetail.tsx",["403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426"],"import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { Helmet } from 'react-helmet';\nimport { useHistory, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport 'codemirror/lib/codemirror.css';\nimport '@toast-ui/editor/dist/toastui-editor.css';\nimport { Editor, Viewer } from '@toast-ui/react-editor';\nimport {\n  Button,\n  Comment,\n  Tooltip,\n  List,\n  Input,\n  Form,\n  notification,\n  Popconfirm,\n  Upload,\n  Select,\n  Checkbox,\n} from 'antd';\nimport {\n  getIssueQuery,\n  getIssueQueryVariables,\n} from '../../../__generated__/getIssueQuery';\nimport { InboxOutlined, ToolOutlined, LockOutlined } from '@ant-design/icons';\nimport { KindRole, UserRole } from '../../../__generated__/globalTypes';\nimport moment from 'moment';\nimport { useMe } from '../../../hooks/useMe';\nimport {\n  deleteIssueCommentMutation,\n  deleteIssueCommentMutationVariables,\n} from '../../../__generated__/deleteIssueCommentMutation';\nimport {\n  createIssueCommentMutation,\n  createIssueCommentMutationVariables,\n} from '../../../__generated__/createIssueCommentMutation';\nimport {\n  deleteIssueMutation,\n  deleteIssueMutationVariables,\n} from '../../../__generated__/deleteIssueMutation';\nimport {\n  editIssueMutation,\n  editIssueMutationVariables,\n} from '../../../__generated__/editIssueMutation';\n\nconst { TextArea } = Input;\nconst { Option } = Select;\nconst { Dragger } = Upload;\n\nconst Wrapper = styled.div`\n  padding: 20px;\n`;\n\nconst TitleBar = styled.div`\n  font-size: 25px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nconst MenuBar = styled.span`\n  margin: 20px 0;\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst TitleColumn = styled.div`\n  margin-bottom: 8px;\n  font-weight: bold;\n  font-size: 18px;\n`;\n\nconst ContentColumn = styled.div`\n  margin: 20px 0;\n  padding: 10px;\n  min-height: 350px;\n  border-top: solid #d0d0d0 1px;\n  border-bottom: solid #d0d0d0 1px;\n`;\n\nconst FilesColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst FilesTitleColumn = styled.div`\n  margin: 0 0 10px;\n  font-weight: bold;\n  font-size: 14px;\n`;\n\nconst CommentColumn = styled.div`\n  margin-top: 10px;\n`;\n\nconst SButton = styled(Button)`\n  margin-left: 8px;\n`;\n\nconst GET_ISSUE_QUERY = gql`\n  query getIssueQuery($input: GetIssueInput!) {\n    getIssue(input: $input) {\n      ok\n      error\n      issue {\n        id\n        title\n        kind\n        content\n        locked\n        writer {\n          id\n          company\n          name\n        }\n        files {\n          id\n          path\n        }\n        comment {\n          id\n          writer {\n            id\n            company\n            name\n          }\n          comment\n          groupNum\n          depth\n          order\n          createAt\n          deleteAt\n        }\n      }\n    }\n  }\n`;\n\nconst DELETE_COMMENT_MUTATION = gql`\n  mutation deleteIssueCommentMutation($input: DeleteIssueCommentInput!) {\n    deleteIssueComment(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\nconst CREATE_COMMENT_MUTATION = gql`\n  mutation createIssueCommentMutation($input: CreateIssueCommentInput!) {\n    createIssueComment(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\nconst DELETE_ISSUE_MUTATION = gql`\n  mutation deleteIssueMutation($input: DeleteIssueInput!) {\n    deleteIssue(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\nconst EDIT_ISSUE_MUTATION = gql`\n  mutation editIssueMutation($input: EditIssueInput!) {\n    editIssue(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\ninterface IIssueUser {\n  id: number;\n  company: string;\n  name: string;\n}\n\ninterface IIssueFiles {\n  id: number;\n  path: string;\n}\n\ninterface ICommentUser {\n  id: number;\n  company: string;\n  name: string;\n}\n\ninterface IIssueComments {\n  id: number;\n  writer: ICommentUser | null;\n  comment: string;\n  groupNum: number;\n  depth: number;\n  order: number;\n  createAt: any;\n  deleteAt: any | null;\n}\n\ninterface IOriginComment {\n  key: string;\n  actions: JSX.Element[];\n  author: string | null;\n  content: string;\n  datetime?: JSX.Element;\n  depth: number;\n  isReply?: boolean;\n}\n\ninterface IIssues {\n  id: number;\n  title: string;\n  kind: KindRole;\n  content: string;\n  locked: boolean | null;\n  writer: IIssueUser | null;\n  files: IIssueFiles[] | null;\n  comment: IIssueComments[] | null;\n}\n\ninterface IUploadedFile {\n  filename: string;\n  originalname: string;\n}\n\ninterface IDefaultFileList {\n  uid: string;\n  name: string;\n  status: string;\n  url: string;\n}\n\nconst CommentList = ({ comments }: any) => {\n  return (\n    <List\n      dataSource={comments}\n      header={`${comments.length} ${\n        comments.length > 1 ? 'comments' : 'comment'\n      }`}\n      itemLayout=\"horizontal\"\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'flex-end',\n      }}\n      renderItem={(props: any) => {\n        return (\n          <Comment\n            {...props}\n            style={{\n              position: 'relative',\n              left: `${(props.depth - 1) * 20}px`,\n              width: `calc(100% - ${(props.depth - 1) * 20}px)`,\n              marginTop: '5px',\n            }}\n          />\n        );\n      }}\n    />\n  );\n};\n\nconst CommentEditor = ({ onChange, onSubmit, submitting, value }: any) => (\n  <>\n    <Form.Item name=\"commentValue\">\n      <TextArea\n        name=\"commentValue\"\n        rows={4}\n        onChange={onChange}\n        value={value}\n      />\n    </Form.Item>\n    <Form.Item>\n      <Button\n        htmlType=\"submit\"\n        loading={submitting}\n        onClick={onSubmit}\n        type=\"primary\"\n      >\n        Add Comment\n      </Button>\n    </Form.Item>\n  </>\n);\n\nexport const CaseDetail: React.FC = () => {\n  const { data: meData } = useMe();\n  const originComment: IOriginComment[] = [];\n  const history = useHistory();\n  const caseId: any = useParams();\n  const viewerRef = useRef<Viewer>();\n  const editorRef = React.createRef<any>();\n  const [form] = Form.useForm();\n  const [content, setContent] = useState<string>();\n  const [writer, setWriter] = useState<ICommentUser>();\n  const [loadedData, setLoadedData] = useState<IIssues>();\n  const [commentData, setCommentData] = useState<IOriginComment[]>([]);\n  const [files, setFiles] = useState<IIssueFiles[]>([]);\n  const [submitting, setSubmitting] = useState<boolean>(false);\n  const [commentValue, setCommentValue] = useState<string>();\n  const [isEdit, setIsEdit] = useState<boolean>(false);\n  const [uploadedFile, setUploadedFile] = useState<IUploadedFile[]>([]);\n  const [isUploading, setIsUploading] = useState<boolean>(false);\n  const [checkLocked, setCheckLocked] = useState<boolean>(false);\n  const [defaultFileList, setDefaultFileList] = useState<any[]>([]);\n  const {\n    data: caseDetailData,\n    loading: caseDetailLoading,\n    refetch,\n  } = useQuery<getIssueQuery, getIssueQueryVariables>(GET_ISSUE_QUERY, {\n    variables: {\n      input: {\n        id: +caseId.id,\n      },\n    },\n  });\n\n  const onCommentDeleteCompleted = (data: deleteIssueCommentMutation) => {\n    const {\n      deleteIssueComment: { ok, error },\n    } = data;\n    if (ok) {\n      notification.success({\n        message: 'Success!',\n        description: `댓글 삭제 성공`,\n        placement: 'topRight',\n        duration: 1,\n      });\n      refetch();\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `댓글 삭제 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    }\n  };\n\n  const onCommentCreateCompleted = (data: createIssueCommentMutation) => {\n    const {\n      createIssueComment: { ok, error },\n    } = data;\n    if (ok) {\n      notification.success({\n        message: 'Success!',\n        description: `댓글 작성 성공`,\n        placement: 'topRight',\n        duration: 1,\n      });\n      setSubmitting(false);\n      refetch();\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `댓글 작성 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    }\n  };\n\n  const onIssueDeleteCompleted = (data: deleteIssueMutation) => {\n    const {\n      deleteIssue: { ok, error },\n    } = data;\n    if (ok) {\n      notification.success({\n        message: 'Success!',\n        description: `삭제 성공`,\n        placement: 'topRight',\n        duration: 1,\n      });\n      history.push('/partner/cases/');\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `삭제 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    }\n  };\n\n  const onIssueEditCompleted = (data: editIssueMutation) => {\n    const {\n      editIssue: { ok, error },\n    } = data;\n    if (ok) {\n      notification.success({\n        message: 'Success!',\n        description: `수정 성공`,\n        placement: 'topRight',\n        duration: 1,\n      });\n      history.push(`/partner/cases/${caseId.id}`);\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `수정 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    }\n    refetch();\n  };\n\n  const [\n    deleteIssueCommentMutation,\n    { data: deleteIssueCommentData },\n  ] = useMutation<\n    deleteIssueCommentMutation,\n    deleteIssueCommentMutationVariables\n  >(DELETE_COMMENT_MUTATION, { onCompleted: onCommentDeleteCompleted });\n\n  const [\n    createIssueCommentMutation,\n    { data: createIssueCommentData },\n  ] = useMutation<\n    createIssueCommentMutation,\n    createIssueCommentMutationVariables\n  >(CREATE_COMMENT_MUTATION, { onCompleted: onCommentCreateCompleted });\n\n  const [deleteIssueMutation] = useMutation<\n    deleteIssueMutation,\n    deleteIssueMutationVariables\n  >(DELETE_ISSUE_MUTATION, {\n    onCompleted: onIssueDeleteCompleted,\n  });\n\n  const [editIssueMutation] = useMutation<\n    editIssueMutation,\n    editIssueMutationVariables\n  >(EDIT_ISSUE_MUTATION, {\n    onCompleted: onIssueEditCompleted,\n  });\n\n  useEffect(() => {\n    if (viewerRef.current && caseDetailData) {\n      const issue = caseDetailData.getIssue.issue as IIssues;\n      const issueComment = issue.comment as IIssueComments[];\n      setContent(issue.content);\n      setWriter(issue.writer as ICommentUser);\n      setFiles(issue.files as IIssueFiles[]);\n      setLoadedData(issue as IIssues);\n      setCheckLocked(issue.locked as boolean);\n      viewerRef.current?.getInstance().setMarkdown(issue.content as string);\n      issueComment.map((comment, index) => {\n        originComment.push({\n          key: `${comment.id}`,\n          actions: [\n            // <span key={`comment-reply-${comment.id}`}>Reply to</span>,\n            // <span\n            //   key={comment.id}\n            //   data-id={`${comment.id}`}\n            //   onClick={handleEditClick}\n            // >\n            //   Edit\n            // </span>,\n            <span key={comment.id}>\n              {meData?.me.id === comment.writer?.id && (\n                <Popconfirm\n                  title=\"정말 삭제 하시겠습니까?\"\n                  onConfirm={() => handleCommentDelete(comment.id)}\n                  disabled={meData?.me.id !== comment.writer?.id}\n                >\n                  Delete\n                </Popconfirm>\n              )}\n            </span>,\n          ],\n          author: comment.writer?.company\n            ? comment.writer?.company === 'CEN'\n              ? `${comment.writer?.name} [코어엣지네트웍스]`\n              : `${comment.writer?.name} [${comment.writer?.company}]`\n            : null,\n          content: comment.comment,\n          datetime: (\n            <Tooltip\n              title={moment().format(\n                new Date(comment.createAt).toLocaleString(),\n              )}\n            >\n              <span>{moment(comment.createAt).fromNow()}</span>\n            </Tooltip>\n          ),\n          depth: comment.depth,\n          isReply: false,\n        });\n      });\n      setCommentData(originComment);\n      const uploadedList: IDefaultFileList[] = [];\n      files.map((file, index) => {\n        uploadedList.push({\n          uid: `${index + 1}`,\n          name: `${file.path}`,\n          status: 'done',\n          url: `http://localhost:4000/uploads/issues/${file.path}`,\n        });\n      });\n      setDefaultFileList(uploadedList);\n    }\n    refetch();\n  }, [caseDetailData, loadedData]);\n\n  const handleEditClick = (event: any) => {\n    console.log(event.target.attributes[0].value);\n  };\n\n  const handleCommentDelete = (id: number) => {\n    deleteIssueCommentMutation({\n      variables: { input: { commentId: id } },\n    });\n  };\n\n  const handleIssueDelete = () => {\n    deleteIssueMutation({\n      variables: { input: { issueId: +caseId.id } },\n    });\n  };\n\n  const handleChange = (event: any) => {\n    const {\n      target: { value },\n    } = event;\n    setCommentValue(value);\n  };\n\n  const handleSubmit = () => {\n    if (!commentValue) {\n      return;\n    }\n    setSubmitting(true);\n    createIssueCommentMutation({\n      variables: {\n        input: {\n          issueId: +caseId.id,\n          comment: commentValue,\n        },\n      },\n    });\n    setCommentValue('');\n  };\n\n  const handleSave = async (values: any) => {\n    const getContent = await editorRef.current.getInstance().getMarkdown();\n    if (isUploading) {\n      notification.error({\n        message: 'Error',\n        description: `파일 업로드 중입니다. 잠시 후에 시도해주세요.`,\n        placement: 'topRight',\n        duration: 1.5,\n      });\n      return;\n    }\n    if (!getContent) {\n      notification.error({\n        message: 'Error',\n        description: `내용을 입력해 주세요.`,\n        placement: 'topRight',\n        duration: 1,\n      });\n      return;\n    }\n    setContent(getContent);\n    setIsEdit(!isEdit);\n    const newFileForm: any[] = [];\n    if (defaultFileList.length !== 0) {\n      defaultFileList.map((file) => {\n        newFileForm.push({ path: file.name });\n      });\n    }\n    if (uploadedFile.length !== 0) {\n      uploadedFile.map((file) => {\n        newFileForm.push({\n          path: file.filename,\n        });\n      });\n    }\n    setFiles(newFileForm); // for render files\n    editIssueMutation({\n      variables: {\n        input: {\n          issueId: +caseId.id,\n          title: values.title,\n          content: getContent,\n          kind: values.kind,\n          files: newFileForm,\n          locked: checkLocked,\n        },\n      },\n    });\n  };\n\n  const handleCheckChange = () => {\n    setCheckLocked(!checkLocked);\n    console.log(checkLocked);\n  };\n\n  const uploadProps = {\n    name: 'file',\n    multiple: true,\n    maxCount: 5,\n    action: 'http://localhost:4000/uploads/issues',\n    customRequest: (options: any) => {\n      const data = new FormData();\n      data.append('file', options.file);\n      const config = {\n        headers: {\n          'content-type': 'multipart/form-data',\n        },\n      };\n      if (uploadedFile.length + defaultFileList.length >= 5) {\n        notification.error({\n          message: 'Error',\n          description: `업로드는 최대 5개만 가능합니다.`,\n          placement: 'topRight',\n          duration: 1.5,\n        });\n      } else {\n        axios\n          .post(options.action, data, config)\n          .then((res: any) => {\n            options.onSuccess(res.data, options.file);\n            uploadedFile.push(res.data.data[0]);\n            setUploadedFile(uploadedFile);\n            notification.success({\n              message: 'Success!',\n              description: `업로드 성공(${options.file.name})`,\n              placement: 'topRight',\n              duration: 1.5,\n            });\n          })\n          .catch((err: Error) => {\n            notification.error({\n              message: 'Error',\n              description: `업로드 실패`,\n              placement: 'topRight',\n              duration: 1.5,\n            });\n          });\n      }\n    },\n    progress: {\n      strokeColor: {\n        '0%': '#108ee9',\n        '100%': '#87d068',\n      },\n      strokeWidth: 3,\n      format: (percent: any) => `${parseFloat(percent.toFixed(2))}%`,\n    },\n    async onChange(info: any) {\n      const refeshDefault: any[] = [];\n      await info.fileList.map((file: any) => {\n        if (file.response === undefined) {\n          refeshDefault.push({ name: file.name });\n        }\n      });\n      setDefaultFileList(refeshDefault); // dummy for max file count\n      if (\n        info.file.status === 'uploading' &&\n        uploadedFile.length + defaultFileList.length < 5\n      ) {\n        setIsUploading(true);\n      } else {\n        setIsUploading(false);\n      }\n    },\n    defaultFileList: defaultFileList,\n  };\n\n  return (\n    <Wrapper>\n      <Helmet>\n        <title>Cases | CEN Portal</title>\n      </Helmet>\n      <TitleBar>\n        <ToolOutlined />\n        {` Cases`}\n      </TitleBar>\n      <Form form={form} onFinish={handleSave} autoComplete=\"off\">\n        <MenuBar>\n          {isEdit ? (\n            <>\n              <SButton type=\"primary\" size=\"small\" htmlType=\"submit\">\n                Save\n              </SButton>\n              <SButton type=\"primary\" size=\"small\">\n                <Popconfirm\n                  title=\"정말 취소 하시겠습니까?\"\n                  onConfirm={() => setIsEdit(false)}\n                >\n                  Cancel\n                </Popconfirm>\n              </SButton>\n            </>\n          ) : (\n            <SButton\n              type=\"primary\"\n              size=\"small\"\n              onClick={() => setIsEdit(true)}\n            >\n              Edit\n            </SButton>\n          )}\n          <SButton\n            type=\"primary\"\n            size=\"small\"\n            disabled={\n              isEdit ||\n              meData?.me.id !== writer?.id ||\n              meData?.me.role !== UserRole.CENSE\n            }\n          >\n            <Popconfirm\n              title=\"정말 삭제 하시겠습니까?\"\n              onConfirm={handleIssueDelete}\n            >\n              Delete\n            </Popconfirm>\n          </SButton>\n          <SButton\n            type=\"primary\"\n            size=\"small\"\n            onClick={() => history.push('/partner/cases/')}\n          >\n            Back\n          </SButton>\n        </MenuBar>\n\n        <TitleColumn>\n          {isEdit ? (\n            <>\n              <Form.Item\n                name=\"kind\"\n                style={{\n                  display: 'inline-block',\n                  width: '20%',\n                  marginRight: '8px',\n                }}\n                rules={[{ required: true, message: '입력 필수' }]}\n                initialValue={loadedData?.kind}\n              >\n                <Select\n                  placeholder=\"말머리\"\n                  allowClear\n                  defaultValue={loadedData?.kind}\n                >\n                  <Option value={KindRole.Case}>Case</Option>\n                  <Option value={KindRole.Question}>문의</Option>\n                  <Option value={KindRole.ETC}>ETC</Option>\n                </Select>\n              </Form.Item>\n              <Form.Item\n                name=\"title\"\n                style={{\n                  display: 'inline-block',\n                  width: '70%',\n                  marginRight: '8px',\n                }}\n                rules={[{ required: true, message: '입력 필수' }]}\n                initialValue={loadedData?.title}\n              >\n                <Input placeholder=\"제목\" defaultValue={loadedData?.title} />\n              </Form.Item>\n              <Form.Item\n                style={{ display: 'inline-block', width: 'calc(10% - 16px)' }}\n              >\n                <Checkbox\n                  defaultChecked={checkLocked}\n                  onChange={handleCheckChange}\n                >\n                  <LockOutlined />\n                </Checkbox>\n              </Form.Item>\n            </>\n          ) : (\n            <>\n              {loadedData?.kind === KindRole.Question\n                ? `[문의] `\n                : `[${loadedData?.kind}] `}\n              {loadedData?.title}\n            </>\n          )}\n        </TitleColumn>\n\n        {isEdit ? (\n          <>\n            <ContentColumn>\n              <Editor\n                previewStyle=\"vertical\"\n                height=\"500px\"\n                initialEditType=\"wysiwyg\"\n                placeholder=\"글쓰기\"\n                ref={editorRef}\n                initialValue={content}\n                language=\"ko-KR\"\n                previewHighlight={false}\n                usageStatistics={false}\n              />\n            </ContentColumn>\n            <Dragger {...uploadProps} defaultFileList={defaultFileList}>\n              <p className=\"ant-upload-drag-icon\">\n                <InboxOutlined />\n              </p>\n              <p className=\"ant-upload-text\">\n                업로드할 파일을 이 영역으로 드래그 또는 클릭합니다.\n              </p>\n              <p className=\"ant-upload-hint\">\n                단일 또는 대량 업로드를 지원하며, 최대 5개까지 업로드\n                가능합니다.\n              </p>\n            </Dragger>\n          </>\n        ) : (\n          <>\n            <ContentColumn>\n              <Viewer\n                initialValue={content}\n                ref={viewerRef as React.MutableRefObject<Viewer>}\n              />\n            </ContentColumn>\n            {files.length > 0 && (\n              <FilesColumn>\n                <FilesTitleColumn>첨부파일</FilesTitleColumn>\n                {files.map((file, index) => (\n                  <a\n                    key={file.id}\n                    title={`첨부${index + 1} 다운로드`}\n                    href={`http://localhost:4000/uploads/issues/${file.path}`}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                    download\n                    style={{ margin: '8px 0' }}\n                  >\n                    {`${index + 1}. ${file.path}`}\n                  </a>\n                ))}\n              </FilesColumn>\n            )}\n          </>\n        )}\n      </Form>\n      <CommentColumn>\n        {commentData?.length > 0 && <CommentList comments={commentData} />}\n        {!isEdit && (\n          <Comment\n            content={\n              <CommentEditor\n                onChange={handleChange}\n                onSubmit={handleSubmit}\n                submitting={submitting}\n                value={commentValue}\n              />\n            }\n          />\n        )}\n      </CommentColumn>\n    </Wrapper>\n  );\n};\n","/home/cen/cen-portal-frontend/src/pages/partner/cases/addCase.tsx",["427","428","429","430","431","432","433","434","435","436","437"],"/home/cen/cen-portal-frontend/src/pages/partner/workarounds/workaroundDetail.tsx",["438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462"],"import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { Helmet } from 'react-helmet';\nimport { useHistory, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport 'codemirror/lib/codemirror.css';\nimport '@toast-ui/editor/dist/toastui-editor.css';\nimport { Editor, Viewer } from '@toast-ui/react-editor';\nimport {\n  Button,\n  Comment,\n  Tooltip,\n  List,\n  Input,\n  Form,\n  notification,\n  Popconfirm,\n  Upload,\n  Select,\n  Checkbox,\n} from 'antd';\nimport {\n  getWorkaroundQuery,\n  getWorkaroundQueryVariables,\n} from '../../../__generated__/getWorkaroundQuery';\nimport { InboxOutlined, ToolOutlined, LockOutlined } from '@ant-design/icons';\nimport { KindWorkaround, UserRole } from '../../../__generated__/globalTypes';\nimport moment from 'moment';\nimport { useMe } from '../../../hooks/useMe';\nimport {\n  deleteWorkaroundCommentMutation,\n  deleteWorkaroundCommentMutationVariables,\n} from '../../../__generated__/deleteWorkaroundCommentMutation';\nimport {\n  createWorkaroundCommentMutation,\n  createWorkaroundCommentMutationVariables,\n} from '../../../__generated__/createWorkaroundCommentMutation';\nimport {\n  deleteWorkaroundMutation,\n  deleteWorkaroundMutationVariables,\n} from '../../../__generated__/deleteWorkaroundMutation';\nimport {\n  editWorkaroundMutation,\n  editWorkaroundMutationVariables,\n} from '../../../__generated__/editWorkaroundMutation';\n\nconst { TextArea } = Input;\nconst { Option } = Select;\nconst { Dragger } = Upload;\n\nconst Wrapper = styled.div`\n  padding: 20px;\n`;\n\nconst TitleBar = styled.div`\n  font-size: 25px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nconst MenuBar = styled.span`\n  margin: 20px 0;\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst TitleColumn = styled.div`\n  margin-bottom: 8px;\n  font-weight: bold;\n  font-size: 18px;\n`;\n\nconst ContentColumn = styled.div`\n  margin: 20px 0;\n  padding: 10px;\n  min-height: 350px;\n  border-top: solid #d0d0d0 1px;\n  border-bottom: solid #d0d0d0 1px;\n`;\n\nconst FilesColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst FilesTitleColumn = styled.div`\n  margin: 0 0 10px;\n  font-weight: bold;\n  font-size: 14px;\n`;\n\nconst CommentColumn = styled.div`\n  margin-top: 10px;\n`;\n\nconst SButton = styled(Button)`\n  margin-left: 8px;\n`;\n\nconst GET_WORKAROUND_QUERY = gql`\n  query getWorkaroundQuery($input: GetWorkaroundInput!) {\n    getWorkaround(input: $input) {\n      ok\n      error\n      workaround {\n        id\n        title\n        kind\n        content\n        locked\n        writer {\n          id\n          company\n          name\n        }\n        files {\n          id\n          path\n        }\n        comment {\n          id\n          writer {\n            id\n            company\n            name\n          }\n          comment\n          groupNum\n          depth\n          order\n          createAt\n          deleteAt\n        }\n      }\n    }\n  }\n`;\n\nconst DELETE_COMMENT_MUTATION = gql`\n  mutation deleteWorkaroundCommentMutation(\n    $input: DeleteWorkaroundCommentInput!\n  ) {\n    deleteWorkaroundComment(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\nconst CREATE_COMMENT_MUTATION = gql`\n  mutation createWorkaroundCommentMutation(\n    $input: CreateWorkaroundCommentInput!\n  ) {\n    createWorkaroundComment(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\nconst DELETE_WORKAROUND_MUTATION = gql`\n  mutation deleteWorkaroundMutation($input: DeleteWorkaroundInput!) {\n    deleteWorkaround(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\nconst EDIT_WORKAROUND_MUTATION = gql`\n  mutation editWorkaroundMutation($input: EditWorkaroundInput!) {\n    editWorkaround(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\ninterface IWorkaroundUser {\n  id: number;\n  company: string;\n  name: string;\n}\n\ninterface IWorkaroundFiles {\n  id: number;\n  path: string;\n}\n\ninterface ICommentUser {\n  id: number;\n  company: string;\n  name: string;\n}\n\ninterface IWorkaroundComments {\n  id: number;\n  writer: ICommentUser | null;\n  comment: string;\n  groupNum: number;\n  depth: number;\n  order: number;\n  createAt: any;\n  deleteAt: any | null;\n}\n\ninterface IOriginComment {\n  key: string;\n  actions: JSX.Element[];\n  author: string | null;\n  content: string;\n  datetime?: JSX.Element;\n  depth: number;\n  isReply?: boolean;\n}\n\ninterface IWorkarounds {\n  id: number;\n  title: string;\n  kind: KindWorkaround;\n  content: string;\n  locked: boolean | null;\n  writer: IWorkaroundUser | null;\n  files: IWorkaroundFiles[] | null;\n  comment: IWorkaroundComments[] | null;\n}\n\ninterface IUploadedFile {\n  filename: string;\n  originalname: string;\n}\n\ninterface IDefaultFileList {\n  uid: string;\n  name: string;\n  status: string;\n  url: string;\n}\n\nconst CommentList = ({ comments }: any) => {\n  return (\n    <List\n      dataSource={comments}\n      header={`${comments.length} ${\n        comments.length > 1 ? 'comments' : 'comment'\n      }`}\n      itemLayout=\"horizontal\"\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'flex-end',\n      }}\n      renderItem={(props: any) => {\n        return (\n          <Comment\n            {...props}\n            style={{\n              position: 'relative',\n              left: `${(props.depth - 1) * 20}px`,\n              width: `calc(100% - ${(props.depth - 1) * 20}px)`,\n              marginTop: '5px',\n            }}\n          />\n        );\n      }}\n    />\n  );\n};\n\nconst CommentEditor = ({ onChange, onSubmit, submitting, value }: any) => (\n  <>\n    <Form.Item name=\"commentValue\">\n      <TextArea\n        name=\"commentValue\"\n        rows={4}\n        onChange={onChange}\n        value={value}\n      />\n    </Form.Item>\n    <Form.Item>\n      <Button\n        htmlType=\"submit\"\n        loading={submitting}\n        onClick={onSubmit}\n        type=\"primary\"\n      >\n        Add Comment\n      </Button>\n    </Form.Item>\n  </>\n);\n\nexport const WorkaroundDetail: React.FC = () => {\n  const { data: meData } = useMe();\n  const originComment: IOriginComment[] = [];\n  const history = useHistory();\n  const workaroundId: any = useParams();\n  const viewerRef = useRef<Viewer>();\n  const editorRef = React.createRef<any>();\n  const [form] = Form.useForm();\n  const [content, setContent] = useState<string>();\n  const [writer, setWriter] = useState<ICommentUser>();\n  const [loadedData, setLoadedData] = useState<IWorkarounds>();\n  const [commentData, setCommentData] = useState<IOriginComment[]>([]);\n  const [files, setFiles] = useState<IWorkaroundFiles[]>([]);\n  const [submitting, setSubmitting] = useState<boolean>(false);\n  const [commentValue, setCommentValue] = useState<string>();\n  const [isEdit, setIsEdit] = useState<boolean>(false);\n  const [uploadedFile, setUploadedFile] = useState<IUploadedFile[]>([]);\n  const [isUploading, setIsUploading] = useState<boolean>(false);\n  const [checkLocked, setCheckLocked] = useState<boolean>(false);\n  const [defaultFileList, setDefaultFileList] = useState<any[]>([]);\n  const {\n    data: workaroundDetailData,\n    loading: workaroundDetailLoading,\n    refetch,\n  } = useQuery<getWorkaroundQuery, getWorkaroundQueryVariables>(\n    GET_WORKAROUND_QUERY,\n    {\n      variables: {\n        input: {\n          id: +workaroundId.id,\n        },\n      },\n    },\n  );\n\n  const onCommentDeleteCompleted = (data: deleteWorkaroundCommentMutation) => {\n    const {\n      deleteWorkaroundComment: { ok, error },\n    } = data;\n    if (ok) {\n      notification.success({\n        message: 'Success!',\n        description: `댓글 삭제 성공`,\n        placement: 'topRight',\n        duration: 1,\n      });\n      refetch();\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `댓글 삭제 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    }\n  };\n\n  const onCommentCreateCompleted = (data: createWorkaroundCommentMutation) => {\n    const {\n      createWorkaroundComment: { ok, error },\n    } = data;\n    if (ok) {\n      notification.success({\n        message: 'Success!',\n        description: `댓글 작성 성공`,\n        placement: 'topRight',\n        duration: 1,\n      });\n      setSubmitting(false);\n      refetch();\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `댓글 작성 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    }\n  };\n\n  const onWorkaroundDeleteCompleted = (data: deleteWorkaroundMutation) => {\n    const {\n      deleteWorkaround: { ok, error },\n    } = data;\n    if (ok) {\n      notification.success({\n        message: 'Success!',\n        description: `삭제 성공`,\n        placement: 'topRight',\n        duration: 1,\n      });\n      history.push('/partner/workarounds/');\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `삭제 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    }\n  };\n\n  const onWorkaroundEditCompleted = (data: editWorkaroundMutation) => {\n    const {\n      editWorkaround: { ok, error },\n    } = data;\n    if (ok) {\n      notification.success({\n        message: 'Success!',\n        description: `수정 성공`,\n        placement: 'topRight',\n        duration: 1,\n      });\n      history.push(`/partner/workarounds/${workaroundId.id}`);\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `수정 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    }\n    refetch();\n  };\n\n  const [\n    deleteWorkaroundCommentMutation,\n    { data: deleteWorkaroundCommentData },\n  ] = useMutation<\n    deleteWorkaroundCommentMutation,\n    deleteWorkaroundCommentMutationVariables\n  >(DELETE_COMMENT_MUTATION, { onCompleted: onCommentDeleteCompleted });\n\n  const [\n    createWorkaroundCommentMutation,\n    { data: createWorkaroundCommentData },\n  ] = useMutation<\n    createWorkaroundCommentMutation,\n    createWorkaroundCommentMutationVariables\n  >(CREATE_COMMENT_MUTATION, { onCompleted: onCommentCreateCompleted });\n\n  const [deleteWorkaroundMutation] = useMutation<\n    deleteWorkaroundMutation,\n    deleteWorkaroundMutationVariables\n  >(DELETE_WORKAROUND_MUTATION, {\n    onCompleted: onWorkaroundDeleteCompleted,\n  });\n\n  const [editWorkaroundMutation] = useMutation<\n    editWorkaroundMutation,\n    editWorkaroundMutationVariables\n  >(EDIT_WORKAROUND_MUTATION, {\n    onCompleted: onWorkaroundEditCompleted,\n  });\n\n  useEffect(() => {\n    if (viewerRef.current && workaroundDetailData) {\n      const workaround = workaroundDetailData.getWorkaround\n        .workaround as IWorkarounds;\n      const workaroundComment = workaround.comment as IWorkaroundComments[];\n      setContent(workaround.content);\n      setWriter(workaround.writer as ICommentUser);\n      setFiles(workaround.files as IWorkaroundFiles[]);\n      setLoadedData(workaround as IWorkarounds);\n      setCheckLocked(workaround.locked as boolean);\n      viewerRef.current\n        ?.getInstance()\n        .setMarkdown(workaround.content as string);\n      workaroundComment.map((comment, index) => {\n        originComment.push({\n          key: `${comment.id}`,\n          actions: [\n            // <span key={`comment-reply-${comment.id}`}>Reply to</span>,\n            // <span\n            //   key={comment.id}\n            //   data-id={`${comment.id}`}\n            //   onClick={handleEditClick}\n            // >\n            //   Edit\n            // </span>,\n            <span key={comment.id}>\n              {meData?.me.id === comment.writer?.id && (\n                <Popconfirm\n                  title=\"정말 삭제 하시겠습니까?\"\n                  onConfirm={() => handleCommentDelete(comment.id)}\n                  disabled={meData?.me.id !== comment.writer?.id}\n                >\n                  Delete\n                </Popconfirm>\n              )}\n            </span>,\n          ],\n          author: comment.writer?.company\n            ? comment.writer?.company === 'CEN'\n              ? `${comment.writer?.name} [코어엣지네트웍스]`\n              : `${comment.writer?.name} [${comment.writer?.company}]`\n            : null,\n          content: comment.comment,\n          datetime: (\n            <Tooltip\n              title={moment().format(\n                new Date(comment.createAt).toLocaleString(),\n              )}\n            >\n              <span>{moment(comment.createAt).fromNow()}</span>\n            </Tooltip>\n          ),\n          depth: comment.depth,\n          isReply: false,\n        });\n      });\n      setCommentData(originComment);\n      const uploadedList: IDefaultFileList[] = [];\n      files.map((file, index) => {\n        uploadedList.push({\n          uid: `${index + 1}`,\n          name: `${file.path}`,\n          status: 'done',\n          url: `http://localhost:4000/uploads/workarounds/${file.path}`,\n        });\n      });\n      setDefaultFileList(uploadedList);\n    }\n    refetch();\n  }, [workaroundDetailData, loadedData]);\n\n  const handleEditClick = (event: any) => {\n    console.log(event.target.attributes[0].value);\n  };\n\n  const handleCommentDelete = (id: number) => {\n    deleteWorkaroundCommentMutation({\n      variables: { input: { commentId: id } },\n    });\n  };\n\n  const handleWorkaroundDelete = () => {\n    deleteWorkaroundMutation({\n      variables: { input: { workaroundId: +workaroundId.id } },\n    });\n  };\n\n  const handleChange = (event: any) => {\n    const {\n      target: { value },\n    } = event;\n    setCommentValue(value);\n  };\n\n  const handleSubmit = () => {\n    if (!commentValue) {\n      return;\n    }\n    setSubmitting(true);\n    createWorkaroundCommentMutation({\n      variables: {\n        input: {\n          workaroundId: +workaroundId.id,\n          comment: commentValue,\n        },\n      },\n    });\n    setCommentValue('');\n  };\n\n  const handleSave = async (values: any) => {\n    const getContent = await editorRef.current.getInstance().getMarkdown();\n    if (isUploading) {\n      notification.error({\n        message: 'Error',\n        description: `파일 업로드 중입니다. 잠시 후에 시도해주세요.`,\n        placement: 'topRight',\n        duration: 1.5,\n      });\n      return;\n    }\n    if (!getContent) {\n      notification.error({\n        message: 'Error',\n        description: `내용을 입력해 주세요.`,\n        placement: 'topRight',\n        duration: 1,\n      });\n      return;\n    }\n    setContent(getContent);\n    setIsEdit(!isEdit);\n    const newFileForm: any[] = [];\n    if (defaultFileList.length !== 0) {\n      defaultFileList.map((file) => {\n        newFileForm.push({ path: file.name });\n      });\n    }\n    if (uploadedFile.length !== 0) {\n      uploadedFile.map((file) => {\n        newFileForm.push({\n          path: file.filename,\n        });\n      });\n    }\n    setFiles(newFileForm); // for render files\n    editWorkaroundMutation({\n      variables: {\n        input: {\n          workaroundId: +workaroundId.id,\n          title: values.title,\n          content: getContent,\n          kind: values.kind,\n          files: newFileForm,\n          locked: checkLocked,\n        },\n      },\n    });\n  };\n\n  const handleCheckChange = () => {\n    setCheckLocked(!checkLocked);\n    console.log(checkLocked);\n  };\n\n  const uploadProps = {\n    name: 'file',\n    multiple: true,\n    maxCount: 5,\n    action: 'http://localhost:4000/uploads/workarounds',\n    customRequest: (options: any) => {\n      const data = new FormData();\n      data.append('file', options.file);\n      const config = {\n        headers: {\n          'content-type': 'multipart/form-data',\n        },\n      };\n      if (uploadedFile.length + defaultFileList.length >= 5) {\n        notification.error({\n          message: 'Error',\n          description: `업로드는 최대 5개만 가능합니다.`,\n          placement: 'topRight',\n          duration: 1.5,\n        });\n      } else {\n        axios\n          .post(options.action, data, config)\n          .then((res: any) => {\n            options.onSuccess(res.data, options.file);\n            uploadedFile.push(res.data.data[0]);\n            setUploadedFile(uploadedFile);\n            notification.success({\n              message: 'Success!',\n              description: `업로드 성공(${options.file.name})`,\n              placement: 'topRight',\n              duration: 1.5,\n            });\n          })\n          .catch((err: Error) => {\n            notification.error({\n              message: 'Error',\n              description: `업로드 실패`,\n              placement: 'topRight',\n              duration: 1.5,\n            });\n          });\n      }\n    },\n    progress: {\n      strokeColor: {\n        '0%': '#108ee9',\n        '100%': '#87d068',\n      },\n      strokeWidth: 3,\n      format: (percent: any) => `${parseFloat(percent.toFixed(2))}%`,\n    },\n    async onChange(info: any) {\n      const refeshDefault: any[] = [];\n      await info.fileList.map((file: any) => {\n        if (file.response === undefined) {\n          refeshDefault.push({ name: file.name });\n        }\n      });\n      setDefaultFileList(refeshDefault); // dummy for max file count\n      if (\n        info.file.status === 'uploading' &&\n        uploadedFile.length + defaultFileList.length < 5\n      ) {\n        setIsUploading(true);\n      } else {\n        setIsUploading(false);\n      }\n    },\n    defaultFileList: defaultFileList,\n  };\n\n  return (\n    <Wrapper>\n      <Helmet>\n        <title>Workarounds | CEN Portal</title>\n      </Helmet>\n      <TitleBar>\n        <ToolOutlined />\n        {` Workarounds`}\n      </TitleBar>\n      <Form form={form} onFinish={handleSave} autoComplete=\"off\">\n        <MenuBar>\n          {isEdit ? (\n            <>\n              <SButton type=\"primary\" size=\"small\" htmlType=\"submit\">\n                Save\n              </SButton>\n              <SButton type=\"primary\" size=\"small\">\n                <Popconfirm\n                  title=\"정말 취소 하시겠습니까?\"\n                  onConfirm={() => setIsEdit(false)}\n                >\n                  Cancel\n                </Popconfirm>\n              </SButton>\n            </>\n          ) : (\n            <SButton\n              type=\"primary\"\n              size=\"small\"\n              onClick={() => setIsEdit(true)}\n              disabled={UserRole.CENSE !== meData?.me.role}\n            >\n              Edit\n            </SButton>\n          )}\n          <SButton\n            type=\"primary\"\n            size=\"small\"\n            disabled={isEdit || meData?.me.role !== UserRole.CENSE}\n          >\n            <Popconfirm\n              title=\"정말 삭제 하시겠습니까?\"\n              onConfirm={handleWorkaroundDelete}\n            >\n              Delete\n            </Popconfirm>\n          </SButton>\n          <SButton\n            type=\"primary\"\n            size=\"small\"\n            onClick={() => history.push('/partner/workarounds/')}\n          >\n            Back\n          </SButton>\n        </MenuBar>\n\n        <TitleColumn>\n          {isEdit ? (\n            <>\n              <Form.Item\n                name=\"kind\"\n                style={{\n                  display: 'inline-block',\n                  width: '20%',\n                  marginRight: '8px',\n                }}\n                rules={[{ required: true, message: '입력 필수' }]}\n                initialValue={loadedData?.kind}\n              >\n                <Select\n                  placeholder=\"말머리\"\n                  allowClear\n                  defaultValue={loadedData?.kind}\n                >\n                  <Option value={KindWorkaround.C2000}>C2000</Option>\n                  <Option value={KindWorkaround.C3000}>C3000</Option>\n                  <Option value={KindWorkaround.C3100}>C3100</Option>\n                  <Option value={KindWorkaround.C3300}>C3300</Option>\n                  <Option value={KindWorkaround.C5000}>C5000</Option>\n                  <Option value={KindWorkaround.C7000}>C7000</Option>\n                  <Option value={KindWorkaround.C9000}>C9000</Option>\n                  <Option value={KindWorkaround.ETC}>ETC</Option>\n                </Select>\n              </Form.Item>\n              <Form.Item\n                name=\"title\"\n                style={{\n                  display: 'inline-block',\n                  width: '70%',\n                  marginRight: '8px',\n                }}\n                rules={[{ required: true, message: '입력 필수' }]}\n                initialValue={loadedData?.title}\n              >\n                <Input placeholder=\"제목\" defaultValue={loadedData?.title} />\n              </Form.Item>\n              <Form.Item\n                style={{ display: 'inline-block', width: 'calc(10% - 16px)' }}\n              >\n                <Checkbox\n                  defaultChecked={checkLocked}\n                  onChange={handleCheckChange}\n                >\n                  <LockOutlined />\n                </Checkbox>\n              </Form.Item>\n            </>\n          ) : (\n            <>{`[${loadedData?.kind}] ${loadedData?.title}`}</>\n          )}\n        </TitleColumn>\n\n        {isEdit ? (\n          <>\n            <ContentColumn>\n              <Editor\n                previewStyle=\"vertical\"\n                height=\"500px\"\n                initialEditType=\"wysiwyg\"\n                placeholder=\"글쓰기\"\n                ref={editorRef}\n                initialValue={content}\n                language=\"ko-KR\"\n                previewHighlight={false}\n                usageStatistics={false}\n              />\n            </ContentColumn>\n            <Dragger {...uploadProps} defaultFileList={defaultFileList}>\n              <p className=\"ant-upload-drag-icon\">\n                <InboxOutlined />\n              </p>\n              <p className=\"ant-upload-text\">\n                업로드할 파일을 이 영역으로 드래그 또는 클릭합니다.\n              </p>\n              <p className=\"ant-upload-hint\">\n                단일 또는 대량 업로드를 지원하며, 최대 5개까지 업로드\n                가능합니다.\n              </p>\n            </Dragger>\n          </>\n        ) : (\n          <>\n            <ContentColumn>\n              <Viewer\n                initialValue={content}\n                ref={viewerRef as React.MutableRefObject<Viewer>}\n              />\n            </ContentColumn>\n            {files.length > 0 && (\n              <FilesColumn>\n                <FilesTitleColumn>첨부파일</FilesTitleColumn>\n                {files.map((file, index) => (\n                  <a\n                    key={file.id}\n                    title={`첨부${index + 1} 다운로드`}\n                    href={`http://localhost:4000/uploads/workarounds/${file.path}`}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                    download\n                    style={{ margin: '8px 0' }}\n                  >\n                    {`${index + 1}. ${file.path}`}\n                  </a>\n                ))}\n              </FilesColumn>\n            )}\n          </>\n        )}\n      </Form>\n      <CommentColumn>\n        {commentData?.length > 0 && <CommentList comments={commentData} />}\n        {!isEdit && (\n          <Comment\n            content={\n              <CommentEditor\n                onChange={handleChange}\n                onSubmit={handleSubmit}\n                submitting={submitting}\n                value={commentValue}\n              />\n            }\n          />\n        )}\n      </CommentColumn>\n    </Wrapper>\n  );\n};\n","/home/cen/cen-portal-frontend/src/pages/partner/documents/documents.tsx",["463","464"],"/* eslint-disable react/display-name */\nimport React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Table, Typography, Button, BackTop } from 'antd';\nimport { FileOutlined, LockOutlined, FileZipOutlined } from '@ant-design/icons';\nimport { ColumnsType } from 'antd/es/table';\nimport { useMe } from '../../../hooks/useMe';\nimport { useAllDocuments } from '../../../hooks/useAllDocuments';\nimport { KindDocument, UserRole } from '../../../__generated__/globalTypes';\n\nconst Wrapper = styled.div`\n  padding: 20px;\n`;\n\nconst TitleBar = styled.div`\n  font-size: 25px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nconst MenuBar = styled.span`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 8px;\n`;\n\nconst SButton = styled(Button)`\n  margin-left: 8px;\n`;\n\ninterface IUser {\n  id: number;\n  name: string;\n  company: string;\n}\n\ninterface IDocumentFiles {\n  id: number;\n  path: string;\n}\n\ninterface IDocuments {\n  id: number;\n  writer: IUser | null;\n  locked: boolean | null;\n  kind: string | null;\n  title: string;\n  files: IDocumentFiles[] | null;\n  createAt: any;\n  updateAt: any;\n}\n\ninterface IDocumentsData {\n  key: string;\n  no: number;\n  title: string | JSX.Element;\n  kind: string | null;\n  locked: boolean | null;\n  writer: IUser['name'] | null;\n  company: IUser['company'] | null;\n  filesCount: number;\n  createAt: string;\n}\n\nexport const Document: React.FC = () => {\n  const originData: IDocumentsData[] = [];\n  const [data, setData] = useState<IDocumentsData[]>([]);\n  const [page, setPage] = useState<number>(1);\n  const [take, setTake] = useState<number>(10);\n  const [total, setTotal] = useState<number>(0);\n  const { data: meData } = useMe();\n  const {\n    data: allDocumentsData,\n    loading: allDocumentsLoading,\n    refetch: reGetData,\n  } = useAllDocuments(page, take);\n\n  useEffect(() => {\n    if (allDocumentsData && !allDocumentsLoading) {\n      const documents = allDocumentsData.allDocuments.documents as IDocuments[];\n      const getTotalResults = allDocumentsData.allDocuments\n        .totalResults as number;\n      for (let i = 0; i < documents.length; i++) {\n        originData.push({\n          key: `${documents[i].id}`,\n          no: documents[i].id,\n          title: (\n            <>\n              {documents[i].kind === KindDocument.Datasheet\n                ? `[데이터시트] `\n                : documents[i].kind === KindDocument.Proposal\n                ? `[표준제안서] `\n                : documents[i].kind === KindDocument.Certificate\n                ? `[인증서] `\n                : documents[i].kind === KindDocument.TestReport\n                ? `[시험성적서] `\n                : documents[i].kind === KindDocument.Brochure\n                ? `[브로셔] `\n                : `[${documents[i].kind}] `}\n              <Typography.Link\n                disabled={\n                  meData?.me.role === UserRole.CENSE ||\n                  documents[i].writer?.id === meData?.me.id\n                    ? false\n                    : (documents[i].locked as boolean)\n                }\n                href={`/partner/documents/${documents[i].id}`}\n              >{`${documents[i].title}`}</Typography.Link>\n              {documents[i].files?.length !== 0 ? (\n                <span style={{ fontSize: '11px' }}>\n                  {' '}\n                  <FileZipOutlined />\n                  {documents[i].files?.length}\n                </span>\n              ) : null}\n              {documents[i].locked ? (\n                <span style={{ fontSize: '11px' }}>\n                  {' '}\n                  <LockOutlined />\n                </span>\n              ) : null}\n            </>\n          ),\n          kind: documents[i].kind,\n          locked: documents[i].locked,\n          writer: documents[i].writer?.name as string,\n          company: documents[i].writer?.company as string,\n          filesCount: documents[i].files?.length as number,\n          createAt: new Date(documents[i].createAt).toLocaleDateString(),\n        });\n      }\n      setTotal(getTotalResults);\n      setData(originData);\n    }\n    reGetData();\n    console.log(allDocumentsData);\n    console.log(originData);\n  }, [allDocumentsData]);\n\n  const handlePageChange = (page: number, take: number) => {\n    setPage(page);\n    setTake(take);\n  };\n\n  const columns: ColumnsType<IDocumentsData> = [\n    {\n      title: 'No',\n      dataIndex: 'no',\n      width: '1%',\n      align: 'center',\n    },\n    {\n      title: '제목',\n      dataIndex: 'title',\n      width: '50%',\n      align: 'center',\n    },\n    {\n      title: '소속',\n      dataIndex: 'company',\n      width: '20%',\n      align: 'center',\n    },\n    {\n      title: '작성자',\n      dataIndex: 'writer',\n      width: '10%',\n      align: 'center',\n    },\n    {\n      title: '작성일',\n      dataIndex: 'createAt',\n      width: '20%',\n      align: 'center',\n    },\n  ];\n\n  return (\n    <Wrapper>\n      <Helmet>\n        <title>Documents | CEN Portal</title>\n      </Helmet>\n      <TitleBar>\n        <FileOutlined />\n        {' Documents'}\n      </TitleBar>\n      <MenuBar>\n        <SButton\n          type=\"primary\"\n          size=\"small\"\n          disabled={UserRole.CENSE !== meData?.me.role}\n        >\n          <Link to=\"/partner/documents/add-document\">New</Link>\n        </SButton>\n      </MenuBar>\n      <Table<IDocumentsData>\n        bordered\n        dataSource={data}\n        columns={columns}\n        pagination={{\n          total,\n          showTotal: (total, range) =>\n            `${range[0]}-${range[1]} of ${total} items`,\n          onChange: (page, take) => handlePageChange(page, take as number),\n          showSizeChanger: true,\n        }}\n        loading={allDocumentsLoading}\n        size=\"small\"\n      />\n      <BackTop style={{ right: 10, bottom: 10 }} />\n    </Wrapper>\n  );\n};\n","/home/cen/cen-portal-frontend/src/pages/partner/firmwares/addFirmware.tsx",["465","466","467","468","469","470","471","472","473","474","475"],"/home/cen/cen-portal-frontend/src/pages/partner/firmwares/firmwareDetail.tsx",["476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496"],"import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { Helmet } from 'react-helmet';\nimport { useHistory, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport 'codemirror/lib/codemirror.css';\nimport '@toast-ui/editor/dist/toastui-editor.css';\nimport { Editor, Viewer } from '@toast-ui/react-editor';\nimport {\n  Button,\n  Comment,\n  Tooltip,\n  List,\n  Input,\n  Form,\n  notification,\n  Popconfirm,\n  Upload,\n  Select,\n  Checkbox,\n} from 'antd';\nimport {\n  getFirmwareQuery,\n  getFirmwareQueryVariables,\n} from '../../../__generated__/getFirmwareQuery';\nimport {\n  InboxOutlined,\n  DesktopOutlined,\n  LockOutlined,\n} from '@ant-design/icons';\nimport { KindFirmware, UserRole } from '../../../__generated__/globalTypes';\nimport moment from 'moment';\nimport { useMe } from '../../../hooks/useMe';\nimport {\n  deleteFirmwareMutation,\n  deleteFirmwareMutationVariables,\n} from '../../../__generated__/deleteFirmwareMutation';\nimport {\n  editFirmwareMutation,\n  editFirmwareMutationVariables,\n} from '../../../__generated__/editFirmwareMutation';\n\nconst { TextArea } = Input;\nconst { Option } = Select;\nconst { Dragger } = Upload;\n\nconst Wrapper = styled.div`\n  padding: 20px;\n`;\n\nconst TitleBar = styled.div`\n  font-size: 25px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nconst MenuBar = styled.span`\n  margin: 20px 0;\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst TitleColumn = styled.div`\n  margin-bottom: 8px;\n  font-weight: bold;\n  font-size: 18px;\n`;\n\nconst ContentColumn = styled.div`\n  margin: 20px 0;\n  padding: 10px;\n  min-height: 350px;\n  border-top: solid #d0d0d0 1px;\n  border-bottom: solid #d0d0d0 1px;\n`;\n\nconst FilesColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst FilesTitleColumn = styled.div`\n  margin: 0 0 10px;\n  font-weight: bold;\n  font-size: 14px;\n`;\n\nconst CommentColumn = styled.div`\n  margin-top: 10px;\n`;\n\nconst SButton = styled(Button)`\n  margin-left: 8px;\n`;\n\nconst GET_WORKAROUND_QUERY = gql`\n  query getFirmwareQuery($input: GetFirmwareInput!) {\n    getFirmware(input: $input) {\n      ok\n      error\n      firmware {\n        id\n        title\n        kind\n        content\n        locked\n        writer {\n          id\n          company\n          name\n        }\n        files {\n          id\n          path\n        }\n      }\n    }\n  }\n`;\n\nconst DELETE_WORKAROUND_MUTATION = gql`\n  mutation deleteFirmwareMutation($input: DeleteFirmwareInput!) {\n    deleteFirmware(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\nconst EDIT_WORKAROUND_MUTATION = gql`\n  mutation editFirmwareMutation($input: EditFirmwareInput!) {\n    editFirmware(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\ninterface IFirmwareUser {\n  id: number;\n  company: string;\n  name: string;\n}\n\ninterface IFirmwareFiles {\n  id: number;\n  path: string;\n}\n\ninterface IFirmwares {\n  id: number;\n  title: string;\n  kind: KindFirmware;\n  content: string;\n  locked: boolean | null;\n  writer: IFirmwareUser | null;\n  files: IFirmwareFiles[] | null;\n}\n\ninterface IUploadedFile {\n  filename: string;\n  originalname: string;\n}\n\ninterface IDefaultFileList {\n  uid: string;\n  name: string;\n  status: string;\n  url: string;\n}\n\nexport const FirmwareDetail: React.FC = () => {\n  const { data: meData } = useMe();\n  const history = useHistory();\n  const firmwareId: any = useParams();\n  const viewerRef = useRef<Viewer>();\n  const editorRef = React.createRef<any>();\n  const [form] = Form.useForm();\n  const [content, setContent] = useState<string>();\n  const [loadedData, setLoadedData] = useState<IFirmwares>();\n  const [files, setFiles] = useState<IFirmwareFiles[]>([]);\n  const [isEdit, setIsEdit] = useState<boolean>(false);\n  const [uploadedFile, setUploadedFile] = useState<IUploadedFile[]>([]);\n  const [isUploading, setIsUploading] = useState<boolean>(false);\n  const [checkLocked, setCheckLocked] = useState<boolean>(false);\n  const [defaultFileList, setDefaultFileList] = useState<any[]>([]);\n  const {\n    data: firmwareDetailData,\n    loading: firmwareDetailLoading,\n    refetch,\n  } = useQuery<getFirmwareQuery, getFirmwareQueryVariables>(\n    GET_WORKAROUND_QUERY,\n    {\n      variables: {\n        input: {\n          id: +firmwareId.id,\n        },\n      },\n    },\n  );\n\n  const onFirmwareDeleteCompleted = (data: deleteFirmwareMutation) => {\n    const {\n      deleteFirmware: { ok, error },\n    } = data;\n    if (ok) {\n      notification.success({\n        message: 'Success!',\n        description: `삭제 성공`,\n        placement: 'topRight',\n        duration: 1,\n      });\n      history.push('/partner/firmwares/');\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `삭제 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    }\n  };\n\n  const onFirmwareEditCompleted = (data: editFirmwareMutation) => {\n    const {\n      editFirmware: { ok, error },\n    } = data;\n    if (ok) {\n      notification.success({\n        message: 'Success!',\n        description: `수정 성공`,\n        placement: 'topRight',\n        duration: 1,\n      });\n      history.push(`/partner/firmwares/${firmwareId.id}`);\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `수정 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    }\n    refetch();\n  };\n\n  const [deleteFirmwareMutation] = useMutation<\n    deleteFirmwareMutation,\n    deleteFirmwareMutationVariables\n  >(DELETE_WORKAROUND_MUTATION, {\n    onCompleted: onFirmwareDeleteCompleted,\n  });\n\n  const [editFirmwareMutation] = useMutation<\n    editFirmwareMutation,\n    editFirmwareMutationVariables\n  >(EDIT_WORKAROUND_MUTATION, {\n    onCompleted: onFirmwareEditCompleted,\n  });\n\n  useEffect(() => {\n    if (viewerRef.current && firmwareDetailData) {\n      const firmware = firmwareDetailData.getFirmware.firmware as IFirmwares;\n      setContent(firmware.content);\n      setFiles(firmware.files as IFirmwareFiles[]);\n      setLoadedData(firmware as IFirmwares);\n      setCheckLocked(firmware.locked as boolean);\n      viewerRef.current?.getInstance().setMarkdown(firmware.content as string);\n      const uploadedList: IDefaultFileList[] = [];\n      files.map((file, index) => {\n        uploadedList.push({\n          uid: `${index + 1}`,\n          name: `${file.path}`,\n          status: 'done',\n          url: `http://localhost:4000/uploads/firmwares/${file.path}`,\n        });\n      });\n      setDefaultFileList(uploadedList);\n    }\n    refetch();\n  }, [firmwareDetailData, loadedData]);\n\n  const handleEditClick = (event: any) => {\n    console.log(event.target.attributes[0].value);\n  };\n\n  const handleFirmwareDelete = () => {\n    deleteFirmwareMutation({\n      variables: { input: { firmwareId: +firmwareId.id } },\n    });\n  };\n\n  const handleSave = async (values: any) => {\n    const getContent = await editorRef.current.getInstance().getMarkdown();\n    if (isUploading) {\n      notification.error({\n        message: 'Error',\n        description: `파일 업로드 중입니다. 잠시 후에 시도해주세요.`,\n        placement: 'topRight',\n        duration: 1.5,\n      });\n      return;\n    }\n    if (!getContent) {\n      notification.error({\n        message: 'Error',\n        description: `내용을 입력해 주세요.`,\n        placement: 'topRight',\n        duration: 1,\n      });\n      return;\n    }\n    setContent(getContent);\n    setIsEdit(!isEdit);\n    const newFileForm: any[] = [];\n    if (defaultFileList.length !== 0) {\n      defaultFileList.map((file) => {\n        newFileForm.push({ path: file.name });\n      });\n    }\n    if (uploadedFile.length !== 0) {\n      uploadedFile.map((file) => {\n        newFileForm.push({\n          path: file.filename,\n        });\n      });\n    }\n    setFiles(newFileForm); // for render files\n    editFirmwareMutation({\n      variables: {\n        input: {\n          firmwareId: +firmwareId.id,\n          title: values.title,\n          content: getContent,\n          kind: values.kind,\n          files: newFileForm,\n          locked: checkLocked,\n        },\n      },\n    });\n  };\n\n  const handleCheckChange = () => {\n    setCheckLocked(!checkLocked);\n    console.log(checkLocked);\n  };\n\n  const uploadProps = {\n    name: 'file',\n    multiple: true,\n    maxCount: 5,\n    action: 'http://localhost:4000/uploads/firmwares',\n    customRequest: (options: any) => {\n      const data = new FormData();\n      data.append('file', options.file);\n      const config = {\n        headers: {\n          'content-type': 'multipart/form-data',\n        },\n      };\n      if (uploadedFile.length + defaultFileList.length >= 5) {\n        notification.error({\n          message: 'Error',\n          description: `업로드는 최대 5개만 가능합니다.`,\n          placement: 'topRight',\n          duration: 1.5,\n        });\n      } else {\n        axios\n          .post(options.action, data, config)\n          .then((res: any) => {\n            options.onSuccess(res.data, options.file);\n            uploadedFile.push(res.data.data[0]);\n            setUploadedFile(uploadedFile);\n            notification.success({\n              message: 'Success!',\n              description: `업로드 성공(${options.file.name})`,\n              placement: 'topRight',\n              duration: 1.5,\n            });\n          })\n          .catch((err: Error) => {\n            notification.error({\n              message: 'Error',\n              description: `업로드 실패`,\n              placement: 'topRight',\n              duration: 1.5,\n            });\n          });\n      }\n    },\n    progress: {\n      strokeColor: {\n        '0%': '#108ee9',\n        '100%': '#87d068',\n      },\n      strokeWidth: 3,\n      format: (percent: any) => `${parseFloat(percent.toFixed(2))}%`,\n    },\n    async onChange(info: any) {\n      const refeshDefault: any[] = [];\n      await info.fileList.map((file: any) => {\n        if (file.response === undefined) {\n          refeshDefault.push({ name: file.name });\n        }\n      });\n      setDefaultFileList(refeshDefault); // dummy for max file count\n      if (\n        info.file.status === 'uploading' &&\n        uploadedFile.length + defaultFileList.length < 5\n      ) {\n        setIsUploading(true);\n      } else {\n        setIsUploading(false);\n      }\n    },\n    defaultFileList: defaultFileList,\n  };\n\n  return (\n    <Wrapper>\n      <Helmet>\n        <title>Firmwares | CEN Portal</title>\n      </Helmet>\n      <TitleBar>\n        <DesktopOutlined />\n        {` Firmwares`}\n      </TitleBar>\n      <Form form={form} onFinish={handleSave} autoComplete=\"off\">\n        <MenuBar>\n          {isEdit ? (\n            <>\n              <SButton type=\"primary\" size=\"small\" htmlType=\"submit\">\n                Save\n              </SButton>\n              <SButton type=\"primary\" size=\"small\">\n                <Popconfirm\n                  title=\"정말 취소 하시겠습니까?\"\n                  onConfirm={() => setIsEdit(false)}\n                >\n                  Cancel\n                </Popconfirm>\n              </SButton>\n            </>\n          ) : (\n            <SButton\n              type=\"primary\"\n              size=\"small\"\n              onClick={() => setIsEdit(true)}\n              disabled={UserRole.CENSE !== meData?.me.role}\n            >\n              Edit\n            </SButton>\n          )}\n          <SButton\n            type=\"primary\"\n            size=\"small\"\n            disabled={isEdit || meData?.me.role !== UserRole.CENSE}\n          >\n            <Popconfirm\n              title=\"정말 삭제 하시겠습니까?\"\n              onConfirm={handleFirmwareDelete}\n            >\n              Delete\n            </Popconfirm>\n          </SButton>\n          <SButton\n            type=\"primary\"\n            size=\"small\"\n            onClick={() => history.push('/partner/firmwares/')}\n          >\n            Back\n          </SButton>\n        </MenuBar>\n\n        <TitleColumn>\n          {isEdit ? (\n            <>\n              <Form.Item\n                name=\"kind\"\n                style={{\n                  display: 'inline-block',\n                  width: '20%',\n                  marginRight: '8px',\n                }}\n                rules={[{ required: true, message: '입력 필수' }]}\n                initialValue={loadedData?.kind}\n              >\n                <Select\n                  placeholder=\"말머리\"\n                  allowClear\n                  defaultValue={loadedData?.kind}\n                >\n                  <Option value={KindFirmware.C2000}>C2000</Option>\n                  <Option value={KindFirmware.C3000}>C3000</Option>\n                  <Option value={KindFirmware.C3100}>C3100</Option>\n                  <Option value={KindFirmware.C3300}>C3300</Option>\n                  <Option value={KindFirmware.C5000}>C5000</Option>\n                  <Option value={KindFirmware.C7000}>C7000</Option>\n                  <Option value={KindFirmware.C9000}>C9000</Option>\n                  <Option value={KindFirmware.ETC}>ETC</Option>\n                </Select>\n              </Form.Item>\n              <Form.Item\n                name=\"title\"\n                style={{\n                  display: 'inline-block',\n                  width: '70%',\n                  marginRight: '8px',\n                }}\n                rules={[{ required: true, message: '입력 필수' }]}\n                initialValue={loadedData?.title}\n              >\n                <Input placeholder=\"제목\" defaultValue={loadedData?.title} />\n              </Form.Item>\n              <Form.Item\n                style={{ display: 'inline-block', width: 'calc(10% - 16px)' }}\n              >\n                <Checkbox\n                  defaultChecked={checkLocked}\n                  onChange={handleCheckChange}\n                >\n                  <LockOutlined />\n                </Checkbox>\n              </Form.Item>\n            </>\n          ) : (\n            <>{`[${loadedData?.kind}] ${loadedData?.title}`}</>\n          )}\n        </TitleColumn>\n\n        {isEdit ? (\n          <>\n            <ContentColumn>\n              <Editor\n                previewStyle=\"vertical\"\n                height=\"500px\"\n                initialEditType=\"wysiwyg\"\n                placeholder=\"글쓰기\"\n                ref={editorRef}\n                initialValue={content}\n                language=\"ko-KR\"\n                previewHighlight={false}\n                usageStatistics={false}\n              />\n            </ContentColumn>\n            <Dragger {...uploadProps} defaultFileList={defaultFileList}>\n              <p className=\"ant-upload-drag-icon\">\n                <InboxOutlined />\n              </p>\n              <p className=\"ant-upload-text\">\n                업로드할 파일을 이 영역으로 드래그 또는 클릭합니다.\n              </p>\n              <p className=\"ant-upload-hint\">\n                단일 또는 대량 업로드를 지원하며, 최대 5개까지 업로드\n                가능합니다.\n              </p>\n            </Dragger>\n          </>\n        ) : (\n          <>\n            <ContentColumn>\n              <Viewer\n                initialValue={content}\n                ref={viewerRef as React.MutableRefObject<Viewer>}\n              />\n            </ContentColumn>\n            {files.length > 0 && (\n              <FilesColumn>\n                <FilesTitleColumn>첨부파일</FilesTitleColumn>\n                {files.map((file, index) => (\n                  <a\n                    key={file.id}\n                    title={`첨부${index + 1} 다운로드`}\n                    href={`http://localhost:4000/uploads/firmwares/${file.path}`}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                    download\n                    style={{ margin: '8px 0' }}\n                  >\n                    {`${index + 1}. ${file.path}`}\n                  </a>\n                ))}\n              </FilesColumn>\n            )}\n          </>\n        )}\n      </Form>\n    </Wrapper>\n  );\n};\n","/home/cen/cen-portal-frontend/src/pages/partner/documents/addDocument.tsx",["497","498","499","500","501","502","503","504","505","506","507"],"/home/cen/cen-portal-frontend/src/pages/partner/documents/documentDetail.tsx",["508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528"],"import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { Helmet } from 'react-helmet';\nimport { useHistory, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport 'codemirror/lib/codemirror.css';\nimport '@toast-ui/editor/dist/toastui-editor.css';\nimport { Editor, Viewer } from '@toast-ui/react-editor';\nimport {\n  Button,\n  Comment,\n  Tooltip,\n  List,\n  Input,\n  Form,\n  notification,\n  Popconfirm,\n  Upload,\n  Select,\n  Checkbox,\n} from 'antd';\nimport {\n  getDocumentQuery,\n  getDocumentQueryVariables,\n} from '../../../__generated__/getDocumentQuery';\nimport { InboxOutlined, FileOutlined, LockOutlined } from '@ant-design/icons';\nimport { KindDocument, UserRole } from '../../../__generated__/globalTypes';\nimport moment from 'moment';\nimport { useMe } from '../../../hooks/useMe';\nimport {\n  deleteDocumentMutation,\n  deleteDocumentMutationVariables,\n} from '../../../__generated__/deleteDocumentMutation';\nimport {\n  editDocumentMutation,\n  editDocumentMutationVariables,\n} from '../../../__generated__/editDocumentMutation';\n\nconst { TextArea } = Input;\nconst { Option } = Select;\nconst { Dragger } = Upload;\n\nconst Wrapper = styled.div`\n  padding: 20px;\n`;\n\nconst TitleBar = styled.div`\n  font-size: 25px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nconst MenuBar = styled.span`\n  margin: 20px 0;\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst TitleColumn = styled.div`\n  margin-bottom: 8px;\n  font-weight: bold;\n  font-size: 18px;\n`;\n\nconst ContentColumn = styled.div`\n  margin: 20px 0;\n  padding: 10px;\n  min-height: 350px;\n  border-top: solid #d0d0d0 1px;\n  border-bottom: solid #d0d0d0 1px;\n`;\n\nconst FilesColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst FilesTitleColumn = styled.div`\n  margin: 0 0 10px;\n  font-weight: bold;\n  font-size: 14px;\n`;\n\nconst CommentColumn = styled.div`\n  margin-top: 10px;\n`;\n\nconst SButton = styled(Button)`\n  margin-left: 8px;\n`;\n\nconst GET_WORKAROUND_QUERY = gql`\n  query getDocumentQuery($input: GetDocumentInput!) {\n    getDocument(input: $input) {\n      ok\n      error\n      document {\n        id\n        title\n        kind\n        content\n        locked\n        writer {\n          id\n          company\n          name\n        }\n        files {\n          id\n          path\n        }\n      }\n    }\n  }\n`;\n\nconst DELETE_WORKAROUND_MUTATION = gql`\n  mutation deleteDocumentMutation($input: DeleteDocumentInput!) {\n    deleteDocument(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\nconst EDIT_WORKAROUND_MUTATION = gql`\n  mutation editDocumentMutation($input: EditDocumentInput!) {\n    editDocument(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\ninterface IDocumentUser {\n  id: number;\n  company: string;\n  name: string;\n}\n\ninterface IDocumentFiles {\n  id: number;\n  path: string;\n}\n\ninterface IDocuments {\n  id: number;\n  title: string;\n  kind: KindDocument;\n  content: string;\n  locked: boolean | null;\n  writer: IDocumentUser | null;\n  files: IDocumentFiles[] | null;\n}\n\ninterface IUploadedFile {\n  filename: string;\n  originalname: string;\n}\n\ninterface IDefaultFileList {\n  uid: string;\n  name: string;\n  status: string;\n  url: string;\n}\n\nexport const DocumentDetail: React.FC = () => {\n  const { data: meData } = useMe();\n  const history = useHistory();\n  const documentId: any = useParams();\n  const viewerRef = useRef<Viewer>();\n  const editorRef = React.createRef<any>();\n  const [form] = Form.useForm();\n  const [content, setContent] = useState<string>();\n  const [loadedData, setLoadedData] = useState<IDocuments>();\n  const [files, setFiles] = useState<IDocumentFiles[]>([]);\n  const [isEdit, setIsEdit] = useState<boolean>(false);\n  const [uploadedFile, setUploadedFile] = useState<IUploadedFile[]>([]);\n  const [isUploading, setIsUploading] = useState<boolean>(false);\n  const [checkLocked, setCheckLocked] = useState<boolean>(false);\n  const [defaultFileList, setDefaultFileList] = useState<any[]>([]);\n  const {\n    data: documentDetailData,\n    loading: documentDetailLoading,\n    refetch,\n  } = useQuery<getDocumentQuery, getDocumentQueryVariables>(\n    GET_WORKAROUND_QUERY,\n    {\n      variables: {\n        input: {\n          id: +documentId.id,\n        },\n      },\n    },\n  );\n\n  const onDocumentDeleteCompleted = (data: deleteDocumentMutation) => {\n    const {\n      deleteDocument: { ok, error },\n    } = data;\n    if (ok) {\n      notification.success({\n        message: 'Success!',\n        description: `삭제 성공`,\n        placement: 'topRight',\n        duration: 1,\n      });\n      history.push('/partner/documents/');\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `삭제 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    }\n  };\n\n  const onDocumentEditCompleted = (data: editDocumentMutation) => {\n    const {\n      editDocument: { ok, error },\n    } = data;\n    if (ok) {\n      notification.success({\n        message: 'Success!',\n        description: `수정 성공`,\n        placement: 'topRight',\n        duration: 1,\n      });\n      history.push(`/partner/documents/${documentId.id}`);\n    } else if (error) {\n      notification.error({\n        message: 'Error',\n        description: `수정 실패. ${error}`,\n        placement: 'topRight',\n        duration: 1,\n      });\n    }\n    refetch();\n  };\n\n  const [deleteDocumentMutation] = useMutation<\n    deleteDocumentMutation,\n    deleteDocumentMutationVariables\n  >(DELETE_WORKAROUND_MUTATION, {\n    onCompleted: onDocumentDeleteCompleted,\n  });\n\n  const [editDocumentMutation] = useMutation<\n    editDocumentMutation,\n    editDocumentMutationVariables\n  >(EDIT_WORKAROUND_MUTATION, {\n    onCompleted: onDocumentEditCompleted,\n  });\n\n  useEffect(() => {\n    if (viewerRef.current && documentDetailData) {\n      const document = documentDetailData.getDocument.document as IDocuments;\n      setContent(document.content);\n      setFiles(document.files as IDocumentFiles[]);\n      setLoadedData(document as IDocuments);\n      setCheckLocked(document.locked as boolean);\n      viewerRef.current?.getInstance().setMarkdown(document.content as string);\n      const uploadedList: IDefaultFileList[] = [];\n      files.map((file, index) => {\n        uploadedList.push({\n          uid: `${index + 1}`,\n          name: `${file.path}`,\n          status: 'done',\n          url: `http://localhost:4000/uploads/documents/${file.path}`,\n        });\n      });\n      setDefaultFileList(uploadedList);\n    }\n    refetch();\n  }, [documentDetailData, loadedData]);\n\n  const handleEditClick = (event: any) => {\n    console.log(event.target.attributes[0].value);\n  };\n\n  const handleDocumentDelete = () => {\n    deleteDocumentMutation({\n      variables: { input: { documentId: +documentId.id } },\n    });\n  };\n\n  const handleSave = async (values: any) => {\n    const getContent = await editorRef.current.getInstance().getMarkdown();\n    if (isUploading) {\n      notification.error({\n        message: 'Error',\n        description: `파일 업로드 중입니다. 잠시 후에 시도해주세요.`,\n        placement: 'topRight',\n        duration: 1.5,\n      });\n      return;\n    }\n    if (!getContent) {\n      notification.error({\n        message: 'Error',\n        description: `내용을 입력해 주세요.`,\n        placement: 'topRight',\n        duration: 1,\n      });\n      return;\n    }\n    setContent(getContent);\n    setIsEdit(!isEdit);\n    const newFileForm: any[] = [];\n    if (defaultFileList.length !== 0) {\n      defaultFileList.map((file) => {\n        newFileForm.push({ path: file.name });\n      });\n    }\n    if (uploadedFile.length !== 0) {\n      uploadedFile.map((file) => {\n        newFileForm.push({\n          path: file.filename,\n        });\n      });\n    }\n    setFiles(newFileForm); // for render files\n    editDocumentMutation({\n      variables: {\n        input: {\n          documentId: +documentId.id,\n          title: values.title,\n          content: getContent,\n          kind: values.kind,\n          files: newFileForm,\n          locked: checkLocked,\n        },\n      },\n    });\n  };\n\n  const handleCheckChange = () => {\n    setCheckLocked(!checkLocked);\n    console.log(checkLocked);\n  };\n\n  const uploadProps = {\n    name: 'file',\n    multiple: true,\n    maxCount: 5,\n    action: 'http://localhost:4000/uploads/documents',\n    customRequest: (options: any) => {\n      const data = new FormData();\n      data.append('file', options.file);\n      const config = {\n        headers: {\n          'content-type': 'multipart/form-data',\n        },\n      };\n      if (uploadedFile.length + defaultFileList.length >= 5) {\n        notification.error({\n          message: 'Error',\n          description: `업로드는 최대 5개만 가능합니다.`,\n          placement: 'topRight',\n          duration: 1.5,\n        });\n      } else {\n        axios\n          .post(options.action, data, config)\n          .then((res: any) => {\n            options.onSuccess(res.data, options.file);\n            uploadedFile.push(res.data.data[0]);\n            setUploadedFile(uploadedFile);\n            notification.success({\n              message: 'Success!',\n              description: `업로드 성공(${options.file.name})`,\n              placement: 'topRight',\n              duration: 1.5,\n            });\n          })\n          .catch((err: Error) => {\n            notification.error({\n              message: 'Error',\n              description: `업로드 실패`,\n              placement: 'topRight',\n              duration: 1.5,\n            });\n          });\n      }\n    },\n    progress: {\n      strokeColor: {\n        '0%': '#108ee9',\n        '100%': '#87d068',\n      },\n      strokeWidth: 3,\n      format: (percent: any) => `${parseFloat(percent.toFixed(2))}%`,\n    },\n    async onChange(info: any) {\n      const refeshDefault: any[] = [];\n      await info.fileList.map((file: any) => {\n        if (file.response === undefined) {\n          refeshDefault.push({ name: file.name });\n        }\n      });\n      setDefaultFileList(refeshDefault); // dummy for max file count\n      if (\n        info.file.status === 'uploading' &&\n        uploadedFile.length + defaultFileList.length < 5\n      ) {\n        setIsUploading(true);\n      } else {\n        setIsUploading(false);\n      }\n    },\n    defaultFileList: defaultFileList,\n  };\n\n  return (\n    <Wrapper>\n      <Helmet>\n        <title>Documents | CEN Portal</title>\n      </Helmet>\n      <TitleBar>\n        <FileOutlined />\n        {` Documents`}\n      </TitleBar>\n      <Form form={form} onFinish={handleSave} autoComplete=\"off\">\n        <MenuBar>\n          {isEdit ? (\n            <>\n              <SButton type=\"primary\" size=\"small\" htmlType=\"submit\">\n                Save\n              </SButton>\n              <SButton type=\"primary\" size=\"small\">\n                <Popconfirm\n                  title=\"정말 취소 하시겠습니까?\"\n                  onConfirm={() => setIsEdit(false)}\n                >\n                  Cancel\n                </Popconfirm>\n              </SButton>\n            </>\n          ) : (\n            <SButton\n              type=\"primary\"\n              size=\"small\"\n              onClick={() => setIsEdit(true)}\n              disabled={UserRole.CENSE !== meData?.me.role}\n            >\n              Edit\n            </SButton>\n          )}\n          <SButton\n            type=\"primary\"\n            size=\"small\"\n            disabled={isEdit || meData?.me.role !== UserRole.CENSE}\n          >\n            <Popconfirm\n              title=\"정말 삭제 하시겠습니까?\"\n              onConfirm={handleDocumentDelete}\n            >\n              Delete\n            </Popconfirm>\n          </SButton>\n          <SButton\n            type=\"primary\"\n            size=\"small\"\n            onClick={() => history.push('/partner/documents/')}\n          >\n            Back\n          </SButton>\n        </MenuBar>\n\n        <TitleColumn>\n          {isEdit ? (\n            <>\n              <Form.Item\n                name=\"kind\"\n                style={{\n                  display: 'inline-block',\n                  width: '20%',\n                  marginRight: '8px',\n                }}\n                rules={[{ required: true, message: '입력 필수' }]}\n                initialValue={loadedData?.kind}\n              >\n                <Select\n                  placeholder=\"말머리\"\n                  allowClear\n                  defaultValue={loadedData?.kind}\n                >\n                  <Option value={KindDocument.Datasheet}>데이터시트</Option>\n                  <Option value={KindDocument.Proposal}>표준제안서</Option>\n                  <Option value={KindDocument.Certificate}>인증서</Option>\n                  <Option value={KindDocument.TestReport}>시험성적서</Option>\n                  <Option value={KindDocument.Brochure}>브로셔</Option>\n                  <Option value={KindDocument.ETC}>ETC</Option>\n                </Select>\n              </Form.Item>\n              <Form.Item\n                name=\"title\"\n                style={{\n                  display: 'inline-block',\n                  width: '70%',\n                  marginRight: '8px',\n                }}\n                rules={[{ required: true, message: '입력 필수' }]}\n                initialValue={loadedData?.title}\n              >\n                <Input placeholder=\"제목\" defaultValue={loadedData?.title} />\n              </Form.Item>\n              <Form.Item\n                style={{ display: 'inline-block', width: 'calc(10% - 16px)' }}\n              >\n                <Checkbox\n                  defaultChecked={checkLocked}\n                  onChange={handleCheckChange}\n                >\n                  <LockOutlined />\n                </Checkbox>\n              </Form.Item>\n            </>\n          ) : (\n            <>\n              {loadedData?.kind === KindDocument.Datasheet\n                ? `[데이터시트] ${loadedData?.title}`\n                : loadedData?.kind === KindDocument.Proposal\n                ? `[표준제안서] ${loadedData?.title}`\n                : loadedData?.kind === KindDocument.Certificate\n                ? `[인증서] ${loadedData?.title}`\n                : loadedData?.kind === KindDocument.TestReport\n                ? `[시험성적서] ${loadedData?.title}`\n                : loadedData?.kind === KindDocument.Brochure\n                ? `[브로셔] ${loadedData?.title}`\n                : `[${loadedData?.kind}] ${loadedData?.title}`}\n            </>\n          )}\n        </TitleColumn>\n\n        {isEdit ? (\n          <>\n            <ContentColumn>\n              <Editor\n                previewStyle=\"vertical\"\n                height=\"500px\"\n                initialEditType=\"wysiwyg\"\n                placeholder=\"글쓰기\"\n                ref={editorRef}\n                initialValue={content}\n                language=\"ko-KR\"\n                previewHighlight={false}\n                usageStatistics={false}\n              />\n            </ContentColumn>\n            <Dragger {...uploadProps} defaultFileList={defaultFileList}>\n              <p className=\"ant-upload-drag-icon\">\n                <InboxOutlined />\n              </p>\n              <p className=\"ant-upload-text\">\n                업로드할 파일을 이 영역으로 드래그 또는 클릭합니다.\n              </p>\n              <p className=\"ant-upload-hint\">\n                단일 또는 대량 업로드를 지원하며, 최대 5개까지 업로드\n                가능합니다.\n              </p>\n            </Dragger>\n          </>\n        ) : (\n          <>\n            <ContentColumn>\n              <Viewer\n                initialValue={content}\n                ref={viewerRef as React.MutableRefObject<Viewer>}\n              />\n            </ContentColumn>\n            {files.length > 0 && (\n              <FilesColumn>\n                <FilesTitleColumn>첨부파일</FilesTitleColumn>\n                {files.map((file, index) => (\n                  <a\n                    key={file.id}\n                    title={`첨부${index + 1} 다운로드`}\n                    href={`http://localhost:4000/uploads/documents/${file.path}`}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                    download\n                    style={{ margin: '8px 0' }}\n                  >\n                    {`${index + 1}. ${file.path}`}\n                  </a>\n                ))}\n              </FilesColumn>\n            )}\n          </>\n        )}\n      </Form>\n    </Wrapper>\n  );\n};\n","/home/cen/cen-portal-frontend/src/hooks/useAllDocuments.tsx",["529"],"import { gql, useQuery } from '@apollo/client';\nimport {\n  allDocumentsQuery,\n  allDocumentsQueryVariables,\n} from '../__generated__/allDocumentsQuery';\n\nconst ALL_FIRMWARES_QUERY = gql`\n  query allDocumentsQuery($input: AllDocumentsInput!) {\n    allDocuments(input: $input) {\n      ok\n      error\n      totalPages\n      totalResults\n      documents {\n        id\n        writer {\n          id\n          name\n          company\n        }\n        locked\n        kind\n        title\n        files {\n          id\n          path\n        }\n        createAt\n        updateAt\n      }\n    }\n  }\n`;\n\nexport const useAllDocuments = (page?: number, take?: number) => {\n  return useQuery<allDocumentsQuery, allDocumentsQueryVariables>(\n    ALL_FIRMWARES_QUERY,\n    {\n      variables: {\n        input: {\n          page,\n          take,\n        },\n      },\n    },\n  );\n};\n","/home/cen/cen-portal-frontend/src/hooks/useAllFirmwares.tsx",["530"],"import { gql, useQuery } from '@apollo/client';\nimport {\n  allFirmwaresQuery,\n  allFirmwaresQueryVariables,\n} from '../__generated__/allFirmwaresQuery';\n\nconst ALL_FIRMWARES_QUERY = gql`\n  query allFirmwaresQuery($input: AllFirmwaresInput!) {\n    allFirmwares(input: $input) {\n      ok\n      error\n      totalPages\n      totalResults\n      firmwares {\n        id\n        writer {\n          id\n          name\n          company\n        }\n        locked\n        kind\n        title\n        files {\n          id\n          path\n        }\n        createAt\n        updateAt\n      }\n    }\n  }\n`;\n\nexport const useAllFirmwares = (page?: number, take?: number) => {\n  return useQuery<allFirmwaresQuery, allFirmwaresQueryVariables>(\n    ALL_FIRMWARES_QUERY,\n    {\n      variables: {\n        input: {\n          page,\n          take,\n        },\n      },\n    },\n  );\n};\n","/home/cen/cen-portal-frontend/src/hooks/useAllCases.tsx",["531"],"import { gql, useQuery } from '@apollo/client';\nimport {\n  allIssuesQuery,\n  allIssuesQueryVariables,\n} from '../__generated__/allIssuesQuery';\n\nconst ALL_ISSUES_QUERY = gql`\n  query allIssuesQuery($input: AllIssuesInput!) {\n    allIssues(input: $input) {\n      ok\n      error\n      totalPages\n      totalResults\n      issues {\n        id\n        writer {\n          id\n          name\n          company\n        }\n        locked\n        kind\n        title\n        files {\n          id\n          path\n        }\n        createAt\n        updateAt\n        commentsNum\n      }\n    }\n  }\n`;\n\nexport const useAllCases = (page?: number, take?: number) => {\n  return useQuery<allIssuesQuery, allIssuesQueryVariables>(ALL_ISSUES_QUERY, {\n    variables: {\n      input: {\n        page,\n        take,\n      },\n    },\n  });\n};\n","/home/cen/cen-portal-frontend/src/hooks/useAllWorkarounds.tsx",["532"],"import { gql, useQuery } from '@apollo/client';\nimport {\n  allWorkaroundsQuery,\n  allWorkaroundsQueryVariables,\n} from '../__generated__/allWorkaroundsQuery';\n\nconst ALL_WORKAROUNDS_QUERY = gql`\n  query allWorkaroundsQuery($input: AllWorkaroundsInput!) {\n    allWorkarounds(input: $input) {\n      ok\n      error\n      totalPages\n      totalResults\n      workarounds {\n        id\n        writer {\n          id\n          name\n          company\n        }\n        locked\n        kind\n        title\n        files {\n          id\n          path\n        }\n        createAt\n        updateAt\n        commentsNum\n      }\n    }\n  }\n`;\n\nexport const useAllWorkarounds = (page?: number, take?: number) => {\n  return useQuery<allWorkaroundsQuery, allWorkaroundsQueryVariables>(\n    ALL_WORKAROUNDS_QUERY,\n    {\n      variables: {\n        input: {\n          page,\n          take,\n        },\n      },\n    },\n  );\n};\n","/home/cen/cen-portal-frontend/src/hooks/useAllParts.tsx",["533"],"import { gql, useQuery } from '@apollo/client';\nimport {\n  allPartsQuery,\n  allPartsQueryVariables,\n} from '../__generated__/allPartsQuery';\n\nconst ALL_PARTS_QUERY = gql`\n  query allPartsQuery($input: AllPartsInput!) {\n    allParts(input: $input) {\n      ok\n      error\n      totalPages\n      totalResults\n      parts {\n        id\n        name\n        series\n        description\n      }\n    }\n  }\n`;\n\nexport const useAllParts = (page?: number, take?: number) => {\n  return useQuery<allPartsQuery, allPartsQueryVariables>(ALL_PARTS_QUERY, {\n    variables: {\n      input: {\n        page,\n        take,\n      },\n    },\n  });\n};\n","/home/cen/cen-portal-frontend/src/hooks/useAllBundles.tsx",["534"],"import { gql, useQuery } from '@apollo/client';\r\nimport {\r\n  allBundlesQuery,\r\n  allBundlesQueryVariables,\r\n} from '../__generated__/allBundlesQuery';\r\n\r\nconst ALL_BUNDLES_QUERY = gql`\r\n  query allBundlesQuery($input: AllBundlesInput!) {\r\n    allBundles(input: $input) {\r\n      ok\r\n      error\r\n      totalPages\r\n      totalResults\r\n      bundles {\r\n        id\r\n        name\r\n        series\r\n        description\r\n        parts {\r\n          num\r\n          part {\r\n            id\r\n            name\r\n            series\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const useAllBundles = (page?: number, take?: number) => {\r\n  return useQuery<allBundlesQuery, allBundlesQueryVariables>(\r\n    ALL_BUNDLES_QUERY,\r\n    {\r\n      variables: {\r\n        input: {\r\n          page,\r\n          take,\r\n        },\r\n      },\r\n    },\r\n  );\r\n};\r\n",[],"/home/cen/cen-portal-frontend/src/hooks/useAllPartners.tsx",["535"],"import { gql, useQuery } from '@apollo/client';\r\nimport {\r\n  allPartnersQuery,\r\n  allPartnersQueryVariables,\r\n} from '../__generated__/allPartnersQuery';\r\n\r\nconst ALL_PARTNERS_QUERY = gql`\r\n  query allPartnersQuery($input: AllPartnersInput!) {\r\n    allPartners(input: $input) {\r\n      ok\r\n      error\r\n      totalPages\r\n      totalResults\r\n      partners {\r\n        id\r\n        name\r\n        address\r\n        zip\r\n        tel\r\n        contactsCount\r\n        contacts {\r\n          id\r\n          name\r\n          jobTitle\r\n          tel\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const useAllPartners = (page?: number, take?: number) => {\r\n  return useQuery<allPartnersQuery, allPartnersQueryVariables>(\r\n    ALL_PARTNERS_QUERY,\r\n    {\r\n      variables: {\r\n        input: {\r\n          page,\r\n          take,\r\n        },\r\n      },\r\n    },\r\n  );\r\n};\r\n",{"ruleId":"536","severity":1,"message":"537","line":3,"column":25,"nodeType":"538","messageId":"539","endLine":3,"endColumn":57},{"ruleId":"536","severity":1,"message":"537","line":6,"column":32,"nodeType":"538","messageId":"539","endLine":6,"endColumn":37},{"ruleId":"540","severity":1,"message":"541","line":159,"column":26,"nodeType":"542","messageId":"543","endLine":159,"endColumn":31},{"ruleId":"544","severity":1,"message":"545","line":6,"column":34,"nodeType":"546","messageId":"547","endLine":6,"endColumn":37,"suggestions":"548"},{"ruleId":"540","severity":1,"message":"549","line":129,"column":22,"nodeType":"542","messageId":"543","endLine":129,"endColumn":49},{"ruleId":"544","severity":1,"message":"545","line":161,"column":35,"nodeType":"546","messageId":"547","endLine":161,"endColumn":38,"suggestions":"550"},{"ruleId":"540","severity":1,"message":"551","line":109,"column":27,"nodeType":"542","messageId":"543","endLine":109,"endColumn":31},{"ruleId":"544","severity":1,"message":"545","line":133,"column":35,"nodeType":"546","messageId":"547","endLine":133,"endColumn":38,"suggestions":"552"},{"ruleId":"536","severity":1,"message":"537","line":21,"column":22,"nodeType":"538","messageId":"539","endLine":21,"endColumn":27},{"ruleId":"540","severity":1,"message":"553","line":68,"column":9,"nodeType":"542","messageId":"543","endLine":68,"endColumn":16},{"ruleId":"544","severity":1,"message":"545","line":70,"column":37,"nodeType":"546","messageId":"547","endLine":70,"endColumn":40,"suggestions":"554"},{"ruleId":"540","severity":1,"message":"551","line":100,"column":38,"nodeType":"542","messageId":"543","endLine":100,"endColumn":42},{"ruleId":"540","severity":1,"message":"555","line":148,"column":3,"nodeType":"542","messageId":"543","endLine":148,"endColumn":9},{"ruleId":"540","severity":1,"message":"556","line":149,"column":3,"nodeType":"542","messageId":"543","endLine":149,"endColumn":8},{"ruleId":"536","severity":1,"message":"537","line":190,"column":22,"nodeType":"538","messageId":"539","endLine":190,"endColumn":27},{"ruleId":"540","severity":1,"message":"557","line":257,"column":39,"nodeType":"542","messageId":"543","endLine":257,"endColumn":54},{"ruleId":"540","severity":1,"message":"558","line":264,"column":37,"nodeType":"542","messageId":"543","endLine":264,"endColumn":50},{"ruleId":"544","severity":1,"message":"545","line":505,"column":35,"nodeType":"546","messageId":"547","endLine":505,"endColumn":38,"suggestions":"559"},{"ruleId":"544","severity":1,"message":"545","line":556,"column":43,"nodeType":"546","messageId":"547","endLine":556,"endColumn":46,"suggestions":"560"},{"ruleId":"540","severity":1,"message":"561","line":573,"column":46,"nodeType":"542","messageId":"543","endLine":573,"endColumn":68},{"ruleId":"540","severity":1,"message":"562","line":133,"column":17,"nodeType":"542","messageId":"543","endLine":133,"endColumn":23},{"ruleId":"544","severity":1,"message":"545","line":135,"column":18,"nodeType":"546","messageId":"547","endLine":135,"endColumn":21,"suggestions":"563"},{"ruleId":"540","severity":1,"message":"564","line":180,"column":40,"nodeType":"542","messageId":"543","endLine":180,"endColumn":56},{"ruleId":"540","severity":1,"message":"565","line":189,"column":5,"nodeType":"542","messageId":"543","endLine":189,"endColumn":14},{"ruleId":"540","severity":1,"message":"566","line":190,"column":5,"nodeType":"542","messageId":"543","endLine":190,"endColumn":10},{"ruleId":"540","severity":1,"message":"567","line":191,"column":5,"nodeType":"542","messageId":"543","endLine":191,"endColumn":14},{"ruleId":"540","severity":1,"message":"556","line":193,"column":5,"nodeType":"542","messageId":"543","endLine":193,"endColumn":10},{"ruleId":"540","severity":1,"message":"568","line":218,"column":13,"nodeType":"542","messageId":"543","endLine":218,"endColumn":26},{"ruleId":"544","severity":1,"message":"545","line":235,"column":28,"nodeType":"546","messageId":"547","endLine":235,"endColumn":31,"suggestions":"569"},{"ruleId":"544","severity":1,"message":"545","line":299,"column":43,"nodeType":"546","messageId":"547","endLine":299,"endColumn":46,"suggestions":"570"},{"ruleId":"544","severity":1,"message":"545","line":353,"column":16,"nodeType":"546","messageId":"547","endLine":353,"endColumn":19,"suggestions":"571"},{"ruleId":"540","severity":1,"message":"572","line":1,"column":38,"nodeType":"542","messageId":"543","endLine":1,"endColumn":52},{"ruleId":"540","severity":1,"message":"573","line":6,"column":15,"nodeType":"542","messageId":"543","endLine":6,"endColumn":26},{"ruleId":"544","severity":1,"message":"545","line":100,"column":13,"nodeType":"546","messageId":"547","endLine":100,"endColumn":16,"suggestions":"574"},{"ruleId":"544","severity":1,"message":"545","line":101,"column":13,"nodeType":"546","messageId":"547","endLine":101,"endColumn":16,"suggestions":"575"},{"ruleId":"544","severity":1,"message":"545","line":106,"column":19,"nodeType":"546","messageId":"547","endLine":106,"endColumn":22,"suggestions":"576"},{"ruleId":"544","severity":1,"message":"545","line":113,"column":17,"nodeType":"546","messageId":"547","endLine":113,"endColumn":20,"suggestions":"577"},{"ruleId":"544","severity":1,"message":"545","line":131,"column":18,"nodeType":"546","messageId":"547","endLine":131,"endColumn":21,"suggestions":"578"},{"ruleId":"544","severity":1,"message":"545","line":148,"column":30,"nodeType":"546","messageId":"547","endLine":148,"endColumn":33,"suggestions":"579"},{"ruleId":"544","severity":1,"message":"545","line":304,"column":22,"nodeType":"546","messageId":"547","endLine":304,"endColumn":25,"suggestions":"580"},{"ruleId":"540","severity":1,"message":"567","line":100,"column":3,"nodeType":"542","messageId":"543","endLine":100,"endColumn":12},{"ruleId":"540","severity":1,"message":"555","line":101,"column":3,"nodeType":"542","messageId":"543","endLine":101,"endColumn":9},{"ruleId":"540","severity":1,"message":"556","line":102,"column":3,"nodeType":"542","messageId":"543","endLine":102,"endColumn":8},{"ruleId":"536","severity":1,"message":"537","line":128,"column":24,"nodeType":"538","messageId":"539","endLine":128,"endColumn":29},{"ruleId":"540","severity":1,"message":"562","line":137,"column":17,"nodeType":"542","messageId":"543","endLine":137,"endColumn":23},{"ruleId":"540","severity":1,"message":"581","line":187,"column":41,"nodeType":"542","messageId":"543","endLine":187,"endColumn":58},{"ruleId":"540","severity":1,"message":"582","line":194,"column":39,"nodeType":"542","messageId":"543","endLine":194,"endColumn":54},{"ruleId":"544","severity":1,"message":"545","line":349,"column":35,"nodeType":"546","messageId":"547","endLine":349,"endColumn":38,"suggestions":"583"},{"ruleId":"544","severity":1,"message":"545","line":399,"column":43,"nodeType":"546","messageId":"547","endLine":399,"endColumn":46,"suggestions":"584"},{"ruleId":"540","severity":1,"message":"561","line":416,"column":46,"nodeType":"542","messageId":"543","endLine":416,"endColumn":70},{"ruleId":"544","severity":1,"message":"545","line":215,"column":29,"nodeType":"546","messageId":"547","endLine":215,"endColumn":32,"suggestions":"585"},{"ruleId":"544","severity":1,"message":"545","line":277,"column":50,"nodeType":"546","messageId":"547","endLine":277,"endColumn":53,"suggestions":"586"},{"ruleId":"544","severity":1,"message":"545","line":293,"column":51,"nodeType":"546","messageId":"547","endLine":293,"endColumn":54,"suggestions":"587"},{"ruleId":"544","severity":1,"message":"545","line":298,"column":39,"nodeType":"546","messageId":"547","endLine":298,"endColumn":42,"suggestions":"588"},{"ruleId":"544","severity":1,"message":"545","line":307,"column":35,"nodeType":"546","messageId":"547","endLine":307,"endColumn":38,"suggestions":"589"},{"ruleId":"544","severity":1,"message":"545","line":316,"column":36,"nodeType":"546","messageId":"547","endLine":316,"endColumn":39,"suggestions":"590"},{"ruleId":"544","severity":1,"message":"545","line":325,"column":31,"nodeType":"546","messageId":"547","endLine":325,"endColumn":34,"suggestions":"591"},{"ruleId":"544","severity":1,"message":"545","line":334,"column":28,"nodeType":"546","messageId":"547","endLine":334,"endColumn":31,"suggestions":"592"},{"ruleId":"544","severity":1,"message":"545","line":338,"column":38,"nodeType":"546","messageId":"547","endLine":338,"endColumn":41,"suggestions":"593"},{"ruleId":"544","severity":1,"message":"545","line":342,"column":38,"nodeType":"546","messageId":"547","endLine":342,"endColumn":41,"suggestions":"594"},{"ruleId":"544","severity":1,"message":"545","line":435,"column":57,"nodeType":"546","messageId":"547","endLine":435,"endColumn":60,"suggestions":"595"},{"ruleId":"544","severity":1,"message":"545","line":435,"column":63,"nodeType":"546","messageId":"547","endLine":435,"endColumn":66,"suggestions":"596"},{"ruleId":"544","severity":1,"message":"545","line":442,"column":43,"nodeType":"546","messageId":"547","endLine":442,"endColumn":46,"suggestions":"597"},{"ruleId":"544","severity":1,"message":"545","line":495,"column":57,"nodeType":"546","messageId":"547","endLine":495,"endColumn":60,"suggestions":"598"},{"ruleId":"544","severity":1,"message":"545","line":495,"column":63,"nodeType":"546","messageId":"547","endLine":495,"endColumn":66,"suggestions":"599"},{"ruleId":"544","severity":1,"message":"545","line":582,"column":57,"nodeType":"546","messageId":"547","endLine":582,"endColumn":60,"suggestions":"600"},{"ruleId":"544","severity":1,"message":"545","line":582,"column":63,"nodeType":"546","messageId":"547","endLine":582,"endColumn":66,"suggestions":"601"},{"ruleId":"544","severity":1,"message":"545","line":633,"column":57,"nodeType":"546","messageId":"547","endLine":633,"endColumn":60,"suggestions":"602"},{"ruleId":"544","severity":1,"message":"545","line":633,"column":63,"nodeType":"546","messageId":"547","endLine":633,"endColumn":66,"suggestions":"603"},{"ruleId":"544","severity":1,"message":"545","line":684,"column":57,"nodeType":"546","messageId":"547","endLine":684,"endColumn":60,"suggestions":"604"},{"ruleId":"544","severity":1,"message":"545","line":684,"column":63,"nodeType":"546","messageId":"547","endLine":684,"endColumn":66,"suggestions":"605"},{"ruleId":"540","severity":1,"message":"606","line":12,"column":3,"nodeType":"542","messageId":"543","endLine":12,"endColumn":8},{"ruleId":"540","severity":1,"message":"607","line":18,"column":3,"nodeType":"542","messageId":"543","endLine":18,"endColumn":22},{"ruleId":"540","severity":1,"message":"608","line":19,"column":3,"nodeType":"542","messageId":"543","endLine":19,"endColumn":15},{"ruleId":"540","severity":1,"message":"609","line":27,"column":9,"nodeType":"542","messageId":"543","endLine":27,"endColumn":15},{"ruleId":"536","severity":1,"message":"537","line":61,"column":27,"nodeType":"538","messageId":"539","endLine":61,"endColumn":32},{"ruleId":"540","severity":1,"message":"610","line":87,"column":41,"nodeType":"542","messageId":"543","endLine":87,"endColumn":58},{"ruleId":"544","severity":1,"message":"545","line":94,"column":29,"nodeType":"546","messageId":"547","endLine":94,"endColumn":32,"suggestions":"611"},{"ruleId":"540","severity":1,"message":"612","line":4,"column":10,"nodeType":"542","messageId":"543","endLine":4,"endColumn":21},{"ruleId":"540","severity":1,"message":"613","line":17,"column":3,"nodeType":"542","messageId":"543","endLine":17,"endColumn":8},{"ruleId":"540","severity":1,"message":"614","line":33,"column":10,"nodeType":"542","messageId":"543","endLine":33,"endColumn":17},{"ruleId":"540","severity":1,"message":"615","line":34,"column":10,"nodeType":"542","messageId":"543","endLine":34,"endColumn":18},{"ruleId":"540","severity":1,"message":"616","line":148,"column":11,"nodeType":"542","messageId":"543","endLine":148,"endColumn":25},{"ruleId":"540","severity":1,"message":"567","line":175,"column":3,"nodeType":"542","messageId":"543","endLine":175,"endColumn":12},{"ruleId":"540","severity":1,"message":"555","line":176,"column":3,"nodeType":"542","messageId":"543","endLine":176,"endColumn":9},{"ruleId":"540","severity":1,"message":"556","line":177,"column":3,"nodeType":"542","messageId":"543","endLine":177,"endColumn":8},{"ruleId":"544","severity":1,"message":"545","line":208,"column":20,"nodeType":"546","messageId":"547","endLine":208,"endColumn":23,"suggestions":"617"},{"ruleId":"540","severity":1,"message":"562","line":209,"column":17,"nodeType":"542","messageId":"543","endLine":209,"endColumn":23},{"ruleId":"544","severity":1,"message":"545","line":212,"column":36,"nodeType":"546","messageId":"547","endLine":212,"endColumn":39,"suggestions":"618"},{"ruleId":"540","severity":1,"message":"619","line":269,"column":41,"nodeType":"542","messageId":"543","endLine":269,"endColumn":58},{"ruleId":"540","severity":1,"message":"620","line":276,"column":39,"nodeType":"542","messageId":"543","endLine":276,"endColumn":54},{"ruleId":"544","severity":1,"message":"545","line":342,"column":35,"nodeType":"546","messageId":"547","endLine":342,"endColumn":38,"suggestions":"621"},{"ruleId":"544","severity":1,"message":"545","line":384,"column":43,"nodeType":"546","messageId":"547","endLine":384,"endColumn":46,"suggestions":"622"},{"ruleId":"540","severity":1,"message":"561","line":465,"column":46,"nodeType":"542","messageId":"543","endLine":465,"endColumn":68},{"ruleId":"540","severity":1,"message":"614","line":28,"column":10,"nodeType":"542","messageId":"543","endLine":28,"endColumn":17},{"ruleId":"540","severity":1,"message":"615","line":31,"column":10,"nodeType":"542","messageId":"543","endLine":31,"endColumn":18},{"ruleId":"540","severity":1,"message":"623","line":93,"column":11,"nodeType":"542","messageId":"543","endLine":93,"endColumn":28},{"ruleId":"540","severity":1,"message":"624","line":108,"column":11,"nodeType":"542","messageId":"543","endLine":108,"endColumn":26},{"ruleId":"536","severity":1,"message":"537","line":116,"column":23,"nodeType":"538","messageId":"539","endLine":116,"endColumn":28},{"ruleId":"540","severity":1,"message":"625","line":117,"column":9,"nodeType":"542","messageId":"543","endLine":117,"endColumn":15},{"ruleId":"540","severity":1,"message":"562","line":120,"column":17,"nodeType":"542","messageId":"543","endLine":120,"endColumn":23},{"ruleId":"540","severity":1,"message":"626","line":190,"column":40,"nodeType":"542","messageId":"543","endLine":190,"endColumn":56},{"ruleId":"540","severity":1,"message":"627","line":197,"column":38,"nodeType":"542","messageId":"543","endLine":197,"endColumn":52},{"ruleId":"540","severity":1,"message":"628","line":270,"column":9,"nodeType":"542","messageId":"543","endLine":270,"endColumn":21},{"ruleId":"544","severity":1,"message":"545","line":270,"column":30,"nodeType":"546","messageId":"547","endLine":270,"endColumn":33,"suggestions":"629"},{"ruleId":"540","severity":1,"message":"630","line":286,"column":9,"nodeType":"542","messageId":"543","endLine":286,"endColumn":13},{"ruleId":"544","severity":1,"message":"545","line":290,"column":33,"nodeType":"546","messageId":"547","endLine":290,"endColumn":36,"suggestions":"631"},{"ruleId":"544","severity":1,"message":"545","line":320,"column":35,"nodeType":"546","messageId":"547","endLine":320,"endColumn":38,"suggestions":"632"},{"ruleId":"540","severity":1,"message":"561","line":338,"column":46,"nodeType":"542","messageId":"543","endLine":338,"endColumn":66},{"ruleId":"540","severity":1,"message":"609","line":29,"column":9,"nodeType":"542","messageId":"543","endLine":29,"endColumn":15},{"ruleId":"540","severity":1,"message":"624","line":62,"column":11,"nodeType":"542","messageId":"543","endLine":62,"endColumn":26},{"ruleId":"536","severity":1,"message":"537","line":70,"column":26,"nodeType":"538","messageId":"539","endLine":70,"endColumn":31},{"ruleId":"540","severity":1,"message":"633","line":79,"column":14,"nodeType":"542","messageId":"543","endLine":79,"endColumn":24},{"ruleId":"540","severity":1,"message":"634","line":116,"column":40,"nodeType":"542","messageId":"543","endLine":116,"endColumn":56},{"ruleId":"544","severity":1,"message":"545","line":123,"column":29,"nodeType":"546","messageId":"547","endLine":123,"endColumn":32,"suggestions":"635"},{"ruleId":"544","severity":1,"message":"545","line":125,"column":18,"nodeType":"546","messageId":"547","endLine":125,"endColumn":21,"suggestions":"636"},{"ruleId":"540","severity":1,"message":"637","line":147,"column":9,"nodeType":"542","messageId":"543","endLine":147,"endColumn":21},{"ruleId":"540","severity":1,"message":"638","line":1,"column":17,"nodeType":"542","messageId":"543","endLine":1,"endColumn":26},{"ruleId":"540","severity":1,"message":"606","line":12,"column":3,"nodeType":"542","messageId":"543","endLine":12,"endColumn":8},{"ruleId":"540","severity":1,"message":"607","line":18,"column":3,"nodeType":"542","messageId":"543","endLine":18,"endColumn":22},{"ruleId":"540","severity":1,"message":"608","line":19,"column":3,"nodeType":"542","messageId":"543","endLine":19,"endColumn":15},{"ruleId":"540","severity":1,"message":"609","line":27,"column":9,"nodeType":"542","messageId":"543","endLine":27,"endColumn":15},{"ruleId":"536","severity":1,"message":"537","line":61,"column":27,"nodeType":"538","messageId":"539","endLine":61,"endColumn":32},{"ruleId":"544","severity":1,"message":"545","line":63,"column":20,"nodeType":"546","messageId":"547","endLine":63,"endColumn":23,"suggestions":"639"},{"ruleId":"540","severity":1,"message":"640","line":88,"column":41,"nodeType":"542","messageId":"543","endLine":88,"endColumn":58},{"ruleId":"544","severity":1,"message":"545","line":95,"column":29,"nodeType":"546","messageId":"547","endLine":95,"endColumn":32,"suggestions":"641"},{"ruleId":"536","severity":1,"message":"537","line":45,"column":24,"nodeType":"538","messageId":"539","endLine":45,"endColumn":29},{"ruleId":"540","severity":1,"message":"642","line":71,"column":38,"nodeType":"542","messageId":"543","endLine":71,"endColumn":52},{"ruleId":"544","severity":1,"message":"545","line":78,"column":29,"nodeType":"546","messageId":"547","endLine":78,"endColumn":32,"suggestions":"643"},{"ruleId":"540","severity":1,"message":"637","line":95,"column":9,"nodeType":"542","messageId":"543","endLine":95,"endColumn":21},{"ruleId":"540","severity":1,"message":"644","line":119,"column":11,"nodeType":"542","messageId":"543","endLine":119,"endColumn":24},{"ruleId":"540","severity":1,"message":"555","line":148,"column":3,"nodeType":"542","messageId":"543","endLine":148,"endColumn":9},{"ruleId":"540","severity":1,"message":"556","line":149,"column":3,"nodeType":"542","messageId":"543","endLine":149,"endColumn":8},{"ruleId":"544","severity":1,"message":"545","line":193,"column":19,"nodeType":"546","messageId":"547","endLine":193,"endColumn":22,"suggestions":"645"},{"ruleId":"540","severity":1,"message":"646","line":202,"column":22,"nodeType":"542","messageId":"543","endLine":202,"endColumn":35},{"ruleId":"540","severity":1,"message":"647","line":240,"column":38,"nodeType":"542","messageId":"543","endLine":240,"endColumn":52},{"ruleId":"544","severity":1,"message":"545","line":268,"column":28,"nodeType":"546","messageId":"547","endLine":268,"endColumn":31,"suggestions":"648"},{"ruleId":"544","severity":1,"message":"545","line":393,"column":35,"nodeType":"546","messageId":"547","endLine":393,"endColumn":38,"suggestions":"649"},{"ruleId":"544","severity":1,"message":"545","line":410,"column":43,"nodeType":"546","messageId":"547","endLine":410,"endColumn":46,"suggestions":"650"},{"ruleId":"540","severity":1,"message":"651","line":9,"column":3,"nodeType":"542","messageId":"543","endLine":9,"endColumn":7},{"ruleId":"544","severity":1,"message":"545","line":82,"column":17,"nodeType":"546","messageId":"547","endLine":82,"endColumn":20,"suggestions":"652"},{"ruleId":"540","severity":1,"message":"653","line":121,"column":36,"nodeType":"542","messageId":"543","endLine":121,"endColumn":48},{"ruleId":"544","severity":1,"message":"545","line":137,"column":28,"nodeType":"546","messageId":"547","endLine":137,"endColumn":31,"suggestions":"654"},{"ruleId":"540","severity":1,"message":"551","line":110,"column":33,"nodeType":"542","messageId":"543","endLine":110,"endColumn":37},{"ruleId":"540","severity":1,"message":"655","line":18,"column":3,"nodeType":"542","messageId":"543","endLine":18,"endColumn":17},{"ruleId":"544","severity":1,"message":"545","line":60,"column":13,"nodeType":"546","messageId":"547","endLine":60,"endColumn":16,"suggestions":"656"},{"ruleId":"544","severity":1,"message":"545","line":61,"column":13,"nodeType":"546","messageId":"547","endLine":61,"endColumn":16,"suggestions":"657"},{"ruleId":"544","severity":1,"message":"545","line":56,"column":13,"nodeType":"546","messageId":"547","endLine":56,"endColumn":16,"suggestions":"658"},{"ruleId":"544","severity":1,"message":"545","line":57,"column":13,"nodeType":"546","messageId":"547","endLine":57,"endColumn":16,"suggestions":"659"},{"ruleId":"540","severity":1,"message":"660","line":45,"column":7,"nodeType":"542","messageId":"543","endLine":45,"endColumn":15},{"ruleId":"540","severity":1,"message":"562","line":74,"column":17,"nodeType":"542","messageId":"543","endLine":74,"endColumn":23},{"ruleId":"544","severity":1,"message":"545","line":79,"column":37,"nodeType":"546","messageId":"547","endLine":79,"endColumn":40,"suggestions":"661"},{"ruleId":"540","severity":1,"message":"551","line":105,"column":38,"nodeType":"542","messageId":"543","endLine":105,"endColumn":42},{"ruleId":"544","severity":1,"message":"545","line":112,"column":35,"nodeType":"546","messageId":"547","endLine":112,"endColumn":38,"suggestions":"662"},{"ruleId":"544","severity":1,"message":"545","line":134,"column":24,"nodeType":"546","messageId":"547","endLine":134,"endColumn":27,"suggestions":"663"},{"ruleId":"544","severity":1,"message":"545","line":157,"column":30,"nodeType":"546","messageId":"547","endLine":157,"endColumn":33,"suggestions":"664"},{"ruleId":"544","severity":1,"message":"545","line":175,"column":23,"nodeType":"546","messageId":"547","endLine":175,"endColumn":26,"suggestions":"665"},{"ruleId":"540","severity":1,"message":"666","line":186,"column":19,"nodeType":"542","messageId":"543","endLine":186,"endColumn":29},{"ruleId":"544","severity":1,"message":"545","line":202,"column":25,"nodeType":"546","messageId":"547","endLine":202,"endColumn":28,"suggestions":"667"},{"ruleId":"544","severity":1,"message":"545","line":204,"column":26,"nodeType":"546","messageId":"547","endLine":204,"endColumn":29,"suggestions":"668"},{"ruleId":"544","severity":1,"message":"545","line":55,"column":13,"nodeType":"546","messageId":"547","endLine":55,"endColumn":16,"suggestions":"669"},{"ruleId":"544","severity":1,"message":"545","line":56,"column":13,"nodeType":"546","messageId":"547","endLine":56,"endColumn":16,"suggestions":"670"},{"ruleId":"544","severity":1,"message":"545","line":200,"column":13,"nodeType":"546","messageId":"547","endLine":200,"endColumn":16,"suggestions":"671"},{"ruleId":"544","severity":1,"message":"545","line":201,"column":13,"nodeType":"546","messageId":"547","endLine":201,"endColumn":16,"suggestions":"672"},{"ruleId":"544","severity":1,"message":"545","line":237,"column":36,"nodeType":"546","messageId":"547","endLine":237,"endColumn":39,"suggestions":"673"},{"ruleId":"544","severity":1,"message":"545","line":250,"column":27,"nodeType":"546","messageId":"547","endLine":250,"endColumn":30,"suggestions":"674"},{"ruleId":"544","severity":1,"message":"545","line":267,"column":67,"nodeType":"546","messageId":"547","endLine":267,"endColumn":70,"suggestions":"675"},{"ruleId":"544","severity":1,"message":"545","line":294,"column":17,"nodeType":"546","messageId":"547","endLine":294,"endColumn":20,"suggestions":"676"},{"ruleId":"544","severity":1,"message":"545","line":296,"column":37,"nodeType":"546","messageId":"547","endLine":296,"endColumn":40,"suggestions":"677"},{"ruleId":"544","severity":1,"message":"545","line":309,"column":58,"nodeType":"546","messageId":"547","endLine":309,"endColumn":61,"suggestions":"678"},{"ruleId":"540","severity":1,"message":"679","line":312,"column":14,"nodeType":"542","messageId":"543","endLine":312,"endColumn":31},{"ruleId":"540","severity":1,"message":"680","line":414,"column":13,"nodeType":"542","messageId":"543","endLine":414,"endColumn":35},{"ruleId":"540","severity":1,"message":"681","line":422,"column":13,"nodeType":"542","messageId":"543","endLine":422,"endColumn":35},{"ruleId":"540","severity":1,"message":"556","line":452,"column":34,"nodeType":"542","messageId":"543","endLine":452,"endColumn":39},{"ruleId":"540","severity":1,"message":"682","line":510,"column":9,"nodeType":"542","messageId":"543","endLine":510,"endColumn":24},{"ruleId":"544","severity":1,"message":"545","line":510,"column":35,"nodeType":"546","messageId":"547","endLine":510,"endColumn":38,"suggestions":"683"},{"ruleId":"544","severity":1,"message":"545","line":526,"column":32,"nodeType":"546","messageId":"547","endLine":526,"endColumn":35,"suggestions":"684"},{"ruleId":"544","severity":1,"message":"545","line":549,"column":37,"nodeType":"546","messageId":"547","endLine":549,"endColumn":40,"suggestions":"685"},{"ruleId":"544","severity":1,"message":"545","line":571,"column":24,"nodeType":"546","messageId":"547","endLine":571,"endColumn":27,"suggestions":"686"},{"ruleId":"544","severity":1,"message":"545","line":609,"column":30,"nodeType":"546","messageId":"547","endLine":609,"endColumn":33,"suggestions":"687"},{"ruleId":"544","severity":1,"message":"545","line":627,"column":23,"nodeType":"546","messageId":"547","endLine":627,"endColumn":26,"suggestions":"688"},{"ruleId":"540","severity":1,"message":"666","line":638,"column":19,"nodeType":"542","messageId":"543","endLine":638,"endColumn":29},{"ruleId":"544","severity":1,"message":"545","line":654,"column":25,"nodeType":"546","messageId":"547","endLine":654,"endColumn":28,"suggestions":"689"},{"ruleId":"544","severity":1,"message":"545","line":656,"column":26,"nodeType":"546","messageId":"547","endLine":656,"endColumn":29,"suggestions":"690"},{"ruleId":"544","severity":1,"message":"545","line":657,"column":28,"nodeType":"546","messageId":"547","endLine":657,"endColumn":31,"suggestions":"691"},{"ruleId":"544","severity":1,"message":"545","line":658,"column":38,"nodeType":"546","messageId":"547","endLine":658,"endColumn":41,"suggestions":"692"},{"ruleId":"540","severity":1,"message":"660","line":45,"column":7,"nodeType":"542","messageId":"543","endLine":45,"endColumn":15},{"ruleId":"540","severity":1,"message":"562","line":74,"column":17,"nodeType":"542","messageId":"543","endLine":74,"endColumn":23},{"ruleId":"544","severity":1,"message":"545","line":79,"column":37,"nodeType":"546","messageId":"547","endLine":79,"endColumn":40,"suggestions":"693"},{"ruleId":"540","severity":1,"message":"551","line":105,"column":33,"nodeType":"542","messageId":"543","endLine":105,"endColumn":37},{"ruleId":"544","severity":1,"message":"545","line":112,"column":35,"nodeType":"546","messageId":"547","endLine":112,"endColumn":38,"suggestions":"694"},{"ruleId":"544","severity":1,"message":"545","line":134,"column":24,"nodeType":"546","messageId":"547","endLine":134,"endColumn":27,"suggestions":"695"},{"ruleId":"544","severity":1,"message":"545","line":157,"column":30,"nodeType":"546","messageId":"547","endLine":157,"endColumn":33,"suggestions":"696"},{"ruleId":"544","severity":1,"message":"545","line":175,"column":23,"nodeType":"546","messageId":"547","endLine":175,"endColumn":26,"suggestions":"697"},{"ruleId":"540","severity":1,"message":"666","line":186,"column":19,"nodeType":"542","messageId":"543","endLine":186,"endColumn":29},{"ruleId":"544","severity":1,"message":"545","line":202,"column":25,"nodeType":"546","messageId":"547","endLine":202,"endColumn":28,"suggestions":"698"},{"ruleId":"544","severity":1,"message":"545","line":204,"column":26,"nodeType":"546","messageId":"547","endLine":204,"endColumn":29,"suggestions":"699"},{"ruleId":"544","severity":1,"message":"545","line":204,"column":13,"nodeType":"546","messageId":"547","endLine":204,"endColumn":16,"suggestions":"700"},{"ruleId":"544","severity":1,"message":"545","line":205,"column":13,"nodeType":"546","messageId":"547","endLine":205,"endColumn":16,"suggestions":"701"},{"ruleId":"544","severity":1,"message":"545","line":241,"column":36,"nodeType":"546","messageId":"547","endLine":241,"endColumn":39,"suggestions":"702"},{"ruleId":"544","severity":1,"message":"545","line":254,"column":27,"nodeType":"546","messageId":"547","endLine":254,"endColumn":30,"suggestions":"703"},{"ruleId":"544","severity":1,"message":"545","line":271,"column":67,"nodeType":"546","messageId":"547","endLine":271,"endColumn":70,"suggestions":"704"},{"ruleId":"544","severity":1,"message":"545","line":298,"column":23,"nodeType":"546","messageId":"547","endLine":298,"endColumn":26,"suggestions":"705"},{"ruleId":"544","severity":1,"message":"545","line":300,"column":37,"nodeType":"546","messageId":"547","endLine":300,"endColumn":40,"suggestions":"706"},{"ruleId":"540","severity":1,"message":"707","line":303,"column":10,"nodeType":"542","messageId":"543","endLine":303,"endColumn":16},{"ruleId":"544","severity":1,"message":"545","line":313,"column":58,"nodeType":"546","messageId":"547","endLine":313,"endColumn":61,"suggestions":"708"},{"ruleId":"540","severity":1,"message":"709","line":316,"column":14,"nodeType":"542","messageId":"543","endLine":316,"endColumn":37},{"ruleId":"540","severity":1,"message":"710","line":421,"column":13,"nodeType":"542","messageId":"543","endLine":421,"endColumn":40},{"ruleId":"540","severity":1,"message":"711","line":429,"column":13,"nodeType":"542","messageId":"543","endLine":429,"endColumn":40},{"ruleId":"540","severity":1,"message":"556","line":462,"column":39,"nodeType":"542","messageId":"543","endLine":462,"endColumn":44},{"ruleId":"540","severity":1,"message":"682","line":520,"column":9,"nodeType":"542","messageId":"543","endLine":520,"endColumn":24},{"ruleId":"544","severity":1,"message":"545","line":520,"column":35,"nodeType":"546","messageId":"547","endLine":520,"endColumn":38,"suggestions":"712"},{"ruleId":"544","severity":1,"message":"545","line":536,"column":32,"nodeType":"546","messageId":"547","endLine":536,"endColumn":35,"suggestions":"713"},{"ruleId":"544","severity":1,"message":"545","line":559,"column":37,"nodeType":"546","messageId":"547","endLine":559,"endColumn":40,"suggestions":"714"},{"ruleId":"544","severity":1,"message":"545","line":581,"column":24,"nodeType":"546","messageId":"547","endLine":581,"endColumn":27,"suggestions":"715"},{"ruleId":"544","severity":1,"message":"545","line":619,"column":30,"nodeType":"546","messageId":"547","endLine":619,"endColumn":33,"suggestions":"716"},{"ruleId":"544","severity":1,"message":"545","line":637,"column":23,"nodeType":"546","messageId":"547","endLine":637,"endColumn":26,"suggestions":"717"},{"ruleId":"540","severity":1,"message":"666","line":648,"column":19,"nodeType":"542","messageId":"543","endLine":648,"endColumn":29},{"ruleId":"544","severity":1,"message":"545","line":664,"column":25,"nodeType":"546","messageId":"547","endLine":664,"endColumn":28,"suggestions":"718"},{"ruleId":"544","severity":1,"message":"545","line":666,"column":26,"nodeType":"546","messageId":"547","endLine":666,"endColumn":29,"suggestions":"719"},{"ruleId":"544","severity":1,"message":"545","line":667,"column":28,"nodeType":"546","messageId":"547","endLine":667,"endColumn":31,"suggestions":"720"},{"ruleId":"544","severity":1,"message":"545","line":668,"column":38,"nodeType":"546","messageId":"547","endLine":668,"endColumn":41,"suggestions":"721"},{"ruleId":"544","severity":1,"message":"545","line":51,"column":13,"nodeType":"546","messageId":"547","endLine":51,"endColumn":16,"suggestions":"722"},{"ruleId":"544","severity":1,"message":"545","line":52,"column":13,"nodeType":"546","messageId":"547","endLine":52,"endColumn":16,"suggestions":"723"},{"ruleId":"540","severity":1,"message":"660","line":45,"column":7,"nodeType":"542","messageId":"543","endLine":45,"endColumn":15},{"ruleId":"540","severity":1,"message":"562","line":74,"column":17,"nodeType":"542","messageId":"543","endLine":74,"endColumn":23},{"ruleId":"544","severity":1,"message":"545","line":79,"column":37,"nodeType":"546","messageId":"547","endLine":79,"endColumn":40,"suggestions":"724"},{"ruleId":"540","severity":1,"message":"551","line":105,"column":36,"nodeType":"542","messageId":"543","endLine":105,"endColumn":40},{"ruleId":"544","severity":1,"message":"545","line":112,"column":35,"nodeType":"546","messageId":"547","endLine":112,"endColumn":38,"suggestions":"725"},{"ruleId":"544","severity":1,"message":"545","line":134,"column":24,"nodeType":"546","messageId":"547","endLine":134,"endColumn":27,"suggestions":"726"},{"ruleId":"544","severity":1,"message":"545","line":157,"column":30,"nodeType":"546","messageId":"547","endLine":157,"endColumn":33,"suggestions":"727"},{"ruleId":"544","severity":1,"message":"545","line":175,"column":23,"nodeType":"546","messageId":"547","endLine":175,"endColumn":26,"suggestions":"728"},{"ruleId":"540","severity":1,"message":"666","line":186,"column":19,"nodeType":"542","messageId":"543","endLine":186,"endColumn":29},{"ruleId":"544","severity":1,"message":"545","line":202,"column":25,"nodeType":"546","messageId":"547","endLine":202,"endColumn":28,"suggestions":"729"},{"ruleId":"544","severity":1,"message":"545","line":204,"column":26,"nodeType":"546","messageId":"547","endLine":204,"endColumn":29,"suggestions":"730"},{"ruleId":"540","severity":1,"message":"731","line":12,"column":3,"nodeType":"542","messageId":"543","endLine":12,"endColumn":10},{"ruleId":"540","severity":1,"message":"732","line":13,"column":3,"nodeType":"542","messageId":"543","endLine":13,"endColumn":10},{"ruleId":"540","severity":1,"message":"733","line":14,"column":3,"nodeType":"542","messageId":"543","endLine":14,"endColumn":7},{"ruleId":"540","severity":1,"message":"734","line":33,"column":8,"nodeType":"542","messageId":"543","endLine":33,"endColumn":14},{"ruleId":"540","severity":1,"message":"735","line":44,"column":9,"nodeType":"542","messageId":"543","endLine":44,"endColumn":17},{"ruleId":"540","severity":1,"message":"736","line":89,"column":7,"nodeType":"542","messageId":"543","endLine":89,"endColumn":20},{"ruleId":"544","severity":1,"message":"545","line":176,"column":21,"nodeType":"546","messageId":"547","endLine":176,"endColumn":24,"suggestions":"737"},{"ruleId":"544","severity":1,"message":"545","line":178,"column":37,"nodeType":"546","messageId":"547","endLine":178,"endColumn":40,"suggestions":"738"},{"ruleId":"544","severity":1,"message":"545","line":187,"column":58,"nodeType":"546","messageId":"547","endLine":187,"endColumn":61,"suggestions":"739"},{"ruleId":"540","severity":1,"message":"740","line":190,"column":14,"nodeType":"542","messageId":"543","endLine":190,"endColumn":35},{"ruleId":"540","severity":1,"message":"682","line":284,"column":9,"nodeType":"542","messageId":"543","endLine":284,"endColumn":24},{"ruleId":"544","severity":1,"message":"545","line":284,"column":35,"nodeType":"546","messageId":"547","endLine":284,"endColumn":38,"suggestions":"741"},{"ruleId":"544","severity":1,"message":"545","line":294,"column":37,"nodeType":"546","messageId":"547","endLine":294,"endColumn":40,"suggestions":"742"},{"ruleId":"544","severity":1,"message":"545","line":316,"column":24,"nodeType":"546","messageId":"547","endLine":316,"endColumn":27,"suggestions":"743"},{"ruleId":"544","severity":1,"message":"545","line":354,"column":30,"nodeType":"546","messageId":"547","endLine":354,"endColumn":33,"suggestions":"744"},{"ruleId":"544","severity":1,"message":"545","line":372,"column":23,"nodeType":"546","messageId":"547","endLine":372,"endColumn":26,"suggestions":"745"},{"ruleId":"540","severity":1,"message":"666","line":383,"column":19,"nodeType":"542","messageId":"543","endLine":383,"endColumn":29},{"ruleId":"544","severity":1,"message":"545","line":399,"column":25,"nodeType":"546","messageId":"547","endLine":399,"endColumn":28,"suggestions":"746"},{"ruleId":"544","severity":1,"message":"545","line":401,"column":26,"nodeType":"546","messageId":"547","endLine":401,"endColumn":29,"suggestions":"747"},{"ruleId":"544","severity":1,"message":"545","line":402,"column":28,"nodeType":"546","messageId":"547","endLine":402,"endColumn":31,"suggestions":"748"},{"ruleId":"544","severity":1,"message":"545","line":403,"column":38,"nodeType":"546","messageId":"547","endLine":403,"endColumn":41,"suggestions":"749"},{"ruleId":"540","severity":1,"message":"660","line":45,"column":7,"nodeType":"542","messageId":"543","endLine":45,"endColumn":15},{"ruleId":"540","severity":1,"message":"562","line":74,"column":17,"nodeType":"542","messageId":"543","endLine":74,"endColumn":23},{"ruleId":"544","severity":1,"message":"545","line":79,"column":37,"nodeType":"546","messageId":"547","endLine":79,"endColumn":40,"suggestions":"750"},{"ruleId":"540","severity":1,"message":"551","line":105,"column":36,"nodeType":"542","messageId":"543","endLine":105,"endColumn":40},{"ruleId":"544","severity":1,"message":"545","line":112,"column":35,"nodeType":"546","messageId":"547","endLine":112,"endColumn":38,"suggestions":"751"},{"ruleId":"544","severity":1,"message":"545","line":134,"column":24,"nodeType":"546","messageId":"547","endLine":134,"endColumn":27,"suggestions":"752"},{"ruleId":"544","severity":1,"message":"545","line":157,"column":30,"nodeType":"546","messageId":"547","endLine":157,"endColumn":33,"suggestions":"753"},{"ruleId":"544","severity":1,"message":"545","line":175,"column":23,"nodeType":"546","messageId":"547","endLine":175,"endColumn":26,"suggestions":"754"},{"ruleId":"540","severity":1,"message":"666","line":186,"column":19,"nodeType":"542","messageId":"543","endLine":186,"endColumn":29},{"ruleId":"544","severity":1,"message":"545","line":202,"column":25,"nodeType":"546","messageId":"547","endLine":202,"endColumn":28,"suggestions":"755"},{"ruleId":"544","severity":1,"message":"545","line":204,"column":26,"nodeType":"546","messageId":"547","endLine":204,"endColumn":29,"suggestions":"756"},{"ruleId":"540","severity":1,"message":"731","line":12,"column":3,"nodeType":"542","messageId":"543","endLine":12,"endColumn":10},{"ruleId":"540","severity":1,"message":"732","line":13,"column":3,"nodeType":"542","messageId":"543","endLine":13,"endColumn":10},{"ruleId":"540","severity":1,"message":"733","line":14,"column":3,"nodeType":"542","messageId":"543","endLine":14,"endColumn":7},{"ruleId":"540","severity":1,"message":"734","line":29,"column":8,"nodeType":"542","messageId":"543","endLine":29,"endColumn":14},{"ruleId":"540","severity":1,"message":"735","line":40,"column":9,"nodeType":"542","messageId":"543","endLine":40,"endColumn":17},{"ruleId":"540","severity":1,"message":"736","line":85,"column":7,"nodeType":"542","messageId":"543","endLine":85,"endColumn":20},{"ruleId":"544","severity":1,"message":"545","line":172,"column":21,"nodeType":"546","messageId":"547","endLine":172,"endColumn":24,"suggestions":"757"},{"ruleId":"544","severity":1,"message":"545","line":174,"column":37,"nodeType":"546","messageId":"547","endLine":174,"endColumn":40,"suggestions":"758"},{"ruleId":"544","severity":1,"message":"545","line":183,"column":58,"nodeType":"546","messageId":"547","endLine":183,"endColumn":61,"suggestions":"759"},{"ruleId":"540","severity":1,"message":"760","line":186,"column":14,"nodeType":"542","messageId":"543","endLine":186,"endColumn":35},{"ruleId":"540","severity":1,"message":"682","line":280,"column":9,"nodeType":"542","messageId":"543","endLine":280,"endColumn":24},{"ruleId":"544","severity":1,"message":"545","line":280,"column":35,"nodeType":"546","messageId":"547","endLine":280,"endColumn":38,"suggestions":"761"},{"ruleId":"544","severity":1,"message":"545","line":290,"column":37,"nodeType":"546","messageId":"547","endLine":290,"endColumn":40,"suggestions":"762"},{"ruleId":"544","severity":1,"message":"545","line":312,"column":24,"nodeType":"546","messageId":"547","endLine":312,"endColumn":27,"suggestions":"763"},{"ruleId":"544","severity":1,"message":"545","line":350,"column":30,"nodeType":"546","messageId":"547","endLine":350,"endColumn":33,"suggestions":"764"},{"ruleId":"544","severity":1,"message":"545","line":368,"column":23,"nodeType":"546","messageId":"547","endLine":368,"endColumn":26,"suggestions":"765"},{"ruleId":"540","severity":1,"message":"666","line":379,"column":19,"nodeType":"542","messageId":"543","endLine":379,"endColumn":29},{"ruleId":"544","severity":1,"message":"545","line":395,"column":25,"nodeType":"546","messageId":"547","endLine":395,"endColumn":28,"suggestions":"766"},{"ruleId":"544","severity":1,"message":"545","line":397,"column":26,"nodeType":"546","messageId":"547","endLine":397,"endColumn":29,"suggestions":"767"},{"ruleId":"544","severity":1,"message":"545","line":398,"column":28,"nodeType":"546","messageId":"547","endLine":398,"endColumn":31,"suggestions":"768"},{"ruleId":"544","severity":1,"message":"545","line":399,"column":38,"nodeType":"546","messageId":"547","endLine":399,"endColumn":41,"suggestions":"769"},{"ruleId":"536","severity":1,"message":"537","line":35,"column":32,"nodeType":"538","messageId":"539","endLine":35,"endColumn":65},{"ruleId":"536","severity":1,"message":"537","line":35,"column":32,"nodeType":"538","messageId":"539","endLine":35,"endColumn":65},{"ruleId":"536","severity":1,"message":"537","line":36,"column":28,"nodeType":"538","messageId":"539","endLine":36,"endColumn":61},{"ruleId":"536","severity":1,"message":"537","line":36,"column":34,"nodeType":"538","messageId":"539","endLine":36,"endColumn":67},{"ruleId":"536","severity":1,"message":"537","line":24,"column":28,"nodeType":"538","messageId":"539","endLine":24,"endColumn":61},{"ruleId":"536","severity":1,"message":"537","line":32,"column":30,"nodeType":"538","messageId":"539","endLine":32,"endColumn":63},{"ruleId":"536","severity":1,"message":"537","line":32,"column":31,"nodeType":"538","messageId":"539","endLine":32,"endColumn":64},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["770","771"],"'createAccountMutationResult' is assigned a value but never used.",["772","773"],"'data' is assigned a value but never used.",["774","775"],"'history' is assigned a value but never used.",["776","777"],"'record' is defined but never used.","'index' is defined but never used.","'deleteOrderData' is assigned a value but never used.","'editOrderData' is assigned a value but never used.",["778","779"],["780","781"],"'selectedRows' is defined but never used.","'meData' is assigned a value but never used.",["782","783"],"'editItemInfoData' is assigned a value but never used.","'dataIndex' is defined but never used.","'title' is defined but never used.","'inputType' is defined but never used.","'getTotalPages' is assigned a value but never used.",["784","785"],["786","787"],["788","789"],"'SetStateAction' is defined but never used.","'useMutation' is defined but never used.",["790","791"],["792","793"],["794","795"],["796","797"],["798","799"],["800","801"],["802","803"],"'deletePartnerData' is assigned a value but never used.","'editPartnerData' is assigned a value but never used.",["804","805"],["806","807"],["808","809"],["810","811"],["812","813"],["814","815"],["816","817"],["818","819"],["820","821"],["822","823"],["824","825"],["826","827"],["828","829"],["830","831"],["832","833"],["834","835"],["836","837"],["838","839"],["840","841"],["842","843"],["844","845"],["846","847"],["848","849"],"'Space' is defined but never used.","'MinusCircleOutlined' is defined but never used.","'PlusOutlined' is defined but never used.","'Option' is assigned a value but never used.","'createPartnerData' is assigned a value but never used.",["850","851"],"'ColumnsType' is defined but never used.","'Badge' is defined but never used.","'Loading' is defined but never used.","'UserRole' is defined but never used.","'IPartnerOutput' is defined but never used.",["852","853"],["854","855"],"'deleteContactData' is assigned a value but never used.","'editContactData' is assigned a value but never used.",["856","857"],["858","859"],"'IAllBundlesOutput' is defined but never used.","'IAllPartsOutput' is defined but never used.","'client' is assigned a value but never used.","'deleteBundleData' is assigned a value but never used.","'deletePartData' is assigned a value but never used.","'handleCancel' is assigned a value but never used.",["860","861"],"'save' is assigned a value but never used.",["862","863"],["864","865"],"'reGetParts' is assigned a value but never used.","'createBundleData' is assigned a value but never used.",["866","867"],["868","869"],"'handleChange' is assigned a value but never used.","'useEffect' is defined but never used.",["870","871"],"'createContactData' is assigned a value but never used.",["872","873"],"'createPartData' is assigned a value but never used.",["874","875"],"'IBundleOutput' is defined but never used.",["876","877"],"'setEditingKey' is assigned a value but never used.","'editBundleData' is assigned a value but never used.",["878","879"],["880","881"],["882","883"],"'Form' is defined but never used.",["884","885"],"'editPartData' is assigned a value but never used.",["886","887"],"'KindWorkaround' is defined but never used.",["888","889"],["890","891"],["892","893"],["894","895"],"'ItemList' is assigned a value but never used.",["896","897"],["898","899"],["900","901"],["902","903"],["904","905"],"'err' is defined but never used.",["906","907"],["908","909"],["910","911"],["912","913"],["914","915"],["916","917"],["918","919"],["920","921"],["922","923"],["924","925"],["926","927"],["928","929"],"'caseDetailLoading' is assigned a value but never used.","'deleteIssueCommentData' is assigned a value but never used.","'createIssueCommentData' is assigned a value but never used.","'handleEditClick' is assigned a value but never used.",["930","931"],["932","933"],["934","935"],["936","937"],["938","939"],["940","941"],["942","943"],["944","945"],["946","947"],["948","949"],["950","951"],["952","953"],["954","955"],["956","957"],["958","959"],["960","961"],["962","963"],["964","965"],["966","967"],["968","969"],["970","971"],["972","973"],["974","975"],["976","977"],"'writer' is assigned a value but never used.",["978","979"],"'workaroundDetailLoading' is assigned a value but never used.","'deleteWorkaroundCommentData' is assigned a value but never used.","'createWorkaroundCommentData' is assigned a value but never used.",["980","981"],["982","983"],["984","985"],["986","987"],["988","989"],["990","991"],["992","993"],["994","995"],["996","997"],["998","999"],["1000","1001"],["1002","1003"],["1004","1005"],["1006","1007"],["1008","1009"],["1010","1011"],["1012","1013"],["1014","1015"],["1016","1017"],"'Comment' is defined but never used.","'Tooltip' is defined but never used.","'List' is defined but never used.","'moment' is defined but never used.","'TextArea' is assigned a value but never used.","'CommentColumn' is assigned a value but never used.",["1018","1019"],["1020","1021"],["1022","1023"],"'firmwareDetailLoading' is assigned a value but never used.",["1024","1025"],["1026","1027"],["1028","1029"],["1030","1031"],["1032","1033"],["1034","1035"],["1036","1037"],["1038","1039"],["1040","1041"],["1042","1043"],["1044","1045"],["1046","1047"],["1048","1049"],["1050","1051"],["1052","1053"],["1054","1055"],["1056","1057"],["1058","1059"],["1060","1061"],"'documentDetailLoading' is assigned a value but never used.",["1062","1063"],["1064","1065"],["1066","1067"],["1068","1069"],["1070","1071"],["1072","1073"],["1074","1075"],["1076","1077"],["1078","1079"],{"messageId":"1080","fix":"1081","desc":"1082"},{"messageId":"1083","fix":"1084","desc":"1085"},{"messageId":"1080","fix":"1086","desc":"1082"},{"messageId":"1083","fix":"1087","desc":"1085"},{"messageId":"1080","fix":"1088","desc":"1082"},{"messageId":"1083","fix":"1089","desc":"1085"},{"messageId":"1080","fix":"1090","desc":"1082"},{"messageId":"1083","fix":"1091","desc":"1085"},{"messageId":"1080","fix":"1092","desc":"1082"},{"messageId":"1083","fix":"1093","desc":"1085"},{"messageId":"1080","fix":"1094","desc":"1082"},{"messageId":"1083","fix":"1095","desc":"1085"},{"messageId":"1080","fix":"1096","desc":"1082"},{"messageId":"1083","fix":"1097","desc":"1085"},{"messageId":"1080","fix":"1098","desc":"1082"},{"messageId":"1083","fix":"1099","desc":"1085"},{"messageId":"1080","fix":"1100","desc":"1082"},{"messageId":"1083","fix":"1101","desc":"1085"},{"messageId":"1080","fix":"1102","desc":"1082"},{"messageId":"1083","fix":"1103","desc":"1085"},{"messageId":"1080","fix":"1104","desc":"1082"},{"messageId":"1083","fix":"1105","desc":"1085"},{"messageId":"1080","fix":"1106","desc":"1082"},{"messageId":"1083","fix":"1107","desc":"1085"},{"messageId":"1080","fix":"1108","desc":"1082"},{"messageId":"1083","fix":"1109","desc":"1085"},{"messageId":"1080","fix":"1110","desc":"1082"},{"messageId":"1083","fix":"1111","desc":"1085"},{"messageId":"1080","fix":"1112","desc":"1082"},{"messageId":"1083","fix":"1113","desc":"1085"},{"messageId":"1080","fix":"1114","desc":"1082"},{"messageId":"1083","fix":"1115","desc":"1085"},{"messageId":"1080","fix":"1116","desc":"1082"},{"messageId":"1083","fix":"1117","desc":"1085"},{"messageId":"1080","fix":"1118","desc":"1082"},{"messageId":"1083","fix":"1119","desc":"1085"},{"messageId":"1080","fix":"1120","desc":"1082"},{"messageId":"1083","fix":"1121","desc":"1085"},{"messageId":"1080","fix":"1122","desc":"1082"},{"messageId":"1083","fix":"1123","desc":"1085"},{"messageId":"1080","fix":"1124","desc":"1082"},{"messageId":"1083","fix":"1125","desc":"1085"},{"messageId":"1080","fix":"1126","desc":"1082"},{"messageId":"1083","fix":"1127","desc":"1085"},{"messageId":"1080","fix":"1128","desc":"1082"},{"messageId":"1083","fix":"1129","desc":"1085"},{"messageId":"1080","fix":"1130","desc":"1082"},{"messageId":"1083","fix":"1131","desc":"1085"},{"messageId":"1080","fix":"1132","desc":"1082"},{"messageId":"1083","fix":"1133","desc":"1085"},{"messageId":"1080","fix":"1134","desc":"1082"},{"messageId":"1083","fix":"1135","desc":"1085"},{"messageId":"1080","fix":"1136","desc":"1082"},{"messageId":"1083","fix":"1137","desc":"1085"},{"messageId":"1080","fix":"1138","desc":"1082"},{"messageId":"1083","fix":"1139","desc":"1085"},{"messageId":"1080","fix":"1140","desc":"1082"},{"messageId":"1083","fix":"1141","desc":"1085"},{"messageId":"1080","fix":"1142","desc":"1082"},{"messageId":"1083","fix":"1143","desc":"1085"},{"messageId":"1080","fix":"1144","desc":"1082"},{"messageId":"1083","fix":"1145","desc":"1085"},{"messageId":"1080","fix":"1146","desc":"1082"},{"messageId":"1083","fix":"1147","desc":"1085"},{"messageId":"1080","fix":"1148","desc":"1082"},{"messageId":"1083","fix":"1149","desc":"1085"},{"messageId":"1080","fix":"1150","desc":"1082"},{"messageId":"1083","fix":"1151","desc":"1085"},{"messageId":"1080","fix":"1152","desc":"1082"},{"messageId":"1083","fix":"1153","desc":"1085"},{"messageId":"1080","fix":"1154","desc":"1082"},{"messageId":"1083","fix":"1155","desc":"1085"},{"messageId":"1080","fix":"1156","desc":"1082"},{"messageId":"1083","fix":"1157","desc":"1085"},{"messageId":"1080","fix":"1158","desc":"1082"},{"messageId":"1083","fix":"1159","desc":"1085"},{"messageId":"1080","fix":"1160","desc":"1082"},{"messageId":"1083","fix":"1161","desc":"1085"},{"messageId":"1080","fix":"1162","desc":"1082"},{"messageId":"1083","fix":"1163","desc":"1085"},{"messageId":"1080","fix":"1164","desc":"1082"},{"messageId":"1083","fix":"1165","desc":"1085"},{"messageId":"1080","fix":"1166","desc":"1082"},{"messageId":"1083","fix":"1167","desc":"1085"},{"messageId":"1080","fix":"1168","desc":"1082"},{"messageId":"1083","fix":"1169","desc":"1085"},{"messageId":"1080","fix":"1170","desc":"1082"},{"messageId":"1083","fix":"1171","desc":"1085"},{"messageId":"1080","fix":"1172","desc":"1082"},{"messageId":"1083","fix":"1173","desc":"1085"},{"messageId":"1080","fix":"1174","desc":"1082"},{"messageId":"1083","fix":"1175","desc":"1085"},{"messageId":"1080","fix":"1176","desc":"1082"},{"messageId":"1083","fix":"1177","desc":"1085"},{"messageId":"1080","fix":"1178","desc":"1082"},{"messageId":"1083","fix":"1179","desc":"1085"},{"messageId":"1080","fix":"1180","desc":"1082"},{"messageId":"1083","fix":"1181","desc":"1085"},{"messageId":"1080","fix":"1182","desc":"1082"},{"messageId":"1083","fix":"1183","desc":"1085"},{"messageId":"1080","fix":"1184","desc":"1082"},{"messageId":"1083","fix":"1185","desc":"1085"},{"messageId":"1080","fix":"1186","desc":"1082"},{"messageId":"1083","fix":"1187","desc":"1085"},{"messageId":"1080","fix":"1188","desc":"1082"},{"messageId":"1083","fix":"1189","desc":"1085"},{"messageId":"1080","fix":"1190","desc":"1082"},{"messageId":"1083","fix":"1191","desc":"1085"},{"messageId":"1080","fix":"1192","desc":"1082"},{"messageId":"1083","fix":"1193","desc":"1085"},{"messageId":"1080","fix":"1194","desc":"1082"},{"messageId":"1083","fix":"1195","desc":"1085"},{"messageId":"1080","fix":"1196","desc":"1082"},{"messageId":"1083","fix":"1197","desc":"1085"},{"messageId":"1080","fix":"1198","desc":"1082"},{"messageId":"1083","fix":"1199","desc":"1085"},{"messageId":"1080","fix":"1200","desc":"1082"},{"messageId":"1083","fix":"1201","desc":"1085"},{"messageId":"1080","fix":"1202","desc":"1082"},{"messageId":"1083","fix":"1203","desc":"1085"},{"messageId":"1080","fix":"1204","desc":"1082"},{"messageId":"1083","fix":"1205","desc":"1085"},{"messageId":"1080","fix":"1206","desc":"1082"},{"messageId":"1083","fix":"1207","desc":"1085"},{"messageId":"1080","fix":"1208","desc":"1082"},{"messageId":"1083","fix":"1209","desc":"1085"},{"messageId":"1080","fix":"1210","desc":"1082"},{"messageId":"1083","fix":"1211","desc":"1085"},{"messageId":"1080","fix":"1212","desc":"1082"},{"messageId":"1083","fix":"1213","desc":"1085"},{"messageId":"1080","fix":"1214","desc":"1082"},{"messageId":"1083","fix":"1215","desc":"1085"},{"messageId":"1080","fix":"1216","desc":"1082"},{"messageId":"1083","fix":"1217","desc":"1085"},{"messageId":"1080","fix":"1218","desc":"1082"},{"messageId":"1083","fix":"1219","desc":"1085"},{"messageId":"1080","fix":"1220","desc":"1082"},{"messageId":"1083","fix":"1221","desc":"1085"},{"messageId":"1080","fix":"1222","desc":"1082"},{"messageId":"1083","fix":"1223","desc":"1085"},{"messageId":"1080","fix":"1224","desc":"1082"},{"messageId":"1083","fix":"1225","desc":"1085"},{"messageId":"1080","fix":"1226","desc":"1082"},{"messageId":"1083","fix":"1227","desc":"1085"},{"messageId":"1080","fix":"1228","desc":"1082"},{"messageId":"1083","fix":"1229","desc":"1085"},{"messageId":"1080","fix":"1230","desc":"1082"},{"messageId":"1083","fix":"1231","desc":"1085"},{"messageId":"1080","fix":"1232","desc":"1082"},{"messageId":"1083","fix":"1233","desc":"1085"},{"messageId":"1080","fix":"1234","desc":"1082"},{"messageId":"1083","fix":"1235","desc":"1085"},{"messageId":"1080","fix":"1236","desc":"1082"},{"messageId":"1083","fix":"1237","desc":"1085"},{"messageId":"1080","fix":"1238","desc":"1082"},{"messageId":"1083","fix":"1239","desc":"1085"},{"messageId":"1080","fix":"1240","desc":"1082"},{"messageId":"1083","fix":"1241","desc":"1085"},{"messageId":"1080","fix":"1242","desc":"1082"},{"messageId":"1083","fix":"1243","desc":"1085"},{"messageId":"1080","fix":"1244","desc":"1082"},{"messageId":"1083","fix":"1245","desc":"1085"},{"messageId":"1080","fix":"1246","desc":"1082"},{"messageId":"1083","fix":"1247","desc":"1085"},{"messageId":"1080","fix":"1248","desc":"1082"},{"messageId":"1083","fix":"1249","desc":"1085"},{"messageId":"1080","fix":"1250","desc":"1082"},{"messageId":"1083","fix":"1251","desc":"1085"},{"messageId":"1080","fix":"1252","desc":"1082"},{"messageId":"1083","fix":"1253","desc":"1085"},{"messageId":"1080","fix":"1254","desc":"1082"},{"messageId":"1083","fix":"1255","desc":"1085"},{"messageId":"1080","fix":"1256","desc":"1082"},{"messageId":"1083","fix":"1257","desc":"1085"},{"messageId":"1080","fix":"1258","desc":"1082"},{"messageId":"1083","fix":"1259","desc":"1085"},{"messageId":"1080","fix":"1260","desc":"1082"},{"messageId":"1083","fix":"1261","desc":"1085"},{"messageId":"1080","fix":"1262","desc":"1082"},{"messageId":"1083","fix":"1263","desc":"1085"},{"messageId":"1080","fix":"1264","desc":"1082"},{"messageId":"1083","fix":"1265","desc":"1085"},{"messageId":"1080","fix":"1266","desc":"1082"},{"messageId":"1083","fix":"1267","desc":"1085"},{"messageId":"1080","fix":"1268","desc":"1082"},{"messageId":"1083","fix":"1269","desc":"1085"},{"messageId":"1080","fix":"1270","desc":"1082"},{"messageId":"1083","fix":"1271","desc":"1085"},{"messageId":"1080","fix":"1272","desc":"1082"},{"messageId":"1083","fix":"1273","desc":"1085"},{"messageId":"1080","fix":"1274","desc":"1082"},{"messageId":"1083","fix":"1275","desc":"1085"},{"messageId":"1080","fix":"1276","desc":"1082"},{"messageId":"1083","fix":"1277","desc":"1085"},{"messageId":"1080","fix":"1278","desc":"1082"},{"messageId":"1083","fix":"1279","desc":"1085"},{"messageId":"1080","fix":"1280","desc":"1082"},{"messageId":"1083","fix":"1281","desc":"1085"},{"messageId":"1080","fix":"1282","desc":"1082"},{"messageId":"1083","fix":"1283","desc":"1085"},{"messageId":"1080","fix":"1284","desc":"1082"},{"messageId":"1083","fix":"1285","desc":"1085"},{"messageId":"1080","fix":"1286","desc":"1082"},{"messageId":"1083","fix":"1287","desc":"1085"},{"messageId":"1080","fix":"1288","desc":"1082"},{"messageId":"1083","fix":"1289","desc":"1085"},{"messageId":"1080","fix":"1290","desc":"1082"},{"messageId":"1083","fix":"1291","desc":"1085"},{"messageId":"1080","fix":"1292","desc":"1082"},{"messageId":"1083","fix":"1293","desc":"1085"},{"messageId":"1080","fix":"1294","desc":"1082"},{"messageId":"1083","fix":"1295","desc":"1085"},{"messageId":"1080","fix":"1296","desc":"1082"},{"messageId":"1083","fix":"1297","desc":"1085"},{"messageId":"1080","fix":"1298","desc":"1082"},{"messageId":"1083","fix":"1299","desc":"1085"},{"messageId":"1080","fix":"1300","desc":"1082"},{"messageId":"1083","fix":"1301","desc":"1085"},{"messageId":"1080","fix":"1302","desc":"1082"},{"messageId":"1083","fix":"1303","desc":"1085"},{"messageId":"1080","fix":"1304","desc":"1082"},{"messageId":"1083","fix":"1305","desc":"1085"},{"messageId":"1080","fix":"1306","desc":"1082"},{"messageId":"1083","fix":"1307","desc":"1085"},{"messageId":"1080","fix":"1308","desc":"1082"},{"messageId":"1083","fix":"1309","desc":"1085"},{"messageId":"1080","fix":"1310","desc":"1082"},{"messageId":"1083","fix":"1311","desc":"1085"},{"messageId":"1080","fix":"1312","desc":"1082"},{"messageId":"1083","fix":"1313","desc":"1085"},{"messageId":"1080","fix":"1314","desc":"1082"},{"messageId":"1083","fix":"1315","desc":"1085"},{"messageId":"1080","fix":"1316","desc":"1082"},{"messageId":"1083","fix":"1317","desc":"1085"},{"messageId":"1080","fix":"1318","desc":"1082"},{"messageId":"1083","fix":"1319","desc":"1085"},{"messageId":"1080","fix":"1320","desc":"1082"},{"messageId":"1083","fix":"1321","desc":"1085"},{"messageId":"1080","fix":"1322","desc":"1082"},{"messageId":"1083","fix":"1323","desc":"1085"},{"messageId":"1080","fix":"1324","desc":"1082"},{"messageId":"1083","fix":"1325","desc":"1085"},{"messageId":"1080","fix":"1326","desc":"1082"},{"messageId":"1083","fix":"1327","desc":"1085"},{"messageId":"1080","fix":"1328","desc":"1082"},{"messageId":"1083","fix":"1329","desc":"1085"},{"messageId":"1080","fix":"1330","desc":"1082"},{"messageId":"1083","fix":"1331","desc":"1085"},{"messageId":"1080","fix":"1332","desc":"1082"},{"messageId":"1083","fix":"1333","desc":"1085"},{"messageId":"1080","fix":"1334","desc":"1082"},{"messageId":"1083","fix":"1335","desc":"1085"},{"messageId":"1080","fix":"1336","desc":"1082"},{"messageId":"1083","fix":"1337","desc":"1085"},{"messageId":"1080","fix":"1338","desc":"1082"},{"messageId":"1083","fix":"1339","desc":"1085"},{"messageId":"1080","fix":"1340","desc":"1082"},{"messageId":"1083","fix":"1341","desc":"1085"},{"messageId":"1080","fix":"1342","desc":"1082"},{"messageId":"1083","fix":"1343","desc":"1085"},{"messageId":"1080","fix":"1344","desc":"1082"},{"messageId":"1083","fix":"1345","desc":"1085"},{"messageId":"1080","fix":"1346","desc":"1082"},{"messageId":"1083","fix":"1347","desc":"1085"},{"messageId":"1080","fix":"1348","desc":"1082"},{"messageId":"1083","fix":"1349","desc":"1085"},{"messageId":"1080","fix":"1350","desc":"1082"},{"messageId":"1083","fix":"1351","desc":"1085"},{"messageId":"1080","fix":"1352","desc":"1082"},{"messageId":"1083","fix":"1353","desc":"1085"},{"messageId":"1080","fix":"1354","desc":"1082"},{"messageId":"1083","fix":"1355","desc":"1085"},{"messageId":"1080","fix":"1356","desc":"1082"},{"messageId":"1083","fix":"1357","desc":"1085"},{"messageId":"1080","fix":"1358","desc":"1082"},{"messageId":"1083","fix":"1359","desc":"1085"},{"messageId":"1080","fix":"1360","desc":"1082"},{"messageId":"1083","fix":"1361","desc":"1085"},{"messageId":"1080","fix":"1362","desc":"1082"},{"messageId":"1083","fix":"1363","desc":"1085"},{"messageId":"1080","fix":"1364","desc":"1082"},{"messageId":"1083","fix":"1365","desc":"1085"},{"messageId":"1080","fix":"1366","desc":"1082"},{"messageId":"1083","fix":"1367","desc":"1085"},{"messageId":"1080","fix":"1368","desc":"1082"},{"messageId":"1083","fix":"1369","desc":"1085"},{"messageId":"1080","fix":"1370","desc":"1082"},{"messageId":"1083","fix":"1371","desc":"1085"},{"messageId":"1080","fix":"1372","desc":"1082"},{"messageId":"1083","fix":"1373","desc":"1085"},{"messageId":"1080","fix":"1374","desc":"1082"},{"messageId":"1083","fix":"1375","desc":"1085"},{"messageId":"1080","fix":"1376","desc":"1082"},{"messageId":"1083","fix":"1377","desc":"1085"},{"messageId":"1080","fix":"1378","desc":"1082"},{"messageId":"1083","fix":"1379","desc":"1085"},{"messageId":"1080","fix":"1380","desc":"1082"},{"messageId":"1083","fix":"1381","desc":"1085"},{"messageId":"1080","fix":"1382","desc":"1082"},{"messageId":"1083","fix":"1383","desc":"1085"},{"messageId":"1080","fix":"1384","desc":"1082"},{"messageId":"1083","fix":"1385","desc":"1085"},{"messageId":"1080","fix":"1386","desc":"1082"},{"messageId":"1083","fix":"1387","desc":"1085"},{"messageId":"1080","fix":"1388","desc":"1082"},{"messageId":"1083","fix":"1389","desc":"1085"},{"messageId":"1080","fix":"1390","desc":"1082"},{"messageId":"1083","fix":"1391","desc":"1085"},{"messageId":"1080","fix":"1392","desc":"1082"},{"messageId":"1083","fix":"1393","desc":"1085"},"suggestUnknown",{"range":"1394","text":"1395"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"1394","text":"1396"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"1397","text":"1395"},{"range":"1397","text":"1396"},{"range":"1398","text":"1395"},{"range":"1398","text":"1396"},{"range":"1399","text":"1395"},{"range":"1399","text":"1396"},{"range":"1400","text":"1395"},{"range":"1400","text":"1396"},{"range":"1401","text":"1395"},{"range":"1401","text":"1396"},{"range":"1402","text":"1395"},{"range":"1402","text":"1396"},{"range":"1403","text":"1395"},{"range":"1403","text":"1396"},{"range":"1404","text":"1395"},{"range":"1404","text":"1396"},{"range":"1405","text":"1395"},{"range":"1405","text":"1396"},{"range":"1406","text":"1395"},{"range":"1406","text":"1396"},{"range":"1407","text":"1395"},{"range":"1407","text":"1396"},{"range":"1408","text":"1395"},{"range":"1408","text":"1396"},{"range":"1409","text":"1395"},{"range":"1409","text":"1396"},{"range":"1410","text":"1395"},{"range":"1410","text":"1396"},{"range":"1411","text":"1395"},{"range":"1411","text":"1396"},{"range":"1412","text":"1395"},{"range":"1412","text":"1396"},{"range":"1413","text":"1395"},{"range":"1413","text":"1396"},{"range":"1414","text":"1395"},{"range":"1414","text":"1396"},{"range":"1415","text":"1395"},{"range":"1415","text":"1396"},{"range":"1416","text":"1395"},{"range":"1416","text":"1396"},{"range":"1417","text":"1395"},{"range":"1417","text":"1396"},{"range":"1418","text":"1395"},{"range":"1418","text":"1396"},{"range":"1419","text":"1395"},{"range":"1419","text":"1396"},{"range":"1420","text":"1395"},{"range":"1420","text":"1396"},{"range":"1421","text":"1395"},{"range":"1421","text":"1396"},{"range":"1422","text":"1395"},{"range":"1422","text":"1396"},{"range":"1423","text":"1395"},{"range":"1423","text":"1396"},{"range":"1424","text":"1395"},{"range":"1424","text":"1396"},{"range":"1425","text":"1395"},{"range":"1425","text":"1396"},{"range":"1426","text":"1395"},{"range":"1426","text":"1396"},{"range":"1427","text":"1395"},{"range":"1427","text":"1396"},{"range":"1428","text":"1395"},{"range":"1428","text":"1396"},{"range":"1429","text":"1395"},{"range":"1429","text":"1396"},{"range":"1430","text":"1395"},{"range":"1430","text":"1396"},{"range":"1431","text":"1395"},{"range":"1431","text":"1396"},{"range":"1432","text":"1395"},{"range":"1432","text":"1396"},{"range":"1433","text":"1395"},{"range":"1433","text":"1396"},{"range":"1434","text":"1395"},{"range":"1434","text":"1396"},{"range":"1435","text":"1395"},{"range":"1435","text":"1396"},{"range":"1436","text":"1395"},{"range":"1436","text":"1396"},{"range":"1437","text":"1395"},{"range":"1437","text":"1396"},{"range":"1438","text":"1395"},{"range":"1438","text":"1396"},{"range":"1439","text":"1395"},{"range":"1439","text":"1396"},{"range":"1440","text":"1395"},{"range":"1440","text":"1396"},{"range":"1441","text":"1395"},{"range":"1441","text":"1396"},{"range":"1442","text":"1395"},{"range":"1442","text":"1396"},{"range":"1443","text":"1395"},{"range":"1443","text":"1396"},{"range":"1444","text":"1395"},{"range":"1444","text":"1396"},{"range":"1445","text":"1395"},{"range":"1445","text":"1396"},{"range":"1446","text":"1395"},{"range":"1446","text":"1396"},{"range":"1447","text":"1395"},{"range":"1447","text":"1396"},{"range":"1448","text":"1395"},{"range":"1448","text":"1396"},{"range":"1449","text":"1395"},{"range":"1449","text":"1396"},{"range":"1450","text":"1395"},{"range":"1450","text":"1396"},{"range":"1451","text":"1395"},{"range":"1451","text":"1396"},{"range":"1452","text":"1395"},{"range":"1452","text":"1396"},{"range":"1453","text":"1395"},{"range":"1453","text":"1396"},{"range":"1454","text":"1395"},{"range":"1454","text":"1396"},{"range":"1455","text":"1395"},{"range":"1455","text":"1396"},{"range":"1456","text":"1395"},{"range":"1456","text":"1396"},{"range":"1457","text":"1395"},{"range":"1457","text":"1396"},{"range":"1458","text":"1395"},{"range":"1458","text":"1396"},{"range":"1459","text":"1395"},{"range":"1459","text":"1396"},{"range":"1460","text":"1395"},{"range":"1460","text":"1396"},{"range":"1461","text":"1395"},{"range":"1461","text":"1396"},{"range":"1462","text":"1395"},{"range":"1462","text":"1396"},{"range":"1463","text":"1395"},{"range":"1463","text":"1396"},{"range":"1464","text":"1395"},{"range":"1464","text":"1396"},{"range":"1465","text":"1395"},{"range":"1465","text":"1396"},{"range":"1466","text":"1395"},{"range":"1466","text":"1396"},{"range":"1467","text":"1395"},{"range":"1467","text":"1396"},{"range":"1468","text":"1395"},{"range":"1468","text":"1396"},{"range":"1469","text":"1395"},{"range":"1469","text":"1396"},{"range":"1470","text":"1395"},{"range":"1470","text":"1396"},{"range":"1471","text":"1395"},{"range":"1471","text":"1396"},{"range":"1472","text":"1395"},{"range":"1472","text":"1396"},{"range":"1473","text":"1395"},{"range":"1473","text":"1396"},{"range":"1474","text":"1395"},{"range":"1474","text":"1396"},{"range":"1475","text":"1395"},{"range":"1475","text":"1396"},{"range":"1476","text":"1395"},{"range":"1476","text":"1396"},{"range":"1477","text":"1395"},{"range":"1477","text":"1396"},{"range":"1478","text":"1395"},{"range":"1478","text":"1396"},{"range":"1479","text":"1395"},{"range":"1479","text":"1396"},{"range":"1480","text":"1395"},{"range":"1480","text":"1396"},{"range":"1481","text":"1395"},{"range":"1481","text":"1396"},{"range":"1482","text":"1395"},{"range":"1482","text":"1396"},{"range":"1483","text":"1395"},{"range":"1483","text":"1396"},{"range":"1484","text":"1395"},{"range":"1484","text":"1396"},{"range":"1485","text":"1395"},{"range":"1485","text":"1396"},{"range":"1486","text":"1395"},{"range":"1486","text":"1396"},{"range":"1487","text":"1395"},{"range":"1487","text":"1396"},{"range":"1488","text":"1395"},{"range":"1488","text":"1396"},{"range":"1489","text":"1395"},{"range":"1489","text":"1396"},{"range":"1490","text":"1395"},{"range":"1490","text":"1396"},{"range":"1491","text":"1395"},{"range":"1491","text":"1396"},{"range":"1492","text":"1395"},{"range":"1492","text":"1396"},{"range":"1493","text":"1395"},{"range":"1493","text":"1396"},{"range":"1494","text":"1395"},{"range":"1494","text":"1396"},{"range":"1495","text":"1395"},{"range":"1495","text":"1396"},{"range":"1496","text":"1395"},{"range":"1496","text":"1396"},{"range":"1497","text":"1395"},{"range":"1497","text":"1396"},{"range":"1498","text":"1395"},{"range":"1498","text":"1396"},{"range":"1499","text":"1395"},{"range":"1499","text":"1396"},{"range":"1500","text":"1395"},{"range":"1500","text":"1396"},{"range":"1501","text":"1395"},{"range":"1501","text":"1396"},{"range":"1502","text":"1395"},{"range":"1502","text":"1396"},{"range":"1503","text":"1395"},{"range":"1503","text":"1396"},{"range":"1504","text":"1395"},{"range":"1504","text":"1396"},{"range":"1505","text":"1395"},{"range":"1505","text":"1396"},{"range":"1506","text":"1395"},{"range":"1506","text":"1396"},{"range":"1507","text":"1395"},{"range":"1507","text":"1396"},{"range":"1508","text":"1395"},{"range":"1508","text":"1396"},{"range":"1509","text":"1395"},{"range":"1509","text":"1396"},{"range":"1510","text":"1395"},{"range":"1510","text":"1396"},{"range":"1511","text":"1395"},{"range":"1511","text":"1396"},{"range":"1512","text":"1395"},{"range":"1512","text":"1396"},{"range":"1513","text":"1395"},{"range":"1513","text":"1396"},{"range":"1514","text":"1395"},{"range":"1514","text":"1396"},{"range":"1515","text":"1395"},{"range":"1515","text":"1396"},{"range":"1516","text":"1395"},{"range":"1516","text":"1396"},{"range":"1517","text":"1395"},{"range":"1517","text":"1396"},{"range":"1518","text":"1395"},{"range":"1518","text":"1396"},{"range":"1519","text":"1395"},{"range":"1519","text":"1396"},{"range":"1520","text":"1395"},{"range":"1520","text":"1396"},{"range":"1521","text":"1395"},{"range":"1521","text":"1396"},{"range":"1522","text":"1395"},{"range":"1522","text":"1396"},{"range":"1523","text":"1395"},{"range":"1523","text":"1396"},{"range":"1524","text":"1395"},{"range":"1524","text":"1396"},{"range":"1525","text":"1395"},{"range":"1525","text":"1396"},{"range":"1526","text":"1395"},{"range":"1526","text":"1396"},{"range":"1527","text":"1395"},{"range":"1527","text":"1396"},{"range":"1528","text":"1395"},{"range":"1528","text":"1396"},{"range":"1529","text":"1395"},{"range":"1529","text":"1396"},{"range":"1530","text":"1395"},{"range":"1530","text":"1396"},{"range":"1531","text":"1395"},{"range":"1531","text":"1396"},{"range":"1532","text":"1395"},{"range":"1532","text":"1396"},{"range":"1533","text":"1395"},{"range":"1533","text":"1396"},{"range":"1534","text":"1395"},{"range":"1534","text":"1396"},{"range":"1535","text":"1395"},{"range":"1535","text":"1396"},{"range":"1536","text":"1395"},{"range":"1536","text":"1396"},{"range":"1537","text":"1395"},{"range":"1537","text":"1396"},{"range":"1538","text":"1395"},{"range":"1538","text":"1396"},{"range":"1539","text":"1395"},{"range":"1539","text":"1396"},{"range":"1540","text":"1395"},{"range":"1540","text":"1396"},{"range":"1541","text":"1395"},{"range":"1541","text":"1396"},{"range":"1542","text":"1395"},{"range":"1542","text":"1396"},{"range":"1543","text":"1395"},{"range":"1543","text":"1396"},{"range":"1544","text":"1395"},{"range":"1544","text":"1396"},{"range":"1545","text":"1395"},{"range":"1545","text":"1396"},{"range":"1546","text":"1395"},{"range":"1546","text":"1396"},{"range":"1547","text":"1395"},{"range":"1547","text":"1396"},{"range":"1548","text":"1395"},{"range":"1548","text":"1396"},{"range":"1549","text":"1395"},{"range":"1549","text":"1396"},{"range":"1550","text":"1395"},{"range":"1550","text":"1396"},[204,207],"unknown","never",[3881,3884],[3030,3033],[1760,1763],[12500,12503],[13948,13951],[3057,3060],[5652,5655],[6899,6902],[8164,8167],[1992,1995],[2010,2013],[2147,2150],[2314,2317],[2714,2717],[3195,3198],[8488,8491],[8602,8605],[9987,9990],[5353,5356],[7219,7222],[7721,7724],[7860,7863],[8076,8079],[8277,8280],[8477,8480],[8652,8655],[8762,8765],[8874,8877],[12297,12300],[12303,12306],[12588,12591],[14548,14551],[14554,14557],[17958,17961],[17964,17967],[19899,19902],[19905,19908],[21854,21857],[21860,21863],[1935,1938],[4092,4095],[4311,4314],[7343,7346],[8578,8581],[7255,7258],[7718,7721],[8414,8417],[2796,2799],[2881,2884],[1210,1213],[1987,1990],[1861,1864],[3743,3746],[6015,6018],[8687,8690],[9107,9110],[1694,1697],[3057,3060],[1219,1222],[1236,1239],[1213,1216],[1230,1233],[1898,1901],[2767,2770],[3364,3367],[3902,3905],[4406,4409],[5179,5182],[5257,5260],[1187,1190],[1204,1207],[3934,3937],[3951,3954],[4562,4565],[4895,4898],[5299,5302],[5867,5870],[5960,5963],[6741,6744],[12344,12347],[12713,12716],[13138,13141],[13705,13708],[14606,14609],[15135,15138],[15908,15911],[15986,15989],[16020,16023],[16069,16072],[1846,1849],[2669,2672],[3266,3269],[3794,3797],[4298,4301],[5071,5074],[5149,5152],[4141,4144],[4158,4161],[4795,4798],[5128,5131],[5532,5535],[6112,6115],[6205,6208],[6996,6999],[12945,12948],[13340,13343],[13781,13784],[14348,14351],[15270,15273],[15799,15802],[16572,16575],[16650,16653],[16684,16687],[16733,16736],[1191,1194],[1208,1211],[1880,1883],[2733,2736],[3330,3333],[3864,3867],[4368,4371],[5141,5144],[5219,5222],[3408,3411],[3501,3504],[4034,4037],[6646,6649],[6891,6894],[7458,7461],[8372,8375],[8901,8904],[9674,9677],[9752,9755],[9786,9789],[9835,9838],[1880,1883],[2733,2736],[3330,3333],[3864,3867],[4368,4371],[5141,5144],[5219,5222],[3398,3401],[3491,3494],[4024,4027],[6636,6639],[6881,6884],[7448,7451],[8362,8365],[8891,8894],[9664,9667],[9742,9745],[9776,9779],[9825,9828]]